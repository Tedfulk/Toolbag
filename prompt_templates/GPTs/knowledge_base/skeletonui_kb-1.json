[
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/popups?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Popups Create floating popups, menus, and tooltips using the power of Floating UI. TYPESCRIPT Copy import { popup } from '@skeletonlabs/skeleton'; import type { PopupSettings } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Floating UI Usage Params Classes Keyboard Demo Show Popup Installation Required To begin, install Floating UI from NPM. This is required for popups to function. TERMINAL Copy npm install @floating-ui/dom Import Floating UI into your application's root layout /src/routes/+layout.svelte. TYPESCRIPT Copy import { computePosition, autoUpdate, offset, shift, flip, arrow } from '@floating-ui/dom'; Import storePopup in your root layout, then pass an object containing the required Floating UI modules shown below. TYPESCRIPT Copy import { storePopup } from '@skeletonlabs/skeleton'; storePopup.set({ computePosition, autoUpdate, offset, shift, flip, arrow }); Events You can control how the popup is opened and closed by using the event setting. Click Tap the trigger element to open the popup, then outside to close it. Supports the closeQuery feature. Click Hover The popup shows only while hovering the trigger element. Great for creating tooltips. Be sure to disable pointer events for children (ex: icons) within your trigger element. These may cause the popup to flash or close early. We recommend applying \\\\\\[&>\\\\\\*\\\\\\]:pointer-events-none to your trigger element to resolve this. Hover Focus-Blur Shows the popup only while the trigger element has focus. Useful for showing tooltips while focusing an input. Focus-Click Show the popup on focus, closed when clicking outside. Useful for autocomplete popups. Supports the closeQuery feature. Settings In addition to event, let's explore what other popupSettings are available. Placement Defines which side of the trigger the popup will appear. This will automatically flip when near the edge of the screen. Show Popup top bottom left right Close Query Use the closeQuery setting to indicate what child elements within the popup can trigger the popup to close. By default this uses 'a\\\\\\[href\\\\\\], button' to denote anchors and buttons. You may provide a custom query or set '' to disable this feature. Show Popup State Callback Provide a callback function to be notified when a particular popup is opened or closed. Show Popup Middleware Use middleware to configure Floating UI middleware such as shift, offset, and more. Show Popup This includes support for the optional Floating UI middleware shown below. To use these, import the Floating UI modules and pass them to the storePopup in your root layout as shown below. Note that these may alter the default behavior of your popups. We recommend these only for advanced users. TYPESCRIPT Copy import { /\\\\\\* ... \\\\\\*/ size, autoPlacement, hide, inline } from '@floating-ui/dom'; TYPESCRIPT Copy storePopup.set({ /\\\\\\* ... \\\\\\*/ size, autoPlacement, hide, inline }); Handling Loops Popups maintain a 1-1 relationship between the trigger and the popup element. This means when using #each block to iterate and create a set of popups, you must provide a unique popup element and popup settings. Show A Show B Show C Combobox The goal of Skeleton is to combine primitive elements and components in order to generate more complex interfaces. For example, by combining a Button, Popup, and ListBox you can create a highly customizable combobox. Trigger Avoiding Style Conflicts Please use caution when adjusting the default styling for the \\\\\\[data-popup\\\\\\] element. Specifically in regards to the inherent display, position, and transition properties. These are critical for ensuring the popup loads and displays as expected. CSS Copy \\\\\\[data-popup\\\\\\] { /\\\\\\* Display \\\\\\*/ display: none; /\\\\\\* Position \\\\\\*/ position: absolute; top: 0; left: 0; /\\\\\\* Transitions \\\\\\*/ transition-property: opacity; transition-timing-function: cubic-bezier(.4,0,.2,1); transition-duration: .15s } Use a child element to introduce new classes and avoid overwriting default values. HTML Copy ... HTML Copy ... Z-Index Stacking Please note that neither Skeleton nor Floating-UI define a default z-index for popups. Accessibility Use click or focus events when targeting mobile. Touch screens do not fully support hover. Revolutionize Web Dev with free O'Reilly Report: Master Decoupling & Composable Architectures! ADS VIA CARBON On the Page Demo Installation Events Click Hover Focus-Blur Focus-Click Settings Placement Close Query State Callback Middleware Handling Loops Combobox Avoiding Style Conflicts Z-Index Stacking Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-shell?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Shell Responsive shell for controlling application layout. TYPESCRIPT Copy import { AppShell } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo The shaded regions represent the portion of the page that scrolls vertically. header sidebarLeft pageFooter header sidebarLeft sidebarRight pageHeader pageFooter footer Implement the App Shell in your app's root layout in /src/routes/+layout.svelte. Slot order does not matter. Prerequisites Required The App Shell will need to expand to fill all available space within your app's body tag. Open /src/app.html and add the following classes. This wrapping element is required and the style of display: contents should remain. HTML Copy %sveltekit.body% Then update your global stylesheet with the following. This will disable overflow for html and body tags to prevent duplicate scroll bars. CSS Copy html, body { @apply h-full overflow-hidden; } Using an App Bar If you wish for your App Bar component to remain fixed at the top of the page, embed it into the top-most header slot. HTML Copy Skeleton If you wish for your App Bar to scroll with the page, insert it into the pageHeader slot. HTML Copy Skeleton If you wish to have a sticky pageHeader, apply the following App Shell prop styles. HTML Copy ... Responsive Sidebars Sidebars have a default width of auto. This means they will automatically collapse when their contents are empty or hidden. Use this to remove the sidebar with CSS media queries via Tailwind's responsive breakpoints. HTML Copy Sidebar Consider hiding your sidebar for smaller screens and replace it with a Drawer. View Tutorial Scroll to Top on Navigation If you wish to have the App Shell page region auto-scroll to the top when navigating, add the following to your root layout in /src/routes/+layout.svelte. TYPESCRIPT Copy import type { AfterNavigate } from '@sveltejs/kit'; import { afterNavigate } from '$app/navigation'; afterNavigate((params: AfterNavigate) => { const isNewPage = params.from?.url.pathname !== params.to?.url.pathname; const elemPage = document.querySelector('#page'); if (isNewPage && elemPage !== null) { elemPage.scrollTop = 0; } }); Tracking Scroll Position Use the on:scroll event to detect when the page region is scrolled vertically. TYPESCRIPT Copy import type { ComponentEvents } from 'svelte'; function scrollHandler(event: ComponentEvents\\\\\\['scroll'\\\\\\]) { console.log(event.currentTarget.scrollTop); } HTML Copy Scrollbar Gutter Use the scrollbar gutter property to adjust how the page region scrollbar gutters are handled. View a quick demo video. TYPESCRIPT Copy ... Accessibility Please be aware that the App Shell does not support window scoped scrolling. This may affect certain features, such as pull-to-refresh on mobile. In order to scroll the page region you first need to focus the page with either a touch or click. If you require window scoped scrolling we recommend you implement a custom layout in place of the App Shell. Add passwordless login to your app in minutes. Passkeys, 2FA, Social Logins, & more. Start for free. ADS VIA CARBON On the Page Demo Prerequisites Using an App Bar Responsive Sidebars Scroll to Top on Navigation Tracking Scroll Position Scrollbar Gutter Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/avatars?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Avatars Display user avatars with an image or initials. TYPESCRIPT Copy import { Avatar } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Events Demo rounded-full Using Initials Display up to two text characters. (ex: Jane Doe would be JD) JD Interactive Border Apply the following styles using the border and cursor properties. AB Handling Fallbacks Use the fallback property to specify a fallback when images fail to load, or supply the user's initials. AB Fallback Image Fallback Initials Applying Filters See Filters to learn how to import and configure the filters action and SVG filter components. TYPESCRIPT Copy import { filter, Apollo } from '@skeletonlabs/skeleton'; #Apollo #BlueNight #Emerald #GreenFall #Noir #NoirLight #Rustic #Summer84 #XPro Build the best looking website for any business with Squarespace. ADS VIA CARBON On the Page Demo Using Initials Interactive Border Handling Fallbacks Applying Filters UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-bar?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Bar A header element for the top of your page layout. Pairs well with the App Shell. TYPESCRIPT Copy import { AppBar } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Demo Headline App Bars can be generated with a number of different configurations by mixing and matching available slots and props. Single Row and Title Title Barebones Title Using Grid Layout The main row utilizes a grid-based layout. Utilize Tailwind's grid column utility classes to control column width. Then use place settings to adjust the placement of the slot contents. Title The example above provides an even three column layout with the title centered and actions right-aligned. Add video calling functionality to your website or app with Whereby’s powerful SDK. ADS VIA CARBON On the Page Demo Single Row and Title Barebones Using Grid Layout UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/guides/install?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri 404: Not Found We're sorry, something went wrong. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/cards?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Cards Provides container elements that wrap and separate content Source Page Source Usage Classes Demo Minimal Announcements Skeleton is Awesome! Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam aspernatur provident eveniet eligendi cumque consequatur tempore sint nisi sapiente. Iste beatae laboriosam iure molestias cum expedita architecto itaque quae rem. By Alex On 12/27/2023 bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Headers and Footers Segment your card using the included .card-header and .card-footer classes. Header Content Footer Interactive Anchor cards have an inherent hover style. Add .card-hover to provide an additional 3D hover effect. Hover Me! UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/forms?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Forms Pair with the Tailwind Forms plugin to style various input fields. Source Page Source Tailwind Forms Plugin Usage Classes Demo Input Select Option 1 Option 2 Option 3 Option 4 Option 5 Textarea Unlike other UI libraries, Skeleton relies heavily on native HTML form fields. This provides the best user experience and optimal accessibility. Note that form field styling is opt-in, which means a class must be applied to each element. Install the Forms Plugin The Tailwind Forms plugin normalizes form field styles, making them easier to customize and providing some rudimentary styles. See Tailwind's video tutorial for more information. TERMINAL Copy npm install -D @tailwindcss/forms Prepend the Tailwind Forms plugin to your tailwind.config.\\\\\\[ts|js\\\\\\], JAVASCRIPT Copy import forms from '@tailwindcss/forms'; export default { //... plugins: \\\\\\[ forms, //... \\\\\\], }; Labels Label Input Input (text) Input (text) Input (readonly) Input (disabled) Input (email) Input (email, multiple) Input (password) Input (search) Input (date) Input (datetime-local) Input (month) Input (number) Input (time) Input (week) Input (tel) Input (url) Files Input (file) Input (file, multiple) Textarea Textarea Select Select Option 1 Option 2 Option 3 Option 4 Option 5 Select (size) Option 1 Option 2 Option 3 Option 4 Option 5 Select (multiple) Option 1 Option 2 Option 3 Option 4 Option 5 Checkboxes Option 1 Option 2 Option 3 Radio Groups Option 1 Option 2 Option 3 Range Color Input Groups Create a horizontal group of related form fields. Groups support most input types and select elements, but not all. The column sizes are grid-based, via Tailwind's arbitrary column syntax. Descriptive segments (on either side) allow for div, button, and anchor (a) elements. The .input-group-divider class applies vertical divider lines. The .input-group-shim class applies subtle shading to a segment, to draw more attention. Website https:// Amount USD CAD EURO Username Search Submit Variants Skeleton includes a forms variant inspired by Material Design. Use this as a reference for building your own variant classes. Input (text) Input (password) Select Option 1 Option 2 Option 3 Option 4 Option 5 Validation Classes Skeleton provides a set of classes for indicating form validation. These must come last in a group of class values. They are compatible with the variant above. .input-success .input-warning .input-error Browser Support Please be aware that not all native HTML form fields work consistently across browsers or operating systems. We strongly recommend cross-device/OS/browser testing to ensure compatibility for your target audience. Fast implementation, a customizable login experience, and flexible user journeys. Try Auth0 for free ADS VIA CARBON On the Page Demo Install the Forms Plugin Labels Input Files Textarea Select Checkboxes Radio Groups Range Color Input Groups Variants Validation Classes Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/typography?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Typography Provides a variety of globally scoped typographic styles. Keeps common tags styled consistently throughout an app. Source Page Source Usage Headings Skeleton H1 Skeleton H2 Skeleton H3 Skeleton H4 Skeleton H5 Skeleton H6 Paragraph The quick brown fox jumps over the lazy dog. Anchor Anchor Blockquote Lorem ipsum, dolor sit amet consectetur adipisicing elit. Expedita cupiditate dolores dignissimos maiores doloremque fugiat, dolore doloribus nisi, repellendus mollitia nostrum, commodi a minus aperiam deleniti. Velit rerum ut tempora! Pre-formatted Text The quick brown fox jumps over the lazy dog. Code .myExampleClass Keyboard Press ⌘ + C to copy. Insertion / Deletion Always Gonna Give You Up Never Gonna Give You Up Segment with advanced AI tools for up to 141% more revenue ADS VIA CARBON On the Page Headings Paragraph Anchor Blockquote Pre-formatted Text Code Keyboard Insertion / Deletion UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/lists?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Lists Provides styles for static list elements. Source Page Source Usage Classes Demo Unordered List Lillian Lindgren ⋮ Karla Denesik-Will ⋮ Freda Gutkowski ⋮ Apply the .list class to the parent. Wrap children with span elements to allow for horizontal spacing. Ordered List 1 Numbered Item A ⋮ 2 Numbered Item B ⋮ 3 Numbered Item C ⋮ Description List Note we insert an extra div element to control flex layout and aid with vertical list item spacing. Item A Description for A ⋮ Item B Description for B ⋮ Item C Description for C ⋮ Navigation List While verbose, we do recommend you use all tags shown below to meet recommended accessibility guidelines. Nav Item A ⋮ Nav Item B ⋮ Nav Item C ⋮ To highlight active state, we recommend conditionally applying a background color to the anchor tag. TYPESCRIPT Copy $: classesActive = (href: string) => (href === $page.url.pathname ? '!bg-primary-500' : ''); HTML Copy \\[Page\\]({href}) UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/guides/themes/colors?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri 404:Not Found We're sorry, something went wrong. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/guides/themes/generator?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri 404:Not Found We're sorry, something went wrong. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — How to implement a responsive sidebar drawer",
    "url": "https://www.skeleton.dev/blog/how-to-implement-a-responsive-sidebar-drawer",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 21, 2023 10 min read How to implement a responsive sidebar drawer Chris Simmons @SkeletonUI 👍 This guide has been updated for Skeleton v2 or higher. In this tutorial we'll implement a set of responsive components that provide a unique navigation experience for mobile and desktop. Desktop users will see a fixed sidebar, while mobile users will see an interactive slide-out drawer. This allows for complex navigation menus that makes use of available screen space. Find the source code for this project here: blog-tutorials/responsive-sidebar-drawer at master · skeletonlabs/blog-tutorials This directory contains a series of tutorial projects created as part of the Skeleton blog. - blog-tutorials/responsive-sidebar-drawer at master · skeletonlabs/blog-tutorials GitHubskeletonlabs Note that for this tutorial we'll focus on SvelteKit, but most concepts should be applicable to Vite and Astro projects as well. Getting Started We'll need to create a new project. You can either follow the written documentation or use the brand new Skeleton CLI, which will generate a new SvelteKit project with Skeleton atomically preconfigured. For simplicity, we'll opt for the latter: npm create skeleton-app@latest tutorial-skeleton-sidebar Note PNPM and Yarn are also supported. For this project, let's use the following settings: Yes to Typescript Syntax No for ESLint, Prettier, and Playwright We won't need Tailwind Plugins, so hit enter to skip. Any theme is fine. We'll use the default. When prompted, choose the Welcome template. We will then need to navigate into the project directory, open the project in your editor of choice, then start the dev server. TIP: VS Code users can run code . to open the project source. cd tutorial-skeleton-sidebar npm run dev Navigate your browser to the localhost address shown in your terminal. http://localhost:5173/ is the default. You should see the new Welcome page below. The Welcome page for new Skeleton projects. Prepare the Layout and Page With our project established, let's open the homepage route in /src/routes/+page.svelte and replace the contents with the following. This will make better use of our horizontal space and indicate which page we're on. Homepage ======== \\* \\* \\* Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cupiditate nostrum, vero explicabo sunt ipsum asperiores. Molestias nostrum mollitia cumque veniam eum error atque, dolores nesciunt voluptas ea consectetur sed delectus. Next, let's open the root layout in /src/routes/+layout.svelte. Notice two Skeleton components have already been implemented: App Shell - a Svelte component which controls page layout. App Bar - a Svelte component for our header at the top of the page. Add a Sidebar The App Shell component provides multiple named slots. You'll note the use of the header and default page route slots in the current layout. Let's add one more – a left sidebar slot. Insert the following between the header and default slots. Sidebar Working! When we save our changes we'll see a the new sidebar appear on the left side. If you used the CLI to generate your app you may see some default sidebar styles. Otherwise add these using the slotSidebarLeft prop as shown below. This applies several Tailwind utility classes. Shared Navigation Component While we could hardcode our new navigation list directly into the sidebar, we really need something more portable. For this we'll generate a new Svelte component. SvelteKit relies on the /lib directory to house local shared components, so let's create a new Navigation component in the follow location. Note that you may need to create the directories shown: /src/lib/Navigation/Navigation.svelte Insert the following markup into the Navigation.svelte. This will make use of Skeleton's Tailwind Element list styles, including some basic hover styles. \\* \\[Homepage\\](/) \\* \\[About\\](/about) \\* \\[Blog\\](/blog) \\* \\[Contact\\](/contact) These links will act as placeholders. They do not need to exist. Open your root layout and import the new Navigation component in the script tag at the top. import Navigation from '$lib/Navigation/Navigation.svelte'; NOTE: If the Navigation import show a red underline error, restart the dev server. SvelteKit will see your new /lib directory and automatically configure the $lib alias path for your project. Then replace Sidebar Working! with the Navigation component: With all changes saved, we should see our navigation component on the page: Unfortunately, if we resize the window down to mobile size, you'll note the page contents do not fit well due to our fixed sidebar. This is the issue we will overcome in the next few steps. Uh oh, let's fix this. Responsive Sidebar Styles To alleviate the issue above we'll need to hide our App Side sidebar on smaller screens. To do this, we can make use of Tailwind's media queries and utility classes. Since Tailwind is mobile-first, our sidebar will need a base width of w-0 (zero), then expand to w-64 (256px) when the window reaches the large breakpoint. Adjust your sidebar styles as follows: Note we also drop the p-4 padding class. Save the changes and try resizing the the browser width again. Now when the width is small enough the sidebar will automatically hide itself! However, this introduces another issue - with the padding removed, our navigation is bumping into the edges of the sidebar. To resolve the padding, open your Navigation component and append the p-4 class to your NAV element: Save the changes and the spacing issue should now be resolved. Hamburger Menu Button While our desktop experience is great, we still need to provide navigation for our mobile users. For this, we'll need to implement a drawer component. But first, let's setup a trigger that will allow the drawer to show on demand - for this we'll use a hamburger button. In your root layout, update the App Bar's lead slot with the following changes: \\*\\*Skeleton\\*\\* This adds a responsive button that only appears on small screens. Try resizing your window and you'll notice the button only appears when the window is below Tailwind's large breakpoint threshold. The button doesn't functionally do anything yet, but we'll change that in an upcoming step. Drawer Component Now it's time to add the drawer component and store. To match our sidebar, we'll want this to appear from the left side of the screen. Open your root layout file and let's implement a few changes. First, let's bring in a few of our required imports: import { initializeStores, Drawer, getDrawerStore } from '@skeletonlabs/skeleton'; Then, let's make sure to trigger initilizeStores() to ensure our overlay stores are available. This is used to help prevent known SSR issues with SvelteKit. We'll also create an instance of drawerStore which retrieves our initialized store. initializeStores(); const drawerStore = getDrawerStore(); We'll add the Drawer component directly above the App Shell since it's an overlay. (contents) Save and preview your app, but please be aware you will not see the drawer immediately. This is due to the fact it is closed and hidden by default. To change this, let's first implement a new drawerOpen function that triggers the drawer's open method via drawerStore.open({}). Add the following within the script tag in your root layout: function drawerOpen(): void { drawerStore.open({}); } We'll provide the {} param in case we want to adjust the Drawer settings later. Finally, add a click handler to your new hamburger menu button to trigger this new function on click: Now when we resize our window to a small size and tap the hamburger menu button the drawer should appear from the left side of the screen. Tap in the empty \"backdrop\" area on the right to close the drawer. Add the Drawer One final step remains, we need to add our Navigation component to the Drawer's default slot. To do this, replace (contents) with the following: Save the changes and open the drawer to see the navigate component within the drawer. Congrats, you've done it! 👍 While it may seem odd to have our navigation component in two places, the goal here is to centralize our navigation and keep maintenance minimal. Any changes within the Navigation component are immediately reflected for both mobile and desktop users. To see this in action, change the text of any of the existing links. Going Further Now that you've learned the basic concepts, lets explore advanced techniques using this system. The following is completely optional, but may prove useful for real world applications. Unique Sidebar and Drawer Settings Since the App Shell sidebar and Drawer utilize their own unique slots, you can take advantage of this to customize the surrounding content independently. Here's a quick example: Navigation ---------- \\* \\* \\* Adding custom class styles, an H2, and HR tags. This will create a drawer-only header label. Note that it's also possible to pass unique props values to your custom Navigation component in either slot location. Close the Drawer on Selection If you tap the homepage link within the drawer the drawer will currently remain visible. This is not the expected user experience. Let's open our Navigation.svelte component and append the following within a script tag at the top of the file: import { getDrawerStore } from \"@skeletonlabs/skeleton\"; const drawerStore = getDrawerStore(); function drawerClose(): void { drawerStore.close(); } This imports our store and adds a close method. Finally, let's create an click handler for elements that we wish to close the drawer:\\* \\[Homepage\\](/) \\* \\[About\\](/about) \\* \\[Blog\\](/blog) \\* \\[Contact\\](/contact) Now when we click an anchor the drawer will auto-close itself. Selectively Disable the Sidebar ❗ The following makes use of SvelteKit-only methods. You may have noticed the desktop sidebar selectively appears only on certain pages for the Skeleton website. It is hidden on the homepage and blog, but appears on any documentation section. We accomplish this using SvelteKit's $page store, which provides the current route URL. To imitate this in our tutorial project, let's create a second page within our app. Copy /src/routes/+page.svelte to /src/routes/about/+page.svelte, then change the page H1 tag text to \"About\". This will allow us to navigate between the Home and About pages in our navigation menu. Go ahead and navigate to the About page for the following step. Next, let's disable the sidebar only when showing the homepage. In your root layout, import the SvelteKit $page store in your script tags at the top of of the script tag: import { page } from '$app/stores'; If we were to console log $page.url.pathname we would see different results for either page in our browser: / will be logged for the Home page. /about will be logged for the About page. Given this knowledge, we can use a Svelte reactive property to monitor changes to the $page store, then adjust styles for our App Shell sidebar as needed. Add the following to the script tag in your root layout: $: classesSidebar = $page.url.pathname === '/' ? 'w-0' : 'w-0 lg:w-64'; If the page URL is / then set the former styles, else the latter. Then modify the App Shell sidebar classes to use the dynamic values: Now when we navigate between the home and about pages our left sidebar will adjust accordingly. However, on mobile, we retain access to the hamburger menu and drawer navigation at all times. UX Considerations While the responsive sidebar drawer is useful, it's worth noting this is one of many navigation patterns available. It's up to you, the developer, to decide what works best for your project and users. Alternatively, please consider the following suggestions: Use an App Rail to provide compact vertical navigation. Append a set of links to your App Bar at the top of the page. If you need to go deeper, consider using a Popup. Tutorials Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "500: INTERNAL_SERVER_ERROR",
    "url": "https://www.skeleton.dev/elements/core?ref=skeleton.ghost.io",
    "html": "500: INTERNAL\\\\\\_SERVER\\\\\\_ERROR Code: INTERNAL\\\\\\_SERVER\\\\\\_ERROR ID: iad1::iad1::gvzz7-1703646611518-ba52963224b9"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/autocomplete?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Autocomplete Displays a list of suggested options. TYPESCRIPT Copy import { Autocomplete } from '@skeletonlabs/skeleton'; import type { AutocompleteOption } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Events Keyboard Demo Vanilla Chocolate Strawberry Neapolitan Pineapple Peach The Autocomplete component does not contain it's own input by default. Instead, by using input binding paired with an on:selection event, you may utilize this component alongside any type of input that takes in suggested values. Data Structure You may optionally append keywords to provide additional search terms. As well as meta to provide arbitrary data - which is not utilizing for filtering. All data option data is returned by on:selection, including these. TYPESCRIPT Copy const flavorOptions: AutocompleteOption\\\\\\[\\\\\\] = \\\\\\[ { ..., keywords: 'mix, strawberry, chocolate, vanilla' }, { ..., meta: { healthy: false } }, \\\\\\]; Allowed Options Provide a list of values you wish to allow. Only options with a matching value will be displayed. Neapolitan Pineapple Peach Allowed \\\\\\[neapolitan, pineapple, peach\\\\\\] Denied Options Provide a list of values you wish to deny. Denied options will be excluded from the list. Strawberry Neapolitan Pineapple Peach Denied \\\\\\[vanilla, chocolate\\\\\\] Custom Filter Provide a custom filter function using the prop filter. Vanilla Chocolate Strawberry Neapolitan Pineapple Peach Input Chip We've provided a demo of using Autocomplete alongside a Skeleton Input Chip component below. vanilla chocolate vanilla ✕ chocolate ✕ Strawberry Neapolitan Pineapple Peach Popup We've provide a demo of using Autocomplete alongside a Skeleton popup utility below. Browser Support For Firefox, when wrapping the Autocomplete component in an parent element that uses overflow styling, make sure you add tabindex=\"-1\". By doing this, it will ensure that tab navigation selects the children within, instead of the wrapping element itself. On the Page Demo Data Structure Allowed Options Denied Options Custom Filter Input Chip Popup Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-rail?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Rail A side navigation rail component TYPESCRIPT Copy import { AppRail, AppRailTile, AppRailAnchor } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Tile 1 Tile 2 Tile 3 Tile Value: 0 Tiles We offer two types of tiles below. Consider mixing and matching these as needed. AppRailTile These tiles are intended to maintain state using an embedded checkbox input. Use these within forms or to query submenus, similar to the Skeleton documentation sidebar. Tile AppRailAnchor These tiles operate as anchor tags, supporting href, target, rel, and more. Use these when you wish to link to a new page when this tile is clicked. Anchor Page State Using the SvelteKit page store, you can dynamically highlight the active link based on it's path. TYPESCRIPT Copy import { page } from '$app/stores'; HTML Copy (icon) (icon) Horizontal Orientation The App Rail is intended for vertical orientations only. For mobile interfaces, considering using a navigation tab component. On the Page Demo Tiles AppRailTile AppRailAnchor Page State Horizontal Orientation UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing Thank you for your interest in contributing to Skeleton. We ask that you please review the sections below in full before submitting your first pull request. Getting Started Concepts and Best Practices New to open source? Read this detailed guide covering the basics. Read Guide Step-by-Step Guide Follow a guided tour showing you how to make your first contribution. Read Guide Contributing to Skeleton Requirements Read Skeleton's requirements and review our recommended workflow process. Read Guide Style Guide View our recommended conventions for writing code, naming properties, and more. Read Guide Sveld for Components Learn how we use Sveld to automatically document components. Read Guide Documentation Pages Learn how to properly document features within Skeleton. Read Guide On the Page Getting Started Contributing to Skeleton UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton + Flowbite",
    "url": "https://www.skeleton.dev/blog/skeleton-plus-flowbite?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 21, 2023 9 min read Skeleton + Flowbite Chris Simmons @SkeletonUI Skeleton provides an ever expanding set of elements, components, and utility features. However, you may occasionally may find it valuable to mix and match elements from other UI libraries. This includes open source UI libraries such as Flowbite. In this guide we'll cover how to combine Skeleton and Flowbite to get the best of both worlds! 👍 This guide has been updated for Skeleton v2 or higher. You don't have to choose! What is Flowbite? Flowbite - Tailwind CSS component library Get started with the most popular open-source library of interactive UI components built with the utility classes from Tailwind CSS Tailwind CSS component libraryThemesberg Zoltán and the Flowbite team have created an extensive open-source library that includes over 450+ UI elements (called components). By pairing these with Skeleton you open the door to a tremendous number of valuable UI assets. Flowbite vs Flowbite Svelte Before we get started, you should know the difference between Flowbite's two offerings. Flowbite is the core library of elements generated with HTML and Tailwind's utility classes, while Flowbite Svelte is a Svelte-focused component library built using these Flowbite elements. The latter is comparable to Skeleton. Unfortunately Flowbite Svelte and Skeleton's Tailwind plugins appear to modify similar settings and currently do not play well together. For this guide, we will be focusing purely on the core library elements. Create a New Skeleton Project To begin, we'll create a new Skeleton project using Skeleton CLI: npm create skeleton-app@latest skeleton-plus-flowbite - Choose \"Yes, using Typescript syntax\" - Select \"No\" for ESLint, Prettier, Playwright, Vitest, Inspector - Hit \"Enter\" to skip Tailwind plugins - Select the default \"Skeleton\" theme - Select the \"Bare Bones\" template cd skeleton-plus-flowbite npm install npm run dev -- --open Open the project in your text editor of choice and ensure your local dev server is running. You'll be met with some basic styles and welcome message: The home page in our minimal Skeleton app. Supporting Dark Mode Flowbite provides great support for both light and dark mode styles for most elements.  To easily toggle Tailwind's dark mode we'll use Skeleton's Light Switch utility. Import the component into /src/routes/+page.svelte, then add it to your homepage route template. Feel free to replace all content within this page. import { LightSwitch } from '@skeletonlabs/skeleton'; This provides a simple switch for toggling between light and dark modes. Flowbite's Timeline Element You can browse the full list of the available elements (called components) on Flowbite's website. For this guide we'll focus on the Vertical Timeline element. A useful feature not currently available in Skeleton. Tailwind CSS Timeline - Flowbite Get started with the responsive timeline component to show data in a chronological order with support for multiple styles, sizes, and variants FlowbiteThemesberg The Timeline element presented on the Flowbite website. Additionally we'll implement this feature using custom Svelte components. This will encourage reusability and reduce the number of changes needed within the HTML template. Getting Started View the component, copy the HTML markup, then create a new component in your project in /src/lib/Timeline/Timeline.svelte. When ready, paste the markup into this new component file. Next, let's place the new component on our homepage. Open /src/routes/+page.svelte, import the component in your Script tag, then append the component at the very bottom of the file, below the Light Switch. import Timeline from '$lib/Timeline/Timeline.svelte'; We've included a wrapping element with padding. The Flowbite timeline should now be visible on the homepage. As with our Tailwind UI banner, there's a few changes we'll want to implement: Currently the contents of the three timeline points are hardcoded into our component, making it hard to add or remove additional timeline points. Many colors are hardcoded and do not change according to the Skeleton theme. We'll want to replace the button and badges with Skeleton equivalents. We'll make minor adjustments to the layout and typography. Unlike Tailwind UI, Flowbite's timeline elements do respond to Tailwind's light/dark mode. However, some of the default styles might be hard to see in light mode, so we'll cover this as we go. Dividing Parent and Child Components If we review our component markup we'll see it's made up of a wrapping ordered list ol that contains a set of list items li. To start, let's simplify things by removing the second and third timeline points, the list items li and their contents. This will leave the most fleshed out option at the top: Only this single timeline point should remain. Next, let's divide our component into two parts, the parent and child elements. Child Component (TimelineItem.svelte) Create a new Svelte component in /src/lib/TimelineItem.svelte. Cut the full markup of the the current list item li and it's contents, then paste this into the new component file you just created. 1. ... Parent Component (Timeline.svelte) Return to our parent Timeline.svelte and implement a default Svelte slot between the open and close of the ol tags, where the li elements resided: We'll also quickly modify the ol border color to match our theme: This provides a left border color that responds to your theme and light/dark mode. TimelineItem Props & Slots Open TimelineItem.svelte again and let's abstract a few things to Svelte props and slots. For brevity, we've handled this for you. Replace the entire contents of TimelineItem.svelte with the following: export let title: string = '(Title)'; export let timestamp: string = '(Timestamp)'; export let description: string = '(Description)'; export let badgeText: string = '(Badge)';2. ♥ ### {title} {#if badgeText} {badgeText} {/if} Released on {timestamp} {description} {#if $$slots.default} {/if} Take a moment to review these changes. Implement Multiple Children We can now implement multiple instances of our TimelineItem component on our homepage with unique values. Import the component and add the following to your /src/routes/+page.svelte homepage route: import TimelineItem from '$lib/Timeline/TimelineItem.svelte'; Download ZIP Note how we set badgeText and added a new Skeleton button in the first item. We now see three unique instances on our timeline. Badge and Icons While this is starting to look much better, we should take a moment to implement a Skeleton badge, and ensure our icons utilize our theme colors. Open TimelineItem.svelte and make the following changes: Badge Styles: {badgeText} {badgeText} This will apply Skeleton's badge styles with a soft primary background. Icon Styles: ... ... This will ensure our timeline icons use Skeleton's theme colors. Our updated badge and icon styles. We can quickly resolve that spacing issue between the icon and title by adjusting the li classes in TimelineItem.svelte. 9. Adjust Typography In most cases you can rely on Skeleton's default typography settings, which means we can strip many of Flowbite's inline styles. Let's adjust a few settings now. Adjust the markup and classes for your title region, noting the addition of the span element around the title. ### {title} {#if badgeText} {badgeText} {/if} Note the addition of the wrapping span around the title. Adjust the time element for our timestamp: Released on {timestamp} Then finally the paragraph element styles: {description} The final results are shown with all changes is shown below. Congrats, you now have a reusable timeline component thanks to Flowbite + Skeleton! Testing Themes To ensure our new element is fully prepared to utilize any Skeleton theme, let's try our a few of the present options available to us. Open your tailwind.config.\\\\\\[ts|js\\\\\\] in the root of your project, and register one or more of the following preset themes as follows: plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ \"skeleton\", \"wintry\", \"modern\" \\\\\\] } }) \\\\\\] Choose from any of the following options: skeleton wintry modern rocket seafoam vintage sahara hamlindigo gold-nouveau crimson Next, open /src/app.html and set the active theme using the data-theme attribute. Your new timeline component should respect all theme colors and operate in both light and dark mode as expected. Previewing the final design using the theme-crimson.css theme in dark mode. Additional Resources While Tailwind UI and Flowbite provide excellent options for extending your UI feature set, we've linked to some other useful resources below: https://tailwindcomponents.com/ https://tailblocks.cc/ https://merakiui.com/ https://www.material-tailwind.com/ Project Source Code Find the source code for this project on Github: blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials This directory contains a series of tutorial projects created as part of the Skeleton blog. - blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials GitHubskeletonlabs Tutorials Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing/requirements?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing › Requirements Requirements Please ensure you have read and understand all requirements below. Failure to adhere to the following guidelines may result in your pull requests being denied. We reserve the right to ban repeat offenders. Remember to be a team player, don't be a hero! Open source is best when we all work together! Pull Requests Find an open issue or identify a roadmap task you wish to contribute to. If an issue exists on GitHub, leave a comment and let us know you're interested. We'll assign you to it. To propose a new feature or update, create a GitHub issue or reach out on Discord in the #contributors channel. Please communicate with maintainers to define all requirements before you write your first line of code. Follow our recommended branch naming convention defined in our style guide. Submit your pull request as a DRAFT as early as possible. Peer review is critical to this process. Run automated tests with pnpm test to verify that no regressions were introduced. Be sure to follow our recommended documentation guidelines before requesting a review. When ready, set your pull request to the \"ready to review\" state. Then be patient. We'll review asap. If your PR meets all requirements it will be merged, otherwise feedback and guidance will be provided. Branches Branch Description Pull Requests master Represents the production branch. All pull requests submitted to this branch will be rejected. 🚫 NEVER dev The active development branch containing bleeding edge changes. Target this branch for PRs ✅ Yes Monorepo Skeleton uses a monorepo to group related projects into a single repository. This allows us to easily maintain multiple projects and packages in parallel. This includes the Skeleton core library, this documentation site, and more. In order to contribute to Skeleton, you will be required to install and use pnpm, as it fully supports monorepo project structures. Don't worry, it's very similar to npm and will handle most of the heavy lifting. We've provide a quick reference below for where each project is located. Path Description /packages/skeleton The core library project, containing all components, elements, utilities, and more. /sites/skeleton.dev The SvelteKit project containing this documentation website. Getting Started If you're not familiar with using a monorepo, please follow the steps below: Install pnpm globally using npm install -g pnpm. Confirm via pnpm --version in your terminal. Go to our repo and press the Fork button in the top right. Click the Code button in Github to clone down a copy of your fork to your local machine Run cd skeleton to move into the cloned monorepo project. Delete your node\\\\\\_modules directory, then run pnpm i to install dependencies for all projects. Run cd sites/skeleton.dev to move into the Skeleton documentation project. Run code . to open the current project directory in VS Code. Run pnpm dev to start a local dev server. You may see a warning the first time. Open the dev server address provided by the terminal in your browser. Modify the documentation or library components as desired. This fully supports HMR. Adding New Projects If you wish to add a new project, first run pnpm getall from the root of the monorepo. This will clone create-skeleton-app into your project under packages/create-skeleton-app. Next run pnpm csa yoursitename. This will generate a brand new Skeleton project in the /sites directory. Importing Skeleton To import Skeleton features (ex: components) within each monorepo project, use the following structure: TYPESCRIPT Copy import { Avatar } from '@skeletonlabs/skeleton'; Changesets Once you have a PR that is ready, it'll be time to add a Changeset. We use changesets to help automate our versioning, changelogs, and releases. We will be creating changesets using the Changeset CLI. The CLI will walk us through the process by having us select the packages and their respective version bumps. Version bumps are how we increment the versions for our packages and they come in 3 flavors: major, minor, and patch. Generally, new features are minor bumps while bugfixes and chores are patch bumps. When writing the summary for the changeset, be sure to prefix the message with either feat:, bugfix:, or chore:. Prefix When To Use Version Bump feat: For when a new feature is added minor bugfix: For bug fixes patch chore: For dependency and general project management patch Adding a Changeset Navigate to the root directory of the monorepo. Run pnpm changeset to run the Changeset CLI. Press Space to select the package(s) you would like to add a changeset for. Once selected, press Enter. Now it's time to select a version bump. If it's the version bump you desire, press Space to select the package(s) that it will apply to, and press Enter to submit. Otherwise, press Enter to move on to the next version bump option. You will now be prompted to write a summary. Prefix your summary with either feat:, bugfix:, or chore:. Then briefly describe the change you implemented. Confirm the changes and commit the newly generated markdown file. Tooling Skeleton utilizes a number of additional tools for project maintenance. Code Linting & Formatting To check for linting issues via Prettier, run: TERMINAL Copy pnpm lint To automatically apply suggested linting changes, run: TERMINAL Copy pnpm format Automated Tests Tests are handled via Vitest, which is similar to Jest. Make sure to run all tests before submitting new pull requests. TERMINAL Copy pnpm test Spell Checking Skeleton uses Cspell to check for spelling errors. We reccomend installing the Code Spell Checker extension for VS Code. You can add words to the dictionary using this extension, or by editing cspell.json at the root of the repository. TERMINAL Copy pnpm cspell \"\\\\\\*\\\\\\*\" --no-progress Dependencies Introducing new dependencies to projects is strictly prohibited. Please sync with a core core maintainer if this is required. Pull requests that introduce new dependencies without approval will be rejected. On the Page Pull Requests Branches Monorepo Getting Started Adding New Projects Importing Skeleton Changesets Adding a Changeset Tooling Code Linting & Formatting Automated Tests Spell Checking Dependencies UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/blog/store.skeleton.dev",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri 500: Internal Error We're sorry, something went wrong. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/sponsorship?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Sponsorship Sponsorship is a fundamental way to support open source projects such as Skeleton. Funds provided by sponsors cover operation costs, fund paid promotion, support contributors, and more. Choose from any of the services listed below. Github Ko-Fi Patreon GitHub Incentives Discord Role Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please contact a member of the Discord moderator team if this role is not automatically assigned. Premium Templates Sponsorship of the Gold Tier or higher unlocks access to all templates below. Select any template to preview. Portfolio A personal portfolio template, this template allows you to quickly and easily edit a static file to maintain your list of personal projects. Easily modify the images and stats on the homepage to make it your own. Makes use of the recently added Wintry theme by default, but easily switch to any theme you prefer. Blog This template provides a fully featured blog, allowing you to generate and maintain posts using Markdown via mdsvex. Includes full support for multiple authors and filtering by custom categories. All Markdown frontmatter is type safe and easy to expand. Including a unique and classy black and white theme. How may I access my templates? While your sponsorship is active, you gain access to a private GitHub repository containing all available templates. What makes these templates so special? Can I use other preset or custom themes? Are templates subject to license restrictions? Is support available for templates? Are Svelte and SvelteKit required? Is Tailwind required? Is Typescript required? How do I install and use each template? Ko-Fi Incentives Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please note that premium templates are not currently available to this service. Patreon Incentives Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please note that premium templates are not currently available to this service. Build the best looking website for any business with Squarespace. ADS VIA CARBON On the Page GitHub Incentives Discord Role Premium Templates Ko-Fi Incentives Patreon Incentives UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/tables?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Tables Provides a set of styles for native HTML table elements. Source Page Source Usage Classes Demo Name Symbol Atomic Number Nobelium No 102 Titanium Ti 22 Gold Au 79 Polonium Po 84 Sulfur S 16 Total Elements 5 Elements Wrap a .table-container element around any native HTML table with the .table class applied to create a responsive table. Options Spacing Hover Selection Fit Width Sorting Apply classes .table-compact or .table-comfortable to the table for tighter or looser row spacing. HTML Copy ... See Also A simple data-driven table component. Tables Component → UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/toasts?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Toasts Simple notifications utilizing a dynamic queue system. TYPESCRIPT Copy import { Toast, getToastStore } from '@skeletonlabs/skeleton'; import type { ToastSettings, ToastStore } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Demo Simple Queue Multiple This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Toast Component Implement a single instance of the toast component in your app's root layout, above the App Shell (if present). HTML Copy We'll cover triggering this feature on-demand in the documentation below. Toast Store The Toast Store acts as a queue for your toast messages. NOTE: To retrieve the store, getToastStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getToastStore } from '@skeletonlabs/skeleton'; const toastStore = getToastStore(); Trigger To add a message to the queue, use the toastStore.trigger() method and pass a toast settings object. Basic Toast Action Toast Timing Use the following setting to adjust the toast timing. No Timeout Adjusted Timeout Dismiss Use the hideDismiss option to disable the dismiss button. When using this setting autohide option enabled by default. Hide Dismiss Hover State Use the hoverable option to keep the toast visible while hovering with a mouse cursor. Visible on Hover Clear Use toastStore.clear() to clear the entire toast store queue. TYPESCRIPT Copy toastStore.clear(); Programmatic Create a reference for your toast so that you may programmatically close it on demand. Show Close Styling We recommend applying global styles via the Toast component props. However, you may also provide styles per toast instance. Backgrounds Primary Secondary Tertiary Success Warning Error Custom Styles Styled Positioning Skeleton takes an opinionated stance on positioning, preferring to keep toast notifications in fixed location on your page. This position can be modified globally the position property on the Toast component. However, we do not allow you to modify this per toast instance as we feel this would provide inconsistent UX. Callbacks You can optionally add a callback function to your ToastSettings to receive the unique ID assigned to each toast, as well as listen for when the queued and closed lifecycle events occur for that toast message. TYPESCRIPT Copy const t: ToastSettings = { // ... callback: (response) => { console.log(response.id); if (response.status === 'queued') console.log('Toast was queued!'); if (response.status === 'closed') console.log('Toast was closed!'); } }; On the Page Demo Prerequisites Initialize Stores Toast Component Toast Store Trigger Timing Dismiss Hover State Clear Programmatic Styling Backgrounds Custom Styles Positioning Callbacks UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/modals?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Modals High priority dialogs and modals using a dynamic queue system. TYPESCRIPT Copy import { Modal, getModalStore } from '@skeletonlabs/skeleton'; import type { ModalSettings, ModalComponent, ModalStore } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Transitions Usage Props Classes Events Keyboard Demo Show Modal This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Modal Component Implement a single instance of the modal component in your app's root layout, above the App Shell (if present). HTML Copy Modal Store When you wish to trigger a modal, import the getModalStore function and invoke it to retrieve the modalStore, which is a Svelte store that acts as the modal queue. NOTE: To retrieve the store, getModalStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getModalStore } from '@skeletonlabs/skeleton'; const modalStore = getModalStore(); Trigger The title, body, and image are available to all modals. Alert Modal Queue Multiple Confirm Modal Prompt Modal Close Trigger the close() method to remove the first modal in the modal queue. TYPESCRIPT Copy modalStore.close(); Clear Trigger the clear() method to completely empty the modal queue. TYPESCRIPT Copy modalStore.clear(); Modal Settings Define settings per modal instance via the trigger() method. These are similar to modal properties, but do not provide the same breadth of options. Available Settings TYPESCRIPT Copy const modal: ModalSettings = { // Provide arbitrary classes to the backdrop and modal elements: backdropClasses: '!bg-green-500', modalClasses: '!bg-red-500', // Provide arbitrary metadata to your modal instance: meta: { foo: 'bar', fizz: 'buzz', fn: myCustomFunction } }; Modal Properties Define global settings for all modal instances. Tap the \"Props\" tab at the top of the page for a full list of options. Async Response You may await a modal response by wrapping it in a Javascript Promise, which resolves when the response is triggered. TYPESCRIPT Copy new Promise((resolve) => { const modal: ModalSettings = { type: 'confirm', title: 'Please Confirm', body: 'Are you sure you wish to proceed?', response: (r: boolean) => { resolve(r); } }; modalStore.trigger(modal); }).then((r: any) => { console.log('resolved response:', r); }); Component Modals Advanced Skeleton allows you to generate custom modals using Svelte components. Example Modals Form List Embed Image Choose a Method Registry (recommended) Direct This will create a set of reusable custom modals that are globally available to your application. Add the following to your your root layout in /src/routes/+layout.svelte. TYPESCRIPT Copy import ModalComponentOne from '/example/path/here'; import ModalComponentTwo from '/example/path/here'; const modalRegistry: Record = { // Set a unique modal ID, then pass the component reference modalComponentOne: { ref: ModalComponentOne }, modalComponentTwo: { ref: ModalComponentTwo }, // ... }; Provide the modalRegistry to the modal component, which also resides in your root layout. HTML Copy Then, when triggering a new component, set the value of component to the unique modal ID as registered above. TYPESCRIPT Copy const modal: ModalSettings = { type: 'component', component: 'modalComponentOne', }; modalStore.trigger(modal); Creating a Component Learn more about how to construct a custom modal component using the tips below. Accessing Modal Store Data When creating a custom component, make sure to import the modal store. This should occur before all following steps. TYPESCRIPT Copy import { getModalStore } from '@skeletonlabs/skeleton'; const modalStore = getModalStore(); Determining the Active Modal Template Conditional Inherit Modal Component Props Default Response Values Returning a Custom Response Value Passing Arbitrary Data Component Props and Slots Setting the Modal Width Closing a Modal Accessibility Skeleton does not provide a means to disable the backdrop's click to close feature, as this would be harmful to accessibility. View the ARIA APG guidelines to learn more about modal accessibility. On the Page Demo Prerequisites Initialize Stores Modal Component Modal Store Trigger Close Clear Modal Settings Modal Properties Async Response Component Modals Example Modals Choose a Method Creating a Component Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/drawers?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Drawers Displays an overlay panel that attaches to any side of the screen. TYPESCRIPT Copy import { Drawer, getDrawerStore } from '@skeletonlabs/skeleton'; import type { DrawerSettings, DrawerStore } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Select a drawer example to preview. This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Drawer Component Implement a single instance of the drawer component in your app's root layout, above the App Shell (if present). HTML Copy Drawer Store Provides an interface to control the drawer component. NOTE: To retrieve the store, getDrawerStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getDrawerStore } from \"@skeletonlabs/skeleton\"; const drawerStore = getDrawerStore(); Open TYPESCRIPT Copy drawerStore.open(); Close TYPESCRIPT Copy drawerStore.close(); Passing Metadata To pass arbitrary metadata, create a meta object within DrawerSettings. Then use $drawerStore.meta to retrieve this. Metadata Example Styling For global styles, apply changes via props directly to the Drawer component. However, you may also override styles per drawer instance via the DrawerSettings. Styled Drawer Handling Contents Create a new DrawerSettings object, supply a unique id, then pass these settings on drawerStore.open(). TYPESCRIPT Copy const settings: DrawerSettings = { id: 'example-1' }; drawerStore.open(settings); Within the default slot of your Drawer component, setup conditional statements based on the value of $drawerStore.id. HTML Copy {#if $drawerStore.id === 'example-1'} {:else if $drawerStore.id === 'example-2'} {:else} {/if} Background Animation Advanced To animate the contents behind your drawer while it's open, first create a reactive property based on the state of the Drawer. Then implement a Tailwind translate class when the drawer is open. TYPESCRIPT Copy $: positionClasses = $drawerStore.open ? 'translate-x-\\\\\\[50%\\\\\\]' : ''; Then apply this value to the proper wrapping page element, such as the App Shell or a main element. HTML Copy ... HTML Copy ... For best results, be sure to take into account the Drawer position as well via $drawerStore.position. Accessibility Skeleton does not provide a means to disable the backdrop's click to close feature, as this would be harmful to accessibility. View the ARIA APG guidelines to learn more about modal accessibility. On the Page Demo Prerequisites Initialize Stores Drawer Component Drawer Store Open Close Passing Metadata Styling Handling Contents Background Animation Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/tree-views?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Tree Views Display information in a hierarchical structure using collapsible nodes. TYPESCRIPT Copy import { TreeView, TreeViewItem, RecursiveTreeView, type TreeViewNode } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Item 1 Item 2 Icons Folder File 1 File 2 Disabled State Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Expand & Collapse We can bind the tree view and trigger methods for expanding or collapsing all children at once. Books Movies TV Expand Collapse Selection Each tree view provides a number of selection options. Single When using single selection, our items are setup and treated as radio inputs. Books Movies TV Medium: books Books: Clean Code Multiple When using multiple selection, our items are setup and treated as checkbox inputs. Books Movies TV Mediums: books,movies Books: Clean Code,The Art of Unix Programming Relational Use the children prop to create a relational connection between parent and children. Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Recursive Mode Tree views can be generated with a recursive data-driven method using the RecursiveTreeView components. programming books series Svelte Components The props lead and content supports Svelte Components in addition to HTML content. Susan Michael Melissa Expanded To access and modify the expanded nodes use expandedNodes array prop. programming books series Expanded nodes: Disabled To access and modify the disabled nodes use disabledNodes array prop. programming books series Disabled nodes: programming Selection Just like normal Tree-view, Recursive Tree-view supports selection with both single and multiple modes. To access and modify the checked nodes use checkedNodes array prop. programming books series checked nodes: programming Relational Selection Just like normal Tree-view, Recursive Tree-view supports relational selection using the prop relational. To access and modify the checked nodes use checkedNodes array prop. In multiple relational selection mode, an extra array prop indeterminateNodes is available to indicate indeterminate nodes. programming books series indeterminate nodes: programming,language On the Page Demo Icons Disabled State Expand & Collapse Selection Single Multiple Relational Recursive Mode Svelte Components Expanded Disabled Selection Relational Selection UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/purgecss?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri PurgeCSS This guide covers vite-plugin-tailwind-purgecss, a simple Vite plugin that thoroughly purges excess CSS via PurgeCSS. While optional, this is highly recommended if you wish to minimize your production CSS bundle size. View on GitHub Introduction Motivation Tailwind UI component libraries like Skeleton and Flowbite provide a number of benefits, but come with an important caveat - Tailwind generates classes for all imported components, regardless if they are used in the project or not. This leads to a larger than necessary CSS bundle. Unfortunately this is a limitation of how Tailwind implements it's Content Configuration. Tailwind searches through all files specified in content, uses a regex to locate possible selectors, then generates their respective classes. The key thing to note is this occurs before the build process, meaning there's no CSS treeshaking or purging involved against your production file assets. How it Works Ideally, we would like to limit selectors to only those used within your project. We accomplish this by analyzing the emitted Javascript chunks generated by Rollup, which includes only the modules that are actually used in your project, then it extracts the utilized selectors. From there, we can pass along the selectors to PurgeCSS for final processing. Usage Last updated for v0.1.0. View GitHub for the the latest instructions. Installation TERMINAL Copy npm i -D vite-plugin-tailwind-purgecss Add to Vite Implement the following in vite.config.ts, found in the root of your project. TYPESCRIPT Copy import { purgeCss } from 'vite-plugin-tailwind-purgecss'; const config: UserConfig = { plugins: \\\\\\[sveltekit(), purgeCss()\\\\\\], }; Safelisting To denote selectors that shouldn't be purged, simply add them via safelist in your vite.config.ts. TYPESCRIPT Copy import { purgeCss } from 'vite-plugin-tailwind-purgecss'; const config: UserConfig = { plugins: \\\\\\[ sveltekit(), purgeCss({ safelist: { // any selectors that begin with \"hljs-\" will not be purged greedy: \\\\\\[/^hljs-/\\\\\\], }, }), \\\\\\], }; Alternatively, can safelist selectors directly within your stylesheets using special comments. CSS Copy /\\\\\\*! purgecss start ignore \\\\\\*/ h1 { color: red; } h2 { color: blue; } /\\\\\\*! purgecss end ignore \\\\\\*/ You may also safelist selectors directly within each declaration block. CSS Copy h3 { /\\\\\\*! purgecss ignore current \\\\\\*/ color: pink; } See the PurgeCSS documentation for additional configuration settings. Attribution This plugin is provided courtesy of Skeleton co-maintainer Adrian (aka CokaKoala). On the Page Introduction Motivation How it Works Usage Installation Add to Vite Safelisting Attribution UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/table-of-contents?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Svelte Component Table of Contents Allows you to quickly navigate the hierarchy of headings for the current page. TYPESCRIPT Copy import { TableOfContents, tocCrawler } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Demo Table of Contents Demo How It Works Heading IDs Anchor Links Settings Automatic IDs Prefixes and Suffixes Ignore Headings Invisible Headings Keyed Updates Active on Scroll Dynamic Headings Solution Styling Smooth Scrolling Scroll Margin Sticky Positioning How It Works Heading IDs Each page heading requires a unique ID that acts as the scroll target for inner-page navigation. HTML Copy How it Works ------------ Anchor Links Each link within the Table of Contents then points to the matching target ID as shown below. Note the use of the #. When clicked, the browser will automatically scroll so that the targeted element is at the top of the visible screen. HTML Copy \\[How It Works\\](#how-it-works) Settings Automatic IDs Set mode: generate to enable tocCrawler to automatically generate and set unique IDs for all headings that are descendants of the element the action is applied to. HTML Copy See the example below. Note this will not overwrite IDs you have set manually. HTML Copy Title One --------- Title Two --------- Title One --------- Title Two --------- Prefixes and Suffixes We recommend setting a custom heading (per the instruction above) if a conflict is found within your page. However, you may also hardcode a prefix or suffix to all generated IDs as follows: HTML Copy Ignore Headings To ignore a heading in the target region, append a data-toc-ignore attribute. The crawler will skip this. HTML Copy Ignore Me --------- Invisible Headings Use the Tailwind-provided Screen Reader .sr-only class to append an invisible heading. HTML Copy Include Me! ----------- Keyed Updates In some situations you may want to force the crawler action to update on demand. Use the key parameter and pass a value that will be modified, which operates similar to Svelte's key blocks. This can be useful for scanning for new page headers for tabbed content. TYPESCRIPT Copy let tabIndex = 0; // Modifying this value triggers the crawler to run again: // tabindex = 1; HTML Copy Active on Scroll The tocCrawler action can automatically select the top visible heading when you supply a scrollTarget element. That is the element that handles scrolling for the page. By default, this is set to target the body element. When using the Skeleton App Shell, designate scrollTarget: '#page' element as shown below. To disable this feature, set scrollTarget: ''. NOTE: depending on your page layout, the page may not scroll low enough to activate the final links in the list. HTML Copy Dynamic Headings Generating links constructed using dynamic heading text may result in unexpected behavior. HTML Copy Greetings {name} ---------------- Svelte will compile and treat this as two seperate DOM elements, only the first of which is included in the generated link. HTML Copy \"Greetings \" \"skeleton\" ----------------------- HTML Copy \\[Greetings\\](#greetings) Solution Use string interpolation to resolve this issue. HTML Copy {\\\\\\`Greetings ${name}\\\\\\`} ----------------------- The component will be compiled as follows. HTML Copy \"Greetings Skeleton\" -------------------- HTML Copy \\[Greetings Skeleton\\](#greetings-skeleton) Styling Smooth Scrolling Use Tailwind's scroll behavior styles to enable smooth scrolling on the scrollable element. Make considerations for the Reduced Motion settings for proper accessibility. HTML Copy Scroll Margin Use Tailwind's scroll margin styles if you need to offset for sticky headers NOTE: not currently supported for Skeleton's App Shell. HTML Copy Sticky Positioning Use Tailwind's sticky positioning styles to keep the Table of Contents component visible while scrolling. HTML Copy On the Page Demo How It Works Heading IDs Anchor Links Settings Automatic IDs Prefixes and Suffixes Ignore Headings Invisible Headings Keyed Updates Active on Scroll Dynamic Headings Solution Styling Smooth Scrolling Scroll Margin Sticky Positioning UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/transitions?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Transitions Skeleton provides a simple interface for modifying Svelte component transitions. This supports Svelte-provided transitions, such as: fade, blur, fly, slide, and scale. As well as custom CSS and Javascript transitions. Transitions Look for this indicator on each component page. If present, custom transitions are supported. Properties Provide the transition and transition parameters as follows. Transition In HTML Copy Transition Out HTML Copy Parameters You can modify parameters for both the default in and out transitions. HTML Copy Disable Transitions To disable all transitions for a single component, set transitions to false. This will affect both the in and out transitions. HTML Copy Non-Supported Transitions Note that Svelte provides special crossfade and draw transitions. However these work and operate in a different manner than standard transition such as fade and fly. These are not supported within the dynamic transition system at this time. Reduced Motion To ensure a better experience for users who are sensitive to motion or have vestibular disorders, Skeleton's default behavior is to disable all transitions when users enable prefers-reduced-motion in their browser settings. Force Enable For components with subtle transitions, you may choose to override this behavior by applying a property of transitions={true} to the component. We encourage you to use this setting with caution though. Store You may utilize prefersReducedMotionStore to access the user's preferred motion setting. TYPESCRIPT Copy import { prefersReducedMotionStore } from '@skeletonlabs/skeleton'; const userMotionPreference = $prefersReducedMotionStore; On the Page Properties Transition In Transition Out Parameters Disable Transitions Non-Supported Transitions Reduced Motion Force Enable Store UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/themes?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Themes Skeleton leans into Tailwind's best practices when implementing themes. This includes support for color opacity and dark mode. Themes also enable Skeleton's design tokens system. CSS Custom Properties Skeleton themes are generated using a number of CSS Custom Properties, also known as as CSS variables. CSS Property Description --theme-font-family-base Set the font family for your default base text. --theme-font-family-heading Set the font family for your heading text. --theme-font-color-base Set the default text color for light mode. --theme-font-color-dark Set the default text color for dark mode. --theme-rounded-base Set the border radius for small elements, such as buttons, inputs, etc. --theme-rounded-container Set the border radius for large elements, such as cards, textfields, etc. --theme-border-base Set the default border size for elements, including inputs. --on-\\\\\\[color\\\\\\] Set an accessible overlapping text or fill color per each theme color. --color-\\\\\\[color\\\\\\]-\\\\\\[shade\\\\\\] Defines each color and shade value for your theme. Overwriting Properties Similar to variables in other languages, CSS properties can be overwritten. By adding the following snippet in /src/app.postcss, you can overwrite the base and container border radius styles for your active theme. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-rounded-base: 20px; --theme-rounded-container: 4px; } Likewise, you can override base and heading font family settings as shown below. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-font-family-base: 'MyCustomFont', sans-serif; --theme-font-family-heading: 'MyCustomFont', sans-serif; } For deeper customization, consider cloning Skeleton's preset themes, modifying each as desired, then implementing as a custom theme. Follow the theme generator implementation guide for more information. CSS-in-JS Format New in v2 Skeleton now defines theme settings via the CSS-in-JS format. This allows themes to be easily registered within the Skeleton Tailwind plugin, rather than relying on additional stylesheet imports. Tailwind Plugin Settings New in v2 Themes are configured via Skeleton's Tailwind plugin in your tailwind.config.\\\\\\[ts|js|cjs\\\\\\], found in your project root. Register Themes Skeleton provides a number of preset themes out of the box. You'll need to register at least one theme to load them and make them available to use. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { // Register each theme within this array: preset: \\\\\\[ \"skeleton\", \"modern\", \"crimson\" \\\\\\] } }) \\\\\\] Open /src/app.html and define the active theme to display using the data-theme attribute. You can modify this attribute to dynamically switch between any registered theme. HTML Copy Enhancements Preset themes may sometimes include additional optional features, such as: heading font weights, background mesh gradients, and more. To enable these settings, include enhancements as shown below. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ // Enable 'enhancements' per each registered theme: { name: \"skeleton\", enhancements: true } \\\\\\] } }) \\\\\\] Custom Themes View the theme generator for more information about implementing custom themes. Note that it is possible to mix and match preset and custom themes. Dark Mode By default Tailwind opts for light mode. If you wish to default to dark mode, append the following class to the html element within /src/app.html. View Tailwind's documentation for more information. HTML Copy Note that Skeleton also provides a Lightswitch utility if you wish toggle between light and dark modes. Backgrounds The background color of your application is automatically set using one of Skeleton's design token styles. By default, this utilizes --color-surface-50 for light mode and --color-surface-900 for dark mode. Use your global stylesheet app.postcss to modify this. CSS Copy /\\\\\\* Default setting: \\\\\\*/ body { @apply bg-surface-50-900-token; } /\\\\\\* --- \\\\\\*/ /\\\\\\* Example: primary color via a design token: \\\\\\*/ body { @apply bg-primary-50-900-token; } /\\\\\\* Example: secondary color via Tailwind: \\\\\\*/ body { @apply bg-secondary-50 dark:bg-secondary-900; } /\\\\\\* Example: using vanilla CSS: \\\\\\*/ body { background: red; } .dark body { background: blue; } Images and Gradients You may optionally provide a background image, including the use of a CSS mesh gradient. Replace the static color values with theme color properties to create a fully adaptive gradient background. Create a Mesh CSS Copy html, body { @apply h-full; } body { background-image: radial-gradient(at 0% 0%, rgba(var(--color-secondary-500) / 0.33) 0px, transparent 50%), radial-gradient(at 98% 1%, rgba(var(--color-error-500) / 0.33) 0px, transparent 50%); background-attachment: fixed; background-position: center; background-repeat: no-repeat; background-size: cover; } Custom Fonts Fonts may be installed from a local or remote source. For GDPR compliance and optimal performance we recommend installing the fonts locally. For this guide we'll demonstrate this process using free fonts from Google Fonts. Local (recommended) Remote 1. Download a Font Select a font on Google Fonts, then tap the \"Download Family\" button near the top-right of the page. Inter 2. Add the Font Files Unzip the downloaded file, then copy all font files to the /static/fonts directory in the root of your SvelteKit project. When available we recommend using variable fonts as they require only a single file. Otherwise copy all static font file assets to the /static/fonts directory. TERMINAL Copy /static/fonts/Inter-VariableFont\\\\\\_slnt,wght.ttf 3. Apply @font-face At the top of your global stylesheet /src/app.postcss append the @font-face settings per each font. The font-family assigns the font's reference name, while src points to the font file(s) in your /static/fonts directory. CSS Copy @font-face { /\\\\\\* Reference name \\\\\\*/ font-family: 'Inter'; /\\\\\\* For multiple files use commas, ex: url(), url(), ... \\\\\\*/ src: url('/fonts/Inter-VariableFont\\\\\\_slnt,wght.ttf'); } 4. Set the Font Family. Use CSS Property overrides or open your custom theme to set the font family for base and heading properties. Be sure to use the same reference name set above or your font will not work. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-font-family-base: 'Inter', sans-serif; --theme-font-family-heading: 'Inter', sans-serif; /\\\\\\* ... \\\\\\*/ } 5. Preloading Fonts. To avoid your page flickering during hydration, consider preloading fonts within the head tag in app.html HTML Copy On the Page CSS Custom Properties Overwriting Properties CSS-in-JS Format Tailwind Plugin Settings Register Themes Enhancements Custom Themes Dark Mode Backgrounds Images and Gradients Custom Fonts UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/buttons?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Buttons Provides a robust set of button styles, including preset variants. Source Page Source Usage Classes Demo Button Button bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Use .btn to add basic button styles to any anchor or button element. Replace with .btn-icon for an icon button. Mix buttons with any arbitrary background color or variant style classes, such as .variant-\\\\\\[style\\\\\\]-\\\\\\[themeColor\\\\\\]. Sizes A number of canned size presets are available via .btn-\\\\\\[size\\\\\\]. Default sizing matches btn-md. sm md lg xl Button Groups Groups related anchors or buttons. Pairs with any variant style. Horizontal and vertical options are provided. Months Days Years Months Days Years SvelteKit Link Options While using native anchor elements, you can take advantage of SvelteKit's Link Options such as a prefetch. HTML Copy \\[Button\\](/) On the Page Demo Sizes Button Groups SvelteKit Link Options UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/generator?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Theme Generator Toggle the \"Enable Preview\" option to begin creating a new theme. The entire documentation site will update as you progress. You can navigate to different sections without losing your settings as long as you do not refresh the page. Disabling the preview will reset back to your original theme. Enable Preview Randomize Colors Primary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Secondary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Tertiary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Success 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Warning 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Error 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Surface 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Fonts Base sans serif mono system Headings sans serif mono system Text Color Light Mode Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Dark Mode Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Border Radius Base 0px 2px 4px 6px 8px 12px 16px 24px 9999px Container 0px 2px 4px 6px 8px 12px 16px 24px Border Size Base 0px 1px 2px 4px 6px 8px Preview primary secondary tertiary success warning error surface primary secondary tertiary glass success warning error Show Theme Source How to Implement Generate your theme above, copy the source code, then paste this into a new file in the root of your project with a distinct name, such as: my-custom-theme.\\\\\\[ts|js\\\\\\]. If you opt for the Javascript format, make sure to strip out any Typescript type information. Open tailwind.config.\\\\\\[ts|js|cjs\\\\\\] found in the root of your project, and import your custom theme. TYPESCRIPT Copy import { myCustomTheme } from './my-custom-theme' Within this file, register your custom theme via the Skeleton Tailwind plugin settings. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { custom: \\\\\\[ myCustomTheme \\\\\\] } }) \\\\\\] Open /src/app.html and define your theme using the data-theme attribute. The value should match the name field set within your theme's source code. HTML Copy Note that custom themes can be registered along with Skeleton's preset themes, allowing you to switch between these as desired. Migrate from v1 to v2 Need help migrating your theme from the v1 CSS format to the v2 CSS-in-JS format? Try this handy conversion tool. Conversion Tool → Advanced Color Curation Looking for deeper customization? We recommend using Palette Generator. This includes support for hue, saturation, and lightness adjustments. Pair this with the Hex-To-RGB extension to convert each Hex color value to RGB in bulk with VS Code. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — A comprehensive guide to styling Skeleton",
    "url": "https://www.skeleton.dev/blog/deep-dive-skeleton-styling",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 21, 2023 13 min read A comprehensive guide to styling Skeleton Chris Simmons @SkeletonUI This guide provides an in-depth exploration of styling options available in Skeleton. Whether you're creating a unique theme, customizing elements, or adjusting component props. You'll find a variety of useful tips and techniques for customizing your project. 👍 This guide has now been updated to support Skeleton v2 or higher. Themes Themes have a major impact into the overall design process in Skeleton. This is accomplished using CSS properties (aka CSS variables) that define your color palette, fonts, border sizes, and other useful settings. The Skeleton library provides both preset themes, as well as a theme generator, allowing you to create custom themes from scratch. Let's being by reviewing theme options. Preset Themes By default, Skeleton comes with a set of curated preset themes. Each theme is hand crafted and provides support for both light and dark modes, while ensuring adequate color contrast for accessibility. Furthermore each preset contains optional features to extend and augment your app design, such as a background mesh gradients. If you're in a hurry to get started, preset theme provide a quick and effortless way to import the style of your app out of the box. Please be aware you can test each preset using the \"Theme\" drop down at the top-right of the Skeleton documentation. Select any preset theme option and you'll immediately see a live preview that carries through the entire site. Once you've decided on the theme, visit the Guides > Themes to learn more about how themes operate. To implement a preset theme, first you need to register you preferred theme(s) in tailwind.config.\\\\\\[ts|js\\\\\\]. This will ensure each theme is available to use. plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ \"skeleton\", \"wintry\", \"modern\" \\\\\\] } }) \\\\\\] This registers three preset themes to choose from. Next, open /src/app.html and set the active theme using the data-theme attribute. This set the active theme to \"skeleton\". Theme Generator In most cases presets are a great starting point, but if you're designing your project for a company, you may wish to adhere to certain brand colors and aesthetics. Thankfully Skeleton provides a robust Theme Generator to help get you started. Note the generator has recently received several major updates to expand the color palette, improved a11y color ratios, as well as make the UI and UX more intuitive and useful. You can find the newly revamped Theme Generator here: Skeleton — UI Toolkit for Svelte + Tailwind Skeleton is a fully featured Svelte UI component library that allows you to build fast and reactive web UI using Svelte + Tailwind. Skeleton The theme generator. Simply toggle ON the \"Live Preview Mode\" option and begin editing the colors and settings. You'll note the entire documentation site updates to reflect your changes. Custom styles will even persist as you browse to other pages on the site, providing an excellent way to preview changes to components and other features right away. Use this to test color balance between light and dark modes as well. If you're not design savvy, don't worry, we've provided a \"Randomize Colors\" button to quickly generate a palette for you. For best results we recommend randomizing until you find a nice foundation, then fine tune each color to your preference. Be mindful not to make colors too light or dark. Each row and shade should have a unique value. Here's a quick reference for what each color represents in your theme: Skeleton — UI Toolkit for Svelte + Tailwind Skeleton is a fully featured Svelte UI component library that allows you to build fast and reactive web UI using Svelte + Tailwind. Skeleton The process for implementing a custom theme is very similar to using a presets. Generate your theme, copy the generated CSS, then add this to a new file in the root of your project, such as my-custom-theme.ts. Open tailwind.config.\\\\\\[ts|js\\\\\\] found in the root of your project, and import your custom theme as shown. Note we've abbreviated some of the code here: import { myCustomTheme } from './my-custom-theme' // ... plugins: \\\\\\[ skeleton({ themes: { custom: \\\\\\[ myCustomTheme \\\\\\] } }) \\\\\\] Append one or more custom themes within the custom settings. Next, open /src/app.html and set the active theme using the data-theme attribute. This set the active theme to \"my-custom-theme\". Dark Mode Skeleton provides support for light and dark modes for all themes by default. This feature is enabled directly by Tailwind. We highly recommend reviewing their official documentation if you wish to learn more about how this works. Dark Mode - Tailwind CSS Using Tailwind CSS to style your site in dark mode. Tailwind CSS Utility Classes Skeleton includes a Tailwind Plugin that is used to create a set of Tailwind utility classes for your theme's color palette. For example, here's how the primary color shade 500 is represented in the default Skeleton theme: --color-primary-500: 15 186 129; These are RGB (red green blue) color values for the hex color #0FBA81 Skeleton follows the official Tailwind recommendation for implementing CSS properties with RGB values. This allows for color opacity via the alpha channel. We've provided a few examples of these generate classes below: Skeleton Skeleton Skeleton Skeleton Utility color classes provide a quick and easy way to implement your custom theme colors in custom elements and components in your project. Design Tokens If you're not familiar with design tokens, we highly recommend the the following conference talk by Brad Frost. He does an excellent job of explaining the concept. Design tokens are reminiscent of utility classes. However, tokens go well beyond what Tailwind provides out of the box, with a focus on reusability and consumption of the CSS properties set in your theme. Design tokens take in your theme CSS properties, then apply this in a set of reusable classes that serve as the building blocks for many of the elements and components found in Skeleton. The design token lifecycle. Let's walk through the process of creating a design token. Here we have the light and dark text color set in our theme configuration: --theme-font-color-base: 0 0 0; --theme-font-color-dark: 255 255 255; The light theme (base) text color is black, while the dark theme is white. However, by default, Tailwind doesn't know about these custom property values or provide utility classes for them. This is where Skeleton introduces a set of design token CSS classes use the property setting: .text-base-token { color: rgba(var(--theme-font-color-base)); } .text-dark-token { color: rgba(var(--theme-font-color-dark)); } .text-token { @apply text-base-token dark:text-dark-token; } .text-base-token provides only the light theme text color. .text-dark-token provides only the dark theme text color. .text-token combines both tokens above to handle light and dark modes. By using .text-token in a custom component, you can ensure the text color always conforms to your appropriate theme values in both light and dark modes automatically. Here's another quick example using the border radius setting from your theme: .rounded-token { border-radius: var(--theme-rounded-base); } .rounded-tl-token { border-top-left-radius: var(--theme-rounded-base); } .rounded-tr-token { border-top-right-radius: var(--theme-rounded-base); } .rounded-bl-token { border-bottom-left-radius: var(--theme-rounded-base); } .rounded-br-token { border-bottom-right-radius: var(--theme-rounded-base); } This covers all colors, plus each of the four available corner positions (ex: top-left) The exciting part of design tokens, is if any of the base theme values are modified, every design token class that utilizes those setting will be updated, which means every component using that class will update as well. See the clip below to see this in action. Note how the button colors, fonts, and border radius all update when we switch between preset themes: The best part about design tokens is they're not just available to us, the creators of Skeleton, but you and your projects as well. This allows you to construct custom elements and components using the same tools we do, and take advantage of all the same benefits! To learn more about design tokens, please see the dedicated documentation section linked below: Skeleton — UI Toolkit for Svelte + Tailwind Skeleton is a fully featured Svelte UI component library that allows you to build fast and reactive web UI using Svelte + Tailwind. Skeleton Color Pairings The visualization below displays what we call color parings. This is an important concept to learn if you wish to understand how Skeleton balances colors - specifically for light and dark mode. Each color shade has a matching pair as you swap between light and dark mode. For example, the surface color swatch 50 is the lightest available color, so we automatically utilize that for your light theme background color. Swatch 900 is the darkest, so vice versa. These two colors form a pair. Skeleton provides a set of design tokens such as .bg-surface-50-900-token and bg-surface-900-50-token which automatically toggles between these in light/dark mode respectively. Again, see the design token documentation for more information on what styles pairings are available. Customizing Elements While Skeleton is designed with Svelte in mind, not every feature can or should be implemented as a component. Instead, in most cases it's much easier to utilize semantic elements created via HTML and CSS. In Skeleton we call these \"elements\". These provide styles for the default background color, typography, and form styles, as well as specific elements such as buttons, lists, and cards. For example, click the link below to view the source for button styles: skeleton/buttons.css at master · skeletonlabs/skeleton A fully featured UI toolkit for Svelte + Tailwind. - skeleton/buttons.css at master · skeletonlabs/skeleton GitHubskeletonlabs View the Buttons stylesheet This following snippet shows the base styles for the .btn (button) class. You'll note that it's just CSS written in the Tailwind @apply format. .btn { /\\\\\\* Size (match base) \\\\\\*/ @apply text-base px-5 py-\\\\\\[9px\\\\\\]; /\\\\\\* Core \\\\\\*/ @apply text-center whitespace-nowrap; /\\\\\\* Flex Columns \\\\\\*/ @apply inline-flex justify-center items-center space-x-2; /\\\\\\* Hover \\\\\\*/ @apply hover:brightness-110; /\\\\\\* Transitions \\\\\\*/ @apply transition-all active:scale-90; /\\\\\\* Theme: Rounded \\\\\\*/ @apply rounded-token; } By pairing element classes together, we can can easily mix and match to create interesting combinations, such as this filled button style: 💀 Skeleton The important take away here is that elements are just CSS. If you're familiar with CSS, then you should understand the concept of cascading, which allows you to easily override and extend styles. Here's a trivial example: /\\\\\\* The background will initially be red \\\\\\*/ .example { background: red; } /\\\\\\* The background cascades to green and font is set bold \\\\\\*/ .example { background: green; font-weight: bold; } Styles that come later in the flow take precedence. Please be aware that all Skeleton styles and themes properties are injected via the Skeleton Tailwind plugin. This means we can easily modify and overrides styles either in our Tailwind config or using the app.postcss global stylesheet. For example, this is the source for the button class of .btn-filled-primary: .btn-filled-primary { @apply bg-primary-500 text-on-primary-token; } Now let's modify the default background color as well as make the font bold. Add the following to your global stylesheet in /src/app.postcss in your project: .btn-filled-primary { @apply bg-purple-500 font-bold; } Every instance of this class will now use the new styles. If you wish to go further, we recommend consulting the stylesheet source code for each element in the Tailwind > Elements section. Just tap the \"view source\" link at the top of each element documentation page. Note that when overriding these inherent styles you may need to modify BOTH the light and dark mode color variations or append ! (important) as shown below: /\\\\\\* Override the light and dark mode values \\\\\\*/ .example-element { @apply bg-blue-500 dark:bg-purple-500; } /\\\\\\* Set !important to override both modes \\\\\\*/ .example-element { @apply !bg-green-500; } Customizing Components One of the most powerful features in Svelte and Skeleton is the ability to modify styles and settings per each component instance. We'll review a few techniques for customizing component in this manner. Via Style Props Unlike other UI libraries, Skeleton doesn't rely on canned options for props (ex: small, medium, large), but instead allows you to pass one or more CSS classes that directly override a style. Take this App Bar component for example: Skeleton Here we've used the background prop and provided Tailwind utility classes to modify the appearance in both light and dark modes. In light mode the background will appear red, while in dark mode the background will be orange. Our orange header in dark mode. We can take this a step further by using design tokens to provide a more compact and reusable format for this kind of change: Skeleton This specific design token represents the following styles: .bg-primary-400-500-token { @apply bg-primary-400 dark:bg-primary-500; } Your not limited to just background colors though. Each component documentation page provides a \"Props\" tab, which covers available properties, their default setting, along with a brief description. This is one of the most important resources available in the documentation when it comes to modifying components: You can modify background, border, padding, and more for the App Bar. Via the Classes Attribute These \"style props\" cover common customization targets, however, if a property is not available, don't fret - you can still provide custom classes. Each component in Skeleton supports a standardized class attribute. Which allows you to pass arbitrary Tailwind classes as shown: Skeleton Please note these classes are applied ONLY to the parent element in the component template. To understand this, imagine the following is the contents of our fake component called ExampleComponent. This represents the HTML template within the .svelte file:\n\nBut what if you need to go deeper and target that header element? Thankfully Tailwind provides a solution via the arbitrary variant syntax: ... This would provide a .p-4 padding class to the header element. Via a Global Stylesheet If the change you're trying to make should be applied to ALL instances of a particular component, the best way to do this is to modify the component with your global stylesheet. You'll find this process is very similar to styling Skeleton elements. Each component constructed in Skeleton implements uniquely named \"selector\" classes, such as .avatar-image for the Avatar component. These classes are implemented with one purpose - to provide semantic handles for global styles.  Note the the .avatar-image class in the Avatar component markup. To modify a portion of our component template, all we need to do is provide a class in our application's global stylesheet as shown: .avatar-image { @apply invert; } This global style will invert the colors of the avatar image. The quickest way to find a particular selector class is either to view the component source on GitHub, or utilize your browser's Inspect tool to locate the class directly in the DOM. For most browsers you can right-clicking on the item you wish to modify, then choose the \"Inspect\" option in the popup. This will launch your browser's dev tools. Make sure the Elements tab is selected, then navigate the DOM tree until you find the element you wish to modify. Note the selector class is always the first in the set to ensure they are easy to locate! Customizing Utilities Skeleton provides a wide assortment of utility features. These are created using a combination of Skeleton's element styles, components, actions, and in some cases introduce third party libraries. Given this, you can utilize many of the techniques described above. For example, let's take a look at how we might modify styles for the Drawer utility. Styling Drawers The Skeleton drawer allows you to create slide out overlays attached to any window edge. Drawers can be customized in a couple different ways. First, you can adjust the style props on the Drawer component itself. Our tips regarding style props for components will apply here. All instances of the drawer will now have a primary color for the backdrop and window. Second, you can style each instance of the drawer dynamically by providing available style props as key/value pairs in the DrawerSettings object: function drawerOpenStyled(): void { const settings: DrawerSettings = { // ... bgDrawer: 'bg-primary-500 text-on-primary-token', bgBackdrop: 'bg-primary-500/50', }; drawerStore.open(settings); } We use the same bgDrawer and bgBackdrop settings here. Note that Skeleton Modals and Toasts use the same conventions as well! Please consult the documentation for each utility feature to learn more about how to customize each one. Wrapping Up Given the amount of options provided, we feel confident in saying that Skeleton provides one of the most extensible design systems. We encourage you to test these techniques in your own projects. However, if you need more help, don't be afraid to reach out via the Skeleton GitHub or Discord. Tutorials Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri The UI toolkit for Svelte and Tailwind. Skeleton allows you to create adaptive and accessible interfaces for web apps of any shape or size. Get Started Learn More Search Friendly Adaptive Customizable Skeleton @SkeletonUI UI toolkit for Svelte and Tailwind. 50 Following 500 Followers Design Try Skeleton live in your browser. Open in StackBlitz"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/badges?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Badges Provides a robust set of non-interactive badge styles. Source Page Source Usage Classes Demo Badge bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Icon Badge Replace .badge with .badge-icon for a badge based on an icon. Overlapping Use Tailwind styles to overlap another element with an Icon Badge. 2 AB On the Page Demo Icon Badge Overlapping UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/tokens?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers 404: Not Found We're sorry, something went wrong. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/lightswitches?ref=skeleton.ghost.io",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Lightswitch Components and utilities to toggle Tailwind's dark mode. TYPESCRIPT Copy import { LightSwitch } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Events Keyboard Skeleton provides multiple methods for toggling light and dark mode within your application. We recommend you select one method and utilize that as your primary solution for your application. Lightswitch OS Preference Build Your Own For most users we recommend using the Lightswitch component. Please note this must be present on page load in order to operate. It is best suited within a fixed header element that's always visible on the page. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing/documentation",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing › Documenting Pages Documenting Pages We provide a starter template for new documentation pages in /src/routes/(inner)/template/+page.svelte. This implements our Doc Shell component, which ensures a consistent layout for all feature pages. Using the Doc Shell This covers accessability details, source links, keyboard interactions, classes, parameters, and more. Reference all available Doc Shell settings from the Typescript interface. View Available Settings Implementing Sveld Use the following format to import component data from Sveld. Note the unique naming structure and how ?raw&sveld is appended at the end. TYPESCRIPT Copy import sveldAccordion from '@skeletonlabs/skeleton/components/Accordion/Accordion.svelte?raw&sveld'; Each imported Sveld component reference is then passed to the DocsShellSettings via components. TYPESCRIPT Copy const settings: DocsShellSettings = { // ... components: \\\\\\[ { label: 'Accordion', sveld: sveldAccordion } \\\\\\] // ... }; Providing Examples Make sure to provide at least one featured example at the top of the page within the sandbox slot. Feature examples can be presented using the DocsPreview component, which provides a number of slots and properties. HTML Copy (the visible example) (codeblocks and implementation details) Usage The bulk of your documentation can be inserted into the usage slot for the Doc Shell. We recommend you view existing documentation pages to reference how we implement the usage page structure. On the Page Using the Doc Shell Implementing Sveld Providing Examples Usage UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing/sveld",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing › Sveld for Components Sveld for Components Skeleton implements Sveld to automatically document props, events, and slots from within each component. This is handled by appending TSDoc comments - a superset of JSDoc. This also enables IntelliSense for end users. Sveld Documentation Sveld for Props View Documentation To document component properties, add TSDoc comments using the /\\\\\\*\\\\\\* ... \\\\\\*/ format. In most use cases Sveld will automatically parse relevant information - including the property name, type, value, and your description. JAVASCRIPT Copy /\\\\\\*\\\\\\* Set the preferred search method. \\\\\\*/ export let mode = 'fizzbuzz'; The CssClasses class denotes properties that use Tailwind utility classes. Set this to aid IntelliSense features. JAVASCRIPT Copy import type { CssClasses } from '$lib'; /\\\\\\*\\\\\\* Provide classes to set vertical item spacing. \\\\\\*/ export let spacing: CssClasses = 'space-y-1'; For advanced or custom types, you may need to specify this information. This can be accomplished using the @type tag with block-style comments. Specify the type in curly brackets immediately following the tag. JAVASCRIPT Copy /\\\\\\*\\\\\\* \\\\\\* Bind this to your form data, represents the \"files\" data from the input. \\\\\\* @type {FileList} \\\\\\*/ export let files: FileList; Ensure you document Context API getContext values to provide Intellisense for child components. However, we intentionally exclude these values from the Props table. JAVASCRIPT Copy /\\\\\\*\\\\\\* Provide classes to set the hover background color. \\\\\\*/ export let hover = getContext('hover'); See the Accordion component for a reference using both parent and child components. Sveld for Slots View Documentation Slot documentation is handle via TSDoc block comments at the top of your script tag (by convention). Note that Sveld does not currently support descriptions for the default slot. Instead, we recommend you opt for a Usage tab example and instructions to illustrate the use of this slot. JAVASCRIPT Copy // Slots /\\\\\\*\\\\\\* \\\\\\* @slot lead - Provide a leading element, such as an icon. \\\\\\* @slot content - Provide the alert message text. \\\\\\*/ The leading // ... comment is required for Sveld to parse the slot descriptions. This is not optional. Sveld for Events View Documentation Sveld will automatically document forwarded events. You should not attempt to document these! However, dispatched events may be documented similar to props - with a TSDocs comment applied directly above the dispatch() method. Provide the event response in curly brackets, followed by the event name, a dash, and then the event description. JAVASCRIPT Copy /\\\\\\*\\\\\\* @event {{ event: DragEvent }} dragover - When a file is dragged over. \\\\\\*/ dispatch('dragover', event); Implementing Sveld We cover how to implement the Sveld data in the Documentation Pages section. On the Page Sveld for Props Sveld for Slots Sveld for Events Implementing Sveld UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing/style-guide",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing › Style Guide Style Guide If you wish to contribute to Skeleton, please review our opinionated code style guide below. Feature Branches Prefix Description docs/\\\\\\* Updates to the documentation pages or text copy. feat/\\\\\\* New features, components, or far-reaching updates. chore/\\\\\\* Simple and localized updates. bugfix/\\\\\\* Commits that address or fix issues. Each wildcard (\\\\\\*) should be replaced with short and semantic descriptions using kebab-case. feat/my-new-component-name File Names Feature directories should be singular and title case: ../LightSwitch/.. Components should be singular and title case: LightSwitch.svelte Svelte Actions should be singular, lowercase, and use Typescript: clipboard.ts Tailwind Element stylesheets should be plural and lowercase: buttons.css Documentation should be lowercase and use dashes: /routes/components/radio-groups/+page.svelte Tests should be suffixed with \\\\\\*.test.ts, matching feature conventions: LightSwitch.test.ts Conventions Ensure relevant events bubble via event forwarding. HTML Copy Skeleton Slot names should be short, semantic, and agnostic. Avoid names that are too specific, such as name=\"icon\". HTML Copy {#if $$slots.lead}{/if} Use adaptive theme colors for component styling. HTML Copy ❌ Skeleton ✅ Skeleton If you need to include miscellaneous attributes that were not defined as properties, use Svelte's $$restProps. Be careful though, this can overwrite the element's $$props.class attribute. To avoid this, delete the class key from $$restProps. We recommend introducing a prunedRestProps function as shown below. JAVASCRIPT Copy function prunedRestProps(): any { delete $$restProps.class; return $$restProps; } HTML Copy Skeleton Component Props TYPESCRIPT Copy export let flavor = 'Chocolate'; export let visible = false; export let parameters: Record = { foo: 'bar' }; Each prop should be a single word, all lowercase, and semantic. Match Tailwind class names if possible. If you need multiple words, use camel-casing (ex: ringWidth). Typescript will automatically handle primitive types that can be trivially inferred, such as string, number, or boolean. Make sure to set relevant default values when possible. When an existing prop is modified, consider documenting an example if relevant. Tailwind Class Props For props that pass one or more CSS utility classes, make sure to import and append the CSSClasses type. This resolves to a type of string and allows our build process to identify props that support Tailwind Intellisense. TYPESCRIPT Copy import type { CssClasses } from '../..'; TYPESCRIPT Copy export let background: CssClasses = 'bg-primary-500'; // background color export let color: CssClasses = 'text-primary-500'; // text color export let rounded: CssClasses = 'rounded-xl'; // border radius Color props should follow standard CSS style conventions (ex: color for text color). Never pass class props as arrays or objects, strings are always preferred (ex: border border-primary-500). Always pass the entire Tailwind class name. Tailwind does not support dynamic class names. CSS Styling Conventions Skeleton utilizes an opinionated set of conventions for defining structural and component props for CSS utility classes within components. Please review existing components for examples of this in practice. Base Classes The default classses for a component template element. Note the \"c\" is short for classes. TYPESCRIPT Copy let cBase = 'bg-surface-500 p-4 rounded'; // parent element styles let cLabel = 'text-base'; // child element label styles Dynamic Classes To dynamically modify classes based on a variable or prop, use a reactive statement as follows. TYPESCRIPT Copy // Prop for outlined state export let outlined = false; // Create a reactive property that uses a tertiary statement $: classesOutlined = outlined ? 'border-2 border-primary-500' : 'border-none'; Reactive Classes We use the following pattern to combine base and dynamic classes. Note the parent element classes includes $$props.classes to enable arbitrary classes passed by the user via class=\"my-custom-class\". TYPESCRIPT Copy $: classesTab = \\\\\\`${cBase} ${classesOutlined} ${{$$props.classes ?? ''}}\\\\\\`; // parent element $: classesLabel = \\\\\\`${cBaseLabel}\\\\\\`; // child element Applying Classes The first class should be an \"id\" class, which semantically describes the element for global overrides (ex: tab) Then followed immediately by the reactive class set (ex: classesTab). HTML Copy Label Dynamic Transitions Skeleton has a convention for implementing dynamic transitions within components. Please follow the guidelines below to ensure you are following our standard for this process. TIP: You may reference existing components to view this in practice: Accordion Implementation Define transition types in a context=\"module\" script tag so you can use it as generic for the standard script tag attributes. TYPESCRIPT Copy import { slide } from 'svelte/transition'; import { type Transition, type TransitionParams, type CssClasses, prefersReducedMotionStore } from '../../index.js'; // eslint-disable-next-line @typescript-eslint/no-unused-vars type SlideTransition = typeof slide; // switch with your transition type TransitionIn = Transition; type TransitionOut = Transition; Supply the generics in the standard script tag attributes. HTML Copy // ... Define the following properties: transition - default to !$prefersReducedMotionStore to adhere to the Reduced motion rules. transitionIn - the transition on entry. transitionInParams - the parameters for the entry transition. transitionOut - the transition on exit. transitionOutParams - the parameters for the entry transition. Implementing Transitions See the dedicated Transitions page for examples of how to implement custom transitions for a component. Documentation TIP: Review existing component pages to view how this is presented in practice: Accordions Add the transitionX props to DocsShellSettings to indicate that dynamic transitions are available. TYPESCRIPT Copy const settings: DocsShellSettings = { // ... transitionIn: 'slide', transitionOut: 'slide' }; Pitfalls Below are a few pitfalls we've encountered when creating Skeleton. Do your best to avoid these whenever possible. Never construct utility class names, Tailwind does not support this feature. Avoid style blocks and @apply in component files. This will bloat the stylesheet bundle size. Do not mix script-defined and inline Tailwind classes. Doing so can have a negative impact on the readability of the code. Avoid switch-case statements to create shorthand property values (ex: sm, md, lg). This restricts customization. Keep Skeleton icon library agnostic. Embed SVGs or unicode instead, which can be passed via a slot. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing/requirements",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing › Requirements Requirements Please ensure you have read and understand all requirements below. Failure to adhere to the following guidelines may result in your pull requests being denied. We reserve the right to ban repeat offenders. Remember to be a team player, don't be a hero! Open source is best when we all work together! Pull Requests Find an open issue or identify a roadmap task you wish to contribute to. If an issue exists on GitHub, leave a comment and let us know you're interested. We'll assign you to it. To propose a new feature or update, create a GitHub issue or reach out on Discord in the #contributors channel. Please communicate with maintainers to define all requirements before you write your first line of code. Follow our recommended branch naming convention defined in our style guide. Submit your pull request as a DRAFT as early as possible. Peer review is critical to this process. Run automated tests with pnpm test to verify that no regressions were introduced. Be sure to follow our recommended documentation guidelines before requesting a review. When ready, set your pull request to the \"ready to review\" state. Then be patient. We'll review asap. If your PR meets all requirements it will be merged, otherwise feedback and guidance will be provided. Branches Branch Description Pull Requests master Represents the production branch. All pull requests submitted to this branch will be rejected. 🚫 NEVER dev The active development branch containing bleeding edge changes. Target this branch for PRs ✅ Yes Monorepo Skeleton uses a monorepo to group related projects into a single repository. This allows us to easily maintain multiple projects and packages in parallel. This includes the Skeleton core library, this documentation site, and more. In order to contribute to Skeleton, you will be required to install and use pnpm, as it fully supports monorepo project structures. Don't worry, it's very similar to npm and will handle most of the heavy lifting. We've provide a quick reference below for where each project is located. Path Description /packages/skeleton The core library project, containing all components, elements, utilities, and more. /sites/skeleton.dev The SvelteKit project containing this documentation website. Getting Started If you're not familiar with using a monorepo, please follow the steps below: Install pnpm globally using npm install -g pnpm. Confirm via pnpm --version in your terminal. Go to our repo and press the Fork button in the top right. Click the Code button in Github to clone down a copy of your fork to your local machine Run cd skeleton to move into the cloned monorepo project. Delete your node\\\\\\_modules directory, then run pnpm i to install dependencies for all projects. Run cd sites/skeleton.dev to move into the Skeleton documentation project. Run code . to open the current project directory in VS Code. Run pnpm dev to start a local dev server. You may see a warning the first time. Open the dev server address provided by the terminal in your browser. Modify the documentation or library components as desired. This fully supports HMR. Adding New Projects If you wish to add a new project, first run pnpm getall from the root of the monorepo. This will clone create-skeleton-app into your project under packages/create-skeleton-app. Next run pnpm csa yoursitename. This will generate a brand new Skeleton project in the /sites directory. Importing Skeleton To import Skeleton features (ex: components) within each monorepo project, use the following structure: TYPESCRIPT Copy import { Avatar } from '@skeletonlabs/skeleton'; Changesets Once you have a PR that is ready, it'll be time to add a Changeset. We use changesets to help automate our versioning, changelogs, and releases. We will be creating changesets using the Changeset CLI. The CLI will walk us through the process by having us select the packages and their respective version bumps. Version bumps are how we increment the versions for our packages and they come in 3 flavors: major, minor, and patch. Generally, new features are minor bumps while bugfixes and chores are patch bumps. When writing the summary for the changeset, be sure to prefix the message with either feat:, bugfix:, or chore:. Prefix When To Use Version Bump feat: For when a new feature is added minor bugfix: For bug fixes patch chore: For dependency and general project management patch Adding a Changeset Navigate to the root directory of the monorepo. Run pnpm changeset to run the Changeset CLI. Press Space to select the package(s) you would like to add a changeset for. Once selected, press Enter. Now it's time to select a version bump. If it's the version bump you desire, press Space to select the package(s) that it will apply to, and press Enter to submit. Otherwise, press Enter to move on to the next version bump option. You will now be prompted to write a summary. Prefix your summary with either feat:, bugfix:, or chore:. Then briefly describe the change you implemented. Confirm the changes and commit the newly generated markdown file. Tooling Skeleton utilizes a number of additional tools for project maintenance. Code Linting & Formatting To check for linting issues via Prettier, run: TERMINAL Copy pnpm lint To automatically apply suggested linting changes, run: TERMINAL Copy pnpm format Automated Tests Tests are handled via Vitest, which is similar to Jest. Make sure to run all tests before submitting new pull requests. TERMINAL Copy pnpm test Spell Checking Skeleton uses Cspell to check for spelling errors. We reccomend installing the Code Spell Checker extension for VS Code. You can add words to the dictionary using this extension, or by editing cspell.json at the root of the repository. TERMINAL Copy pnpm cspell \"\\\\\\*\\\\\\*\" --no-progress Dependencies Introducing new dependencies to projects is strictly prohibited. Please sync with a core core maintainer if this is required. Pull requests that introduce new dependencies without approval will be rejected. On the Page Pull Requests Branches Monorepo Getting Started Adding New Projects Importing Skeleton Changesets Adding a Changeset Tooling Code Linting & Formatting Automated Tests Spell Checking Dependencies UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/tree-views",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Tree Views Display information in a hierarchical structure using collapsible nodes. TYPESCRIPT Copy import { TreeView, TreeViewItem, RecursiveTreeView, type TreeViewNode } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Item 1 Item 2 Icons Folder File 1 File 2 Disabled State Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Expand & Collapse We can bind the tree view and trigger methods for expanding or collapsing all children at once. Books Movies TV Expand Collapse Selection Each tree view provides a number of selection options. Single When using single selection, our items are setup and treated as radio inputs. Books Movies TV Medium: books Books: Clean Code Multiple When using multiple selection, our items are setup and treated as checkbox inputs. Books Movies TV Mediums: books,movies Books: Clean Code,The Art of Unix Programming Relational Use the children prop to create a relational connection between parent and children. Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Books Clean Code The Clean Coder The Art of Unix Programming Movies TV Recursive Mode Tree views can be generated with a recursive data-driven method using the RecursiveTreeView components. programming books series Svelte Components The props lead and content supports Svelte Components in addition to HTML content. Susan Michael Melissa Expanded To access and modify the expanded nodes use expandedNodes array prop. programming books series Expanded nodes: Disabled To access and modify the disabled nodes use disabledNodes array prop. programming books series Disabled nodes: programming Selection Just like normal Tree-view, Recursive Tree-view supports selection with both single and multiple modes. To access and modify the checked nodes use checkedNodes array prop. programming books series checked nodes: programming Relational Selection Just like normal Tree-view, Recursive Tree-view supports relational selection using the prop relational. To access and modify the checked nodes use checkedNodes array prop. In multiple relational selection mode, an extra array prop indeterminateNodes is available to indicate indeterminate nodes. programming books series indeterminate nodes: programming,language Revolutionize Web Dev with free O'Reilly Report: Master Decoupling & Composable Architectures! ADS VIA CARBON On the Page Demo Icons Disabled State Expand & Collapse Selection Single Multiple Relational Recursive Mode Svelte Components Expanded Disabled Selection Relational Selection UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/table-of-contents",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Svelte Component Table of Contents Allows you to quickly navigate the hierarchy of headings for the current page. TYPESCRIPT Copy import { TableOfContents, tocCrawler } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Demo Table of Contents Demo How It Works Heading IDs Anchor Links Settings Automatic IDs Prefixes and Suffixes Ignore Headings Invisible Headings Keyed Updates Active on Scroll Dynamic Headings Solution Styling Smooth Scrolling Scroll Margin Sticky Positioning How It Works Heading IDs Each page heading requires a unique ID that acts as the scroll target for inner-page navigation. HTML Copy How it Works ------------ Anchor Links Each link within the Table of Contents then points to the matching target ID as shown below. Note the use of the #. When clicked, the browser will automatically scroll so that the targeted element is at the top of the visible screen. HTML Copy \\[How It Works\\](#how-it-works) Settings Automatic IDs Set mode: generate to enable tocCrawler to automatically generate and set unique IDs for all headings that are descendants of the element the action is applied to. HTML Copy See the example below. Note this will not overwrite IDs you have set manually. HTML Copy Title One --------- Title Two --------- Title One --------- Title Two --------- Prefixes and Suffixes We recommend setting a custom heading (per the instruction above) if a conflict is found within your page. However, you may also hardcode a prefix or suffix to all generated IDs as follows: HTML Copy Ignore Headings To ignore a heading in the target region, append a data-toc-ignore attribute. The crawler will skip this. HTML Copy Ignore Me --------- Invisible Headings Use the Tailwind-provided Screen Reader .sr-only class to append an invisible heading. HTML Copy Include Me! ----------- Keyed Updates In some situations you may want to force the crawler action to update on demand. Use the key parameter and pass a value that will be modified, which operates similar to Svelte's key blocks. This can be useful for scanning for new page headers for tabbed content. TYPESCRIPT Copy let tabIndex = 0; // Modifying this value triggers the crawler to run again: // tabindex = 1; HTML Copy Active on Scroll The tocCrawler action can automatically select the top visible heading when you supply a scrollTarget element. That is the element that handles scrolling for the page. By default, this is set to target the body element. When using the Skeleton App Shell, designate scrollTarget: '#page' element as shown below. To disable this feature, set scrollTarget: ''. NOTE: depending on your page layout, the page may not scroll low enough to activate the final links in the list. HTML Copy Dynamic Headings Generating links constructed using dynamic heading text may result in unexpected behavior. HTML Copy Greetings {name} ---------------- Svelte will compile and treat this as two seperate DOM elements, only the first of which is included in the generated link. HTML Copy \"Greetings \" \"skeleton\" ----------------------- HTML Copy \\[Greetings\\](#greetings) Solution Use string interpolation to resolve this issue. HTML Copy {\\\\\\`Greetings ${name}\\\\\\`} ----------------------- The component will be compiled as follows. HTML Copy \"Greetings Skeleton\" -------------------- HTML Copy \\[Greetings Skeleton\\](#greetings-skeleton) Styling Smooth Scrolling Use Tailwind's scroll behavior styles to enable smooth scrolling on the scrollable element. Make considerations for the Reduced Motion settings for proper accessibility. HTML Copy Scroll Margin Use Tailwind's scroll margin styles if you need to offset for sticky headers NOTE: not currently supported for Skeleton's App Shell. HTML Copy Sticky Positioning Use Tailwind's sticky positioning styles to keep the Table of Contents component visible while scrolling. HTML Copy On the Page Demo How It Works Heading IDs Anchor Links Settings Automatic IDs Prefixes and Suffixes Ignore Headings Invisible Headings Keyed Updates Active on Scroll Dynamic Headings Solution Styling Smooth Scrolling Scroll Margin Sticky Positioning UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/toasts",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Toasts Simple notifications utilizing a dynamic queue system. TYPESCRIPT Copy import { Toast, getToastStore } from '@skeletonlabs/skeleton'; import type { ToastSettings, ToastStore } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Demo Simple Queue Multiple This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Toast Component Implement a single instance of the toast component in your app's root layout, above the App Shell (if present). HTML Copy We'll cover triggering this feature on-demand in the documentation below. Toast Store The Toast Store acts as a queue for your toast messages. NOTE: To retrieve the store, getToastStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getToastStore } from '@skeletonlabs/skeleton'; const toastStore = getToastStore(); Trigger To add a message to the queue, use the toastStore.trigger() method and pass a toast settings object. Basic Toast Action Toast Timing Use the following setting to adjust the toast timing. No Timeout Adjusted Timeout Dismiss Use the hideDismiss option to disable the dismiss button. When using this setting autohide option enabled by default. Hide Dismiss Hover State Use the hoverable option to keep the toast visible while hovering with a mouse cursor. Visible on Hover Clear Use toastStore.clear() to clear the entire toast store queue. TYPESCRIPT Copy toastStore.clear(); Programmatic Create a reference for your toast so that you may programmatically close it on demand. Show Close Styling We recommend applying global styles via the Toast component props. However, you may also provide styles per toast instance. Backgrounds Primary Secondary Tertiary Success Warning Error Custom Styles Styled Positioning Skeleton takes an opinionated stance on positioning, preferring to keep toast notifications in fixed location on your page. This position can be modified globally the position property on the Toast component. However, we do not allow you to modify this per toast instance as we feel this would provide inconsistent UX. Callbacks You can optionally add a callback function to your ToastSettings to receive the unique ID assigned to each toast, as well as listen for when the queued and closed lifecycle events occur for that toast message. TYPESCRIPT Copy const t: ToastSettings = { // ... callback: (response) => { console.log(response.id); if (response.status === 'queued') console.log('Toast was queued!'); if (response.status === 'closed') console.log('Toast was closed!'); } }; On the Page Demo Prerequisites Initialize Stores Toast Component Toast Store Trigger Timing Dismiss Hover State Clear Programmatic Styling Backgrounds Custom Styles Positioning Callbacks UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/popups",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Popups Create floating popups, menus, and tooltips using the power of Floating UI. TYPESCRIPT Copy import { popup } from '@skeletonlabs/skeleton'; import type { PopupSettings } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Floating UI Usage Params Classes Keyboard Demo Show Popup Installation Required To begin, install Floating UI from NPM. This is required for popups to function. TERMINAL Copy npm install @floating-ui/dom Import Floating UI into your application's root layout /src/routes/+layout.svelte. TYPESCRIPT Copy import { computePosition, autoUpdate, offset, shift, flip, arrow } from '@floating-ui/dom'; Import storePopup in your root layout, then pass an object containing the required Floating UI modules shown below. TYPESCRIPT Copy import { storePopup } from '@skeletonlabs/skeleton'; storePopup.set({ computePosition, autoUpdate, offset, shift, flip, arrow }); Events You can control how the popup is opened and closed by using the event setting. Click Tap the trigger element to open the popup, then outside to close it. Supports the closeQuery feature. Click Hover The popup shows only while hovering the trigger element. Great for creating tooltips. Be sure to disable pointer events for children (ex: icons) within your trigger element. These may cause the popup to flash or close early. We recommend applying \\\\\\[&>\\\\\\*\\\\\\]:pointer-events-none to your trigger element to resolve this. Hover Focus-Blur Shows the popup only while the trigger element has focus. Useful for showing tooltips while focusing an input. Focus-Click Show the popup on focus, closed when clicking outside. Useful for autocomplete popups. Supports the closeQuery feature. Settings In addition to event, let's explore what other popupSettings are available. Placement Defines which side of the trigger the popup will appear. This will automatically flip when near the edge of the screen. Show Popup top bottom left right Close Query Use the closeQuery setting to indicate what child elements within the popup can trigger the popup to close. By default this uses 'a\\\\\\[href\\\\\\], button' to denote anchors and buttons. You may provide a custom query or set '' to disable this feature. Show Popup State Callback Provide a callback function to be notified when a particular popup is opened or closed. Show Popup Middleware Use middleware to configure Floating UI middleware such as shift, offset, and more. Show Popup This includes support for the optional Floating UI middleware shown below. To use these, import the Floating UI modules and pass them to the storePopup in your root layout as shown below. Note that these may alter the default behavior of your popups. We recommend these only for advanced users. TYPESCRIPT Copy import { /\\\\\\* ... \\\\\\*/ size, autoPlacement, hide, inline } from '@floating-ui/dom'; TYPESCRIPT Copy storePopup.set({ /\\\\\\* ... \\\\\\*/ size, autoPlacement, hide, inline }); Handling Loops Popups maintain a 1-1 relationship between the trigger and the popup element. This means when using #each block to iterate and create a set of popups, you must provide a unique popup element and popup settings. Show A Show B Show C Combobox The goal of Skeleton is to combine primitive elements and components in order to generate more complex interfaces. For example, by combining a Button, Popup, and ListBox you can create a highly customizable combobox. Trigger Avoiding Style Conflicts Please use caution when adjusting the default styling for the \\\\\\[data-popup\\\\\\] element. Specifically in regards to the inherent display, position, and transition properties. These are critical for ensuring the popup loads and displays as expected. CSS Copy \\\\\\[data-popup\\\\\\] { /\\\\\\* Display \\\\\\*/ display: none; /\\\\\\* Position \\\\\\*/ position: absolute; top: 0; left: 0; /\\\\\\* Transitions \\\\\\*/ transition-property: opacity; transition-timing-function: cubic-bezier(.4,0,.2,1); transition-duration: .15s } Use a child element to introduce new classes and avoid overwriting default values. HTML Copy ... HTML Copy ... Z-Index Stacking Please note that neither Skeleton nor Floating-UI define a default z-index for popups. Accessibility Use click or focus events when targeting mobile. Touch screens do not fully support hover. On the Page Demo Installation Events Click Hover Focus-Blur Focus-Click Settings Placement Close Query State Callback Middleware Handling Loops Combobox Avoiding Style Conflicts Z-Index Stacking Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/modals",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Modals High priority dialogs and modals using a dynamic queue system. TYPESCRIPT Copy import { Modal, getModalStore } from '@skeletonlabs/skeleton'; import type { ModalSettings, ModalComponent, ModalStore } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Transitions Usage Props Classes Events Keyboard Demo Show Modal This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Modal Component Implement a single instance of the modal component in your app's root layout, above the App Shell (if present). HTML Copy Modal Store When you wish to trigger a modal, import the getModalStore function and invoke it to retrieve the modalStore, which is a Svelte store that acts as the modal queue. NOTE: To retrieve the store, getModalStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getModalStore } from '@skeletonlabs/skeleton'; const modalStore = getModalStore(); Trigger The title, body, and image are available to all modals. Alert Modal Queue Multiple Confirm Modal Prompt Modal Close Trigger the close() method to remove the first modal in the modal queue. TYPESCRIPT Copy modalStore.close(); Clear Trigger the clear() method to completely empty the modal queue. TYPESCRIPT Copy modalStore.clear(); Modal Settings Define settings per modal instance via the trigger() method. These are similar to modal properties, but do not provide the same breadth of options. Available Settings TYPESCRIPT Copy const modal: ModalSettings = { // Provide arbitrary classes to the backdrop and modal elements: backdropClasses: '!bg-green-500', modalClasses: '!bg-red-500', // Provide arbitrary metadata to your modal instance: meta: { foo: 'bar', fizz: 'buzz', fn: myCustomFunction } }; Modal Properties Define global settings for all modal instances. Tap the \"Props\" tab at the top of the page for a full list of options. Async Response You may await a modal response by wrapping it in a Javascript Promise, which resolves when the response is triggered. TYPESCRIPT Copy new Promise((resolve) => { const modal: ModalSettings = { type: 'confirm', title: 'Please Confirm', body: 'Are you sure you wish to proceed?', response: (r: boolean) => { resolve(r); } }; modalStore.trigger(modal); }).then((r: any) => { console.log('resolved response:', r); }); Component Modals Advanced Skeleton allows you to generate custom modals using Svelte components. Example Modals Form List Embed Image Choose a Method Registry (recommended) Direct This will create a set of reusable custom modals that are globally available to your application. Add the following to your your root layout in /src/routes/+layout.svelte. TYPESCRIPT Copy import ModalComponentOne from '/example/path/here'; import ModalComponentTwo from '/example/path/here'; const modalRegistry: Record = { // Set a unique modal ID, then pass the component reference modalComponentOne: { ref: ModalComponentOne }, modalComponentTwo: { ref: ModalComponentTwo }, // ... }; Provide the modalRegistry to the modal component, which also resides in your root layout. HTML Copy Then, when triggering a new component, set the value of component to the unique modal ID as registered above. TYPESCRIPT Copy const modal: ModalSettings = { type: 'component', component: 'modalComponentOne', }; modalStore.trigger(modal); Creating a Component Learn more about how to construct a custom modal component using the tips below. Accessing Modal Store Data When creating a custom component, make sure to import the modal store. This should occur before all following steps. TYPESCRIPT Copy import { getModalStore } from '@skeletonlabs/skeleton'; const modalStore = getModalStore(); Determining the Active Modal Template Conditional Inherit Modal Component Props Default Response Values Returning a Custom Response Value Passing Arbitrary Data Component Props and Slots Setting the Modal Width Closing a Modal Accessibility Skeleton does not provide a means to disable the backdrop's click to close feature, as this would be harmful to accessibility. View the ARIA APG guidelines to learn more about modal accessibility. On the Page Demo Prerequisites Initialize Stores Modal Component Modal Store Trigger Close Clear Modal Settings Modal Properties Async Response Component Modals Example Modals Choose a Method Creating a Component Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/local-storage-stores",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Local Storage Store An extended version of the Svelte writable store that includes pub/sub to local storage. TYPESCRIPT Copy import { localStorageStore } from '@skeletonlabs/skeleton'; Source Page Source Usage The first parameter storeExample is the local storage key name. The second parameter is the initial value of the store. TYPESCRIPT Copy import type { Writable } from 'svelte/store'; TYPESCRIPT Copy const storeExample: Writable = localStorageStore('storeExample', 'initialValueHere'); Operates as a standard Svelte writable store but with the added benefit of automatic persistence via Local Storage. TYPESCRIPT Copy import { get } from 'svelte/store'; // Subscribe to the store storeExample.subscribe(() => {}); // Update the value storeExample.update(() => {}); // Set the value storeExample.set(() => {}); // Read the value get(storeExample); // Read value with automatic subscription $storeExample Attribution Source code provided courtesy of Joshua Nussbaum. Please consider sponsoring his work. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/lightswitches",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Lightswitch Components and utilities to toggle Tailwind's dark mode. TYPESCRIPT Copy import { LightSwitch } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Events Keyboard Skeleton provides multiple methods for toggling light and dark mode within your application. We recommend you select one method and utilize that as your primary solution for your application. Lightswitch OS Preference Build Your Own For most users we recommend using the Lightswitch component. Please note this must be present on page load in order to operate. It is best suited within a fixed header element that's always visible on the page. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/drawers",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Drawers Displays an overlay panel that attaches to any side of the screen. TYPESCRIPT Copy import { Drawer, getDrawerStore } from '@skeletonlabs/skeleton'; import type { DrawerSettings, DrawerStore } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Select a drawer example to preview. This feature uses the Singleton pattern, meaning you should aim to implement a single instance of the component per project, but it will remain globally scoped and reusable via a Svelte writable store. Do not reimplement this component for each route page. Prerequisites Initialize Stores Implement the following in the root layout of your application. This is required only once when implementing Skeleton's Drawer, Modal, and Toast stores and will prevent known issues with SvelteKit SSR. TYPESCRIPT Copy import { initializeStores } from '@skeletonlabs/skeleton'; initializeStores(); Drawer Component Implement a single instance of the drawer component in your app's root layout, above the App Shell (if present). HTML Copy Drawer Store Provides an interface to control the drawer component. NOTE: To retrieve the store, getDrawerStore must be invoked at the top level of your component! TYPESCRIPT Copy import { getDrawerStore } from \"@skeletonlabs/skeleton\"; const drawerStore = getDrawerStore(); Open TYPESCRIPT Copy drawerStore.open(); Close TYPESCRIPT Copy drawerStore.close(); Passing Metadata To pass arbitrary metadata, create a meta object within DrawerSettings. Then use $drawerStore.meta to retrieve this. Metadata Example Styling For global styles, apply changes via props directly to the Drawer component. However, you may also override styles per drawer instance via the DrawerSettings. Styled Drawer Handling Contents Create a new DrawerSettings object, supply a unique id, then pass these settings on drawerStore.open(). TYPESCRIPT Copy const settings: DrawerSettings = { id: 'example-1' }; drawerStore.open(settings); Within the default slot of your Drawer component, setup conditional statements based on the value of $drawerStore.id. HTML Copy {#if $drawerStore.id === 'example-1'} {:else if $drawerStore.id === 'example-2'} {:else} {/if} Background Animation Advanced To animate the contents behind your drawer while it's open, first create a reactive property based on the state of the Drawer. Then implement a Tailwind translate class when the drawer is open. TYPESCRIPT Copy $: positionClasses = $drawerStore.open ? 'translate-x-\\\\\\[50%\\\\\\]' : ''; Then apply this value to the proper wrapping page element, such as the App Shell or a main element. HTML Copy ... HTML Copy ... For best results, be sure to take into account the Drawer position as well via $drawerStore.position. Accessibility Skeleton does not provide a means to disable the backdrop's click to close feature, as this would be harmful to accessibility. View the ARIA APG guidelines to learn more about modal accessibility. On the Page Demo Prerequisites Initialize Stores Drawer Component Drawer Store Open Close Passing Metadata Styling Handling Contents Background Animation Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/tables",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Tables Utilize a data-driven model to create simple presentational tables. TYPESCRIPT Copy import { Table } from '@skeletonlabs/skeleton'; import type { TableSource } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Events Keyboard Demo Symbol Name Weight H Hydrogen 1.0079 He Helium 4.0026 Li Lithium 6.941 Be Beryllium 9.0122 B Boron 10.811 Total Elements 5 Elements Try viewing your console log when tapping a row. Interactive Mode Use the interactive to make the table interactive. When a row is clicked, on:selected will pass the row's meta value. HTML Copy Table Utilities The following utility methods allow you to format your source data for use within a Table component. Mapper Values Source Mapper Source Values TYPESCRIPT Copy import { tableMapperValues } from '@skeletonlabs/skeleton'; Combines Source Mapper and Source Values methods to handle both operations at once. This allows you to use the same source object, but format differently between display (body) and selected response (meta). It's recommended to use this in most use cases. TYPESCRIPT Copy tableMapperValues(sourceData, \\\\\\['name', 'symbol', 'weight'\\\\\\]) // \\\\\\[ // \\\\\\['Hydrogen', 'H', '1.0079'\\\\\\], // \\\\\\['Helium', 'He', '4.0026'\\\\\\], // ... // \\\\\\] Auth. Built for Devs, by Devs. Use our APIs & SDKs for all your authentication needs. Start free. ADS VIA CARBON On the Page Demo Interactive Mode Table Utilities UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/tabs",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Tabs Use tabs to quickly switch between different views and pages. TYPESCRIPT Copy import { TabGroup, Tab, TabAnchor } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Demo Books Movies Television A written or printed work consisting of pages glued or sewn together along one side and bound in covers. We offer two types of Tab components, but recommend you avoiding mixing these to ensure a consistent user experience. Tab See the featured example above for reference. Maintains an active selection state, which is ideal for quickly switching panel content available directly on the page. Please note that using the panel slot is optional, but recommended. TabAnchor Operate as anchor tags, supporting all common attributes. These are recommended for tabbing between route pages. Please avoid using target=\"\\\\\\_blank\" as this would be harmful to the expected user experience. Home Documentation Blog Justify Use the justify property to adjust tab positions. Books Movies Television Navigation Tabs make a great choice for bottom navigation bars for a responsive App Rail alternative. Use Anchor Tabs and customize the styling as desired. Books Movies Television Simulated route: /books Using Svelte Stores For the standard Tab component, you may optionally choose to use Svelte writable stores to manage the tab state. Note the use of the $ sign within the bind:group property. Pair this with Skeleton's Local Storage Store for automatic persistence. TYPESCRIPT Copy import { writable, type Writable } from 'svelte/store'; const tabSet: Writable = writable(0); TYPESCRIPT Copy (label) Fast implementation, a customizable login experience, and flexible user journeys. Try Auth0 for free ADS VIA CARBON On the Page Demo Tab TabAnchor Justify Navigation Using Svelte Stores UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/steppers",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Steppers Divide and present content in sequenced steps. TYPESCRIPT Copy import { Stepper, Step } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Slots Events Demo Step 1 2 3 4 5 Get Started! This example Stepper will teach you how to use this component. Tap next to proceed to the next step. ← Back Next → Create a set of Steps within the Stepper, then use the on:complete event to detect when all steps are complete. Since horizontal space may be limited on small screens, we recommend no more than five steps at max. Event Handlers Complete Event TYPESCRIPT Copy function onCompleteHandler(e: Event): void { console.log('event:complete', e); } HTML Copy ... Next, Step and Previous Events are fired when the next or previous steps are pressed, step fires for both cases. TYPESCRIPT Copy function onStepHandler(e: {detail: {state: {current: number, total: number}, step: number}}): void { console.log('event:step', e); } HTML Copy ... TIP: e.detail.state.current contains the step shown to the user after navigation, e.detail.step contains the step where navigation occurred. Locked State Each Step can have a locked property set, when set to TRUE this locks progression for that step. For example, you can lock a step until a form within it becomes valid. TYPESCRIPT Copy let lockedState: boolean = true; HTML Copy ... Step Term Use the stepTerm property to override text shown in the animated section at the top of the Stepper, which is useful if you need i18n support for other languages. HTML Copy ... ... This can be overwritten per each Step as well, which updates the default and header slot placeholder text. Navigation Slot You may override the contents of the disabled Back button in the first step by supplying a navigation slot. Use this to supply a message or implement a custom action. This is not supported for step two and forward. HTML Copy(content) Abort Loved by developers. Trusted by enterprises. Start your free 30 day trial. ADS VIA CARBON On the Page Demo Event Handlers Complete Event Next, Step and Previous Locked State Step Term Navigation Slot UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/slide-toggles",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Slide Toggles A sliding toggle element that can capture input from a user. TYPESCRIPT Copy import { SlideToggle } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Demo This component provides an alternative UI for a checkbox input element. Labeled Powered Off Customized Slide toggles styles and colors can be easily customized with the active and size properties. Checkbox Attributes This component supports Svelte's $$restProps, which allows for required, disabled, and any other valid checkbox input attributes. HTML Copy On the Page Demo Labeled Customized Checkbox Attributes UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/range-sliders",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Range Sliders Capture input from a range of values, including optional ticks. TYPESCRIPT Copy import { RangeSlider } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Combines a native range input with datalist ticks to create a powerful range slider element. Labeled Label 15 / 25 Browser Support Please be aware that browser support varies. Safari (macOS/iOS) does not visually display the ticks. However, the ticks are progressive enhancement feature, and Safari it will honor the max and step settings in relation to the value. Chrome Full Edge Full Safari Partial Firefox Full Revolutionize Web Dev with free O'Reilly Report: Master Decoupling & Composable Architectures! ADS VIA CARBON On the Page Demo Labeled Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/radio-groups",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Radio Groups Capture feedback limited to a small set of options. TYPESCRIPT Copy import { RadioGroup, RadioItem } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo selected: 0 This component acts as a wrapper around native HTML radio inputs. Bind the group, then set value and name as follows. Variants The radio group supports variant styles for active and hover properties. Months Years Vertical Set flexDirection=\"flex-col\" to utilize a vertical layout. Millennia Epochs Eras Eons Full Width Set display to flex to stretch and fill the full width. HTML Copy ... Radio Attributes The Radio Item component supports Svelte's $$restProps, which allows for required, disabled, and any other valid radio input attributes. Please note these settings are applied per item. HTML Copy On the Page Demo Variants Vertical Full Width Radio Attributes UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/progress-radials",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Progress Radials Displays a radial indicator showing the progress or completion of a task. TYPESCRIPT Copy import { ProgressRadial } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Demo 50% Styling Use the meter, or track, stroke, strokeLinecap properties to style the radial. Primary Secondary Tertiary Success Warning Error butt round square Indeterminate Remove the value property or set to undefined. Accessibility This component is treated as an ARIA meter. Personalize marketing at scale with 10+ Built-in AI Models ADS VIA CARBON On the Page Demo Styling Indeterminate Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/ratings",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Ratings Create an visual representation of a numeric range. TYPESCRIPT Copy import { Ratings } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Max 3 Max 5 Max 10 Perfect for creating a stars ratings for movies or ecommerce ratings. Supply any type of image, text, or icon for the empty, half, and full slots. Then adjust the value and max properties as desired. Note that SVG icons displayed verbatim, so you may need to adjust the fill color and responsive sizing. Binding User Interactivity Use the interactive prop and on:icon events to add interactivity. Emoji 💀 💀 💀 ☠️ ⚪ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/progress-bars",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Progress Bars An indicator showing the progress or completion of a task. TYPESCRIPT Copy import { ProgressBar } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Demo Indeterminate Mode Remove the value property or set value to undefined. Custom Animation Use the animIndeterminate prop to pass a custom CSS animation for the progress bar meter. Native Alternative The native progress element works cross browser, but does not currently support Indeterminate mode when styled. Accessibility This component is treated as an ARIA progressbar. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/paginators",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Paginators Navigate between multiple pages of content. TYPESCRIPT Copy import { Paginator } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Events Demo Name Symbol Atomic Number V Vanadium 23 Ne Neon 10 Pb Lead 82 1 Items 2 Items 3 Items 5 Items 27 Items 1-3  of 27 First & Last Previous & Next Numeric Row Use showNumerals to replace the text information with a row of buttons that allow you to quickly navigate pages. We recommend a small maxNumerals amount if you plan to support mobile devices with limited screen real estate. Name Symbol Atomic Number V Vanadium 23 Ne Neon 10 Pb Lead 82 1 Items 2 Items 3 Items 5 Items 27 Items 1 2 3 4 ... 9 Client-Side Pagination Once your paginator component is setup you'll need to subdivide your local source content. This can be accomplished using Svelte's reactive properties paired with the JavaScript slice method. TYPESCRIPT Copy $: paginatedSource = source.slice( paginationSettings.page \\\\\\* paginationSettings.limit, paginationSettings.page \\\\\\* paginationSettings.limit + paginationSettings.limit ); HTML Copy {#each paginatedSource as row}\\* {row} {/each} Or combine with the Table component. TYPESCRIPT Copy let tableHeaders: string\\\\\\[\\\\\\] = \\\\\\['Positions', 'Name', 'Weight', 'Symbol'\\\\\\]; HTML Copy Server-Side Pagination Use the page and amount events to notify your server of pagination updates. TYPESCRIPT Copy function onPageChange(e: CustomEvent): void { console.log('event:page', e.detail); } function onAmountChange(e: CustomEvent): void { console.log('event:amount', e.detail); } HTML Copy Handling Reactivity Use the following technique if you wish to update pagination data in a reactive manner. Make sure to update paginationSettings directly, as updating a reference to source will not trigger the reactivity. TYPESCRIPT Copy let paginationSettings = { page: 0, limit: 5, size: source.length, amounts: \\\\\\[1, 2, 5, 10\\\\\\], } satisfies PaginationSettings; $: paginationSettings.size = source.length; See Also Utilize a data-driven model to create simple presentational tables. Table Component → UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/listboxes",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Listboxes Interactive listboxes that maintain selection state. TYPESCRIPT Copy import { ListBox, ListBoxItem } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Events Keyboard Demo Books Movies Television Selected: books By default the listbox uses a native radio inputs to ensure only one item is selected at a time. Multiple Selection By adding the multiple property, the component uses native checkbox inputs, which allows for multi-select. Books Movies Television Selected: books,movies Lead and Trail Slots Each Listbox item supports a lead and trail slot, which can be useful for icons or actions. HTML Copy (icon) (label) (icon) Native Alternatives Consider using the native Select element with either the size or multiple attributes set to support single or multiple selection respectively. However, please be aware that Safari (macOS) does not support all styles. Option 1 Option 2 Option 3 Option 4 Option 5 UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/input-chips",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Input Chips Allows input of multiple values. TYPESCRIPT Copy import { InputChip } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Events Demo foo bar fizz buzz foo ✕ bar ✕ fizz ✕ buzz ✕ foo, bar, fizz, buzz Bind an array of data to the component value property. Only string values are supported at this time. Whitelist Values You can provide an array of strings to use as a whitelist. Only whitelisted items can be entered. Invalid or duplicate values will show an error state. vanilla chocolate strawberry vanilla ✕ chocolate ✕ strawberry ✕ vanilla, chocolate, strawberry Custom Validation You can optionally provide a function to provide custom validation. Make sure to accept a string value and return a boolean. john@email.com jane@email.com sally@email.com john@email.com ✕ jane@email.com ✕ sally@email.com ✕ john@email.com, jane@email.com, sally@email.com Invalid Hook You may utilize an onInvalid function that executes when the input becomes invalid. rock r&b pop rock ✕ r&b ✕ pop ✕ rock, r&b, pop Additional Settings Use the max property to define a maximum number of chips allowed. HTML Copy Use the minlength and maxlength properties to set the minimum/maximum number of input characters respectively. HTML Copy By default, only a single instance of each value is allowed. If you wish to allow duplicates, set allowDuplicates. HTML Copy By default, all values are trimmed and formatted lowercase. If you wish to allow uppercase, set allowUpperCase. HTML Copy See Also Interactive chip element styles for actions, selection, or filtering. Chip Elements → On the Page Demo Whitelist Values Custom Validation Invalid Hook Additional Settings See Also UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/file-buttons",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component File Buttons Allows you to select files with a single click. TYPESCRIPT Copy import { FileButton } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Select a File Monitor your browser's console when adding files. Uses FileList to bind data to an input\\\\\\[type='file'\\\\\\]. Accepts all attributes, including: multiple, accept, and required. Variant Style Use the button property to provide classes for the button, such as variant styles. Upload Usage with Button Groups Button Groups expect the child button elements to be native button elements without styles. Update Delete Upload Download Binding Method Use a FileList to bind the file data. TYPESCRIPT Copy let files: FileList; HTML Copy On Change Event Use the on:change event to monitor file selection or changes. TYPESCRIPT Copy function onChangeHandler(e: Event): void { console.log('file data:', e); } HTML Copy Upload Go passwordless on your app with Descope's no-code workflows. Passkeys, magic links, SSO & more. ADS VIA CARBON On the Page Demo Variant Style Usage with Button Groups Binding Method On Change Event UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/file-dropzone",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component File Dropzone Allow upload of files with drag and drop. TYPESCRIPT Copy import { FileDropzone } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Upload a file or drag and drop Monitor your browser's console when adding files. Uses input\\\\\\[type='file'\\\\\\] and allows for all native input features and accessibility. Including multiple, accept, and required. Customization Customize the component with the available icon, message, and meta slots. Upload a file or drag and drop PNG, JPG, and GIF allowed. Binding Method Use a FileList to bind the file data. TYPESCRIPT Copy let files: FileList; HTML Copy On Change Event Use the on:change event to monitor file selection or changes. TYPESCRIPT Copy function onChangeHandler(e: Event): void { console.log('file data:', e); } HTML Copy Upload On the Page Demo Customization Binding Method On Change Event UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/avatars",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Avatars Display user avatars with an image or initials. TYPESCRIPT Copy import { Avatar } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Events Demo rounded-full Using Initials Display up to two text characters. (ex: Jane Doe would be JD) JD Interactive Border Apply the following styles using the border and cursor properties. AB Handling Fallbacks Use the fallback property to specify a fallback when images fail to load, or supply the user's initials. AB Fallback Image Fallback Initials Applying Filters See Filters to learn how to import and configure the filters action and SVG filter components. TYPESCRIPT Copy import { filter, Apollo } from '@skeletonlabs/skeleton'; #Apollo #BlueNight #Emerald #GreenFall #Noir #NoirLight #Rustic #Summer84 #XPro Sell products, services, content and more with Squarespace. ADS VIA CARBON On the Page Demo Using Initials Interactive Border Handling Fallbacks Applying Filters UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/conic-gradients",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Conic Gradients Create conic gradient data visualizations for pie charts, loading spinners, and more. TYPESCRIPT Copy import { ConicGradient } from '@skeletonlabs/skeleton'; import type { ConicStop } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Provide one or more color stops that start with values that range from 0% to 100%. A stop of 0% starts at the top middle, then additional values are added in a clock-wise direction. Theme Colors Tailwind Colors Custom Colors Provide a theme color CSS custom property var(--color-primary-500) wrapped in rgb(). TYPESCRIPT Copy const conicStops: ConicStop\\\\\\[\\\\\\] = \\\\\\[ { label: 'Primary', color: 'rgb(var(--color-primary-500))', start: 0, end: 33 }, { label: 'Secondary', color: 'rgb(var(--color-secondary-500))', start: 33, end: 66 }, { label: 'Tertiary', color: 'rgb(var(--color-tertiary-500))', start: 66, end: 100 } \\\\\\]; This data can be reactive, but be sure to adhere to standard Svelte requirements when updating arrays. Legend By enabling the legend property, a small table of values will appear below the conic gradient. Heat Map Orange 10% Yellow 25% Red 65% Animated Spinner Add the spin property to implement a spinning animation automatically. Try pairing with a smooth gradient by providing gaps between when a color stop ends and when the next begins. This will automatically blend. Loading Rotate Axis Use the Tailwind rotate utility classes with the regionCone property to change the starting axis position. HTML Copy Revolutionize Web Dev with free O'Reilly Report: Master Decoupling & Composable Architectures! ADS VIA CARBON On the Page Demo Legend Animated Spinner Rotate Axis UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/autocomplete",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Autocomplete Displays a list of suggested options. TYPESCRIPT Copy import { Autocomplete } from '@skeletonlabs/skeleton'; import type { AutocompleteOption } from '@skeletonlabs/skeleton'; Source Page Source Transitions Usage Props Events Keyboard Demo Vanilla Chocolate Strawberry Neapolitan Pineapple Peach The Autocomplete component does not contain it's own input by default. Instead, by using input binding paired with an on:selection event, you may utilize this component alongside any type of input that takes in suggested values. Data Structure You may optionally append keywords to provide additional search terms. As well as meta to provide arbitrary data - which is not utilizing for filtering. All data option data is returned by on:selection, including these. TYPESCRIPT Copy const flavorOptions: AutocompleteOption\\\\\\[\\\\\\] = \\\\\\[ { ..., keywords: 'mix, strawberry, chocolate, vanilla' }, { ..., meta: { healthy: false } }, \\\\\\]; Allowed Options Provide a list of values you wish to allow. Only options with a matching value will be displayed. Neapolitan Pineapple Peach Allowed \\\\\\[neapolitan, pineapple, peach\\\\\\] Denied Options Provide a list of values you wish to deny. Denied options will be excluded from the list. Strawberry Neapolitan Pineapple Peach Denied \\\\\\[vanilla, chocolate\\\\\\] Custom Filter Provide a custom filter function using the prop filter. Vanilla Chocolate Strawberry Neapolitan Pineapple Peach Input Chip We've provided a demo of using Autocomplete alongside a Skeleton Input Chip component below. vanilla chocolate vanilla ✕ chocolate ✕ Strawberry Neapolitan Pineapple Peach Popup We've provide a demo of using Autocomplete alongside a Skeleton popup utility below. Browser Support For Firefox, when wrapping the Autocomplete component in an parent element that uses overflow styling, make sure you add tabindex=\"-1\". By doing this, it will ensure that tab navigation selects the children within, instead of the wrapping element itself. On the Page Demo Data Structure Allowed Options Denied Options Custom Filter Input Chip Popup Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-shell",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Shell Responsive shell for controlling application layout. TYPESCRIPT Copy import { AppShell } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo The shaded regions represent the portion of the page that scrolls vertically. header sidebarLeft pageFooter header sidebarLeft sidebarRight pageHeader pageFooter footer Implement the App Shell in your app's root layout in /src/routes/+layout.svelte. Slot order does not matter. Prerequisites Required The App Shell will need to expand to fill all available space within your app's body tag. Open /src/app.html and add the following classes. This wrapping element is required and the style of display: contents should remain. HTML Copy %sveltekit.body% Then update your global stylesheet with the following. This will disable overflow for html and body tags to prevent duplicate scroll bars. CSS Copy html, body { @apply h-full overflow-hidden; } Using an App Bar If you wish for your App Bar component to remain fixed at the top of the page, embed it into the top-most header slot. HTML Copy Skeleton If you wish for your App Bar to scroll with the page, insert it into the pageHeader slot. HTML Copy Skeleton If you wish to have a sticky pageHeader, apply the following App Shell prop styles. HTML Copy ... Responsive Sidebars Sidebars have a default width of auto. This means they will automatically collapse when their contents are empty or hidden. Use this to remove the sidebar with CSS media queries via Tailwind's responsive breakpoints. HTML Copy Sidebar Consider hiding your sidebar for smaller screens and replace it with a Drawer. View Tutorial Scroll to Top on Navigation If you wish to have the App Shell page region auto-scroll to the top when navigating, add the following to your root layout in /src/routes/+layout.svelte. TYPESCRIPT Copy import type { AfterNavigate } from '@sveltejs/kit'; import { afterNavigate } from '$app/navigation'; afterNavigate((params: AfterNavigate) => { const isNewPage = params.from?.url.pathname !== params.to?.url.pathname; const elemPage = document.querySelector('#page'); if (isNewPage && elemPage !== null) { elemPage.scrollTop = 0; } }); Tracking Scroll Position Use the on:scroll event to detect when the page region is scrolled vertically. TYPESCRIPT Copy import type { ComponentEvents } from 'svelte'; function scrollHandler(event: ComponentEvents\\\\\\['scroll'\\\\\\]) { console.log(event.currentTarget.scrollTop); } HTML Copy Scrollbar Gutter Use the scrollbar gutter property to adjust how the page region scrollbar gutters are handled. View a quick demo video. TYPESCRIPT Copy ... Accessibility Please be aware that the App Shell does not support window scoped scrolling. This may affect certain features, such as pull-to-refresh on mobile. In order to scroll the page region you first need to focus the page with either a touch or click. If you require window scoped scrolling we recommend you implement a custom layout in place of the App Shell. On the Page Demo Prerequisites Using an App Bar Responsive Sidebars Scroll to Top on Navigation Tracking Scroll Position Scrollbar Gutter Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-bar",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Bar A header element for the top of your page layout. Pairs well with the App Shell. TYPESCRIPT Copy import { AppBar } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Usage Props Slots Demo Headline App Bars can be generated with a number of different configurations by mixing and matching available slots and props. Single Row and Title Title Barebones Title Using Grid Layout The main row utilizes a grid-based layout. Utilize Tailwind's grid column utility classes to control column width. Then use place settings to adjust the placement of the slot contents. Title The example above provides an even three column layout with the title centered and actions right-aligned. On the Page Demo Single Row and Title Barebones Using Grid Layout UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/app-rail",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component App Rail A side navigation rail component TYPESCRIPT Copy import { AppRail, AppRailTile, AppRailAnchor } from '@skeletonlabs/skeleton'; Source Page Source Usage Props Slots Events Demo Tile 1 Tile 2 Tile 3 Tile Value: 0 Tiles We offer two types of tiles below. Consider mixing and matching these as needed. AppRailTile These tiles are intended to maintain state using an embedded checkbox input. Use these within forms or to query submenus, similar to the Skeleton documentation sidebar. Tile AppRailAnchor These tiles operate as anchor tags, supporting href, target, rel, and more. Use these when you wish to link to a new page when this tile is clicked. Anchor Page State Using the SvelteKit page store, you can dynamically highlight the active link based on it's path. TYPESCRIPT Copy import { page } from '$app/stores'; HTML Copy (icon) (icon) Horizontal Orientation The App Rail is intended for vertical orientations only. For mobile interfaces, considering using a navigation tab component. Get 50% off Slack Pro. Slack helps you stay organized, save time & get more done. ADS VIA CARBON On the Page Demo Tiles AppRailTile AppRailAnchor Page State Horizontal Orientation UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/actions/filters",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Action Filters Apply Instagram-like filter effects to images. TYPESCRIPT Copy import { filter } from '@skeletonlabs/skeleton'; Source Page Source Usage Params Demo Original Emerald BlueNight XPro Summer84 Rustic Apollo GreenFall Noir NoirLight 1 2 3 Add each filter you plan to use within the scope of your filtered elements. To use globally throughout your application, add this to your application's root layout. Avoid importing filters you are not using. Applying a Filter Use either of the two methods below to apply your desired filter. The hash mark is required. Via Action Via Attribute Use the following Svelte action to filter any element. Pass the filter name as the only parameter. TYPESCRIPT Copy import { filter } from '@skeletonlabs/skeleton'; HTML Copy !\\[\\]({myImageSrc}) How It Works This feature is enabled by the use of native browser SVG filters via feColorMatrix transformations. Create a Custom Filter Use this tool by Rik Schennink to easily generate your own custom filters. Create a Filter Browser Support Please be aware that SVG filters have limited support in Safari. Chrome Full Edge Full Firefox Full Safari Partial On the Page Demo Applying a Filter How It Works Create a Custom Filter Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/components/accordions",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Component Accordions Divide content into collapsible sections. TYPESCRIPT Copy import { Accordion, AccordionItem } from '@skeletonlabs/skeleton'; Source Page Source WAI-ARIA Transitions Usage Props Slots Events Keyboard Demo What is Día de los Muertos? While Halloween and Day of the Dead occur nearly in tandem and share similar customs (candy, face painting, and community gathering), the two are not related. Halloween has ancient Celtic roots, while Day of the Dead has its own origins that date back to the Indigenous people of Mexico and Central America. When did it begin? When is it celebrated? What are ofrendas? Information Source Auto-Collapse Mode Enable the autocollapse setting to limit display to one accordion panel at a time. What is Día de los Muertos? While Halloween and Day of the Dead occur nearly in tandem and share similar customs (candy, face painting, and community gathering), the two are not related. Halloween has ancient Celtic roots, while Day of the Dead has its own origins that date back to the Indigenous people of Mexico and Central America. When did it begin? Open on Load Set the visible items on load with open. When using autocollapse mode, this is limited to a single item. HTML Copy ... Custom Icons Set the iconOpen and iconClosed slots within the Accordion Item component. Default: Caret Custom: Plus and Minus Custom: Smiley and Surprise On the Page Demo Auto-Collapse Mode Open on Load Custom Icons UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/actions/focus-trap",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Action Focus Trap Allows you to contain tab focus within a target element on-demand. TYPESCRIPT Copy import { focusTrap } from '@skeletonlabs/skeleton'; Source Page Source Usage Params Demo Name Email Submit Form Enable Focus Trap Apply use:focusTrapand then set the action value to either true or false to enable or disable focus. Navigation When enabled this action will auto-select the first focusable element. Press Tab or Shift + Tab to cycle through focusable elements within the target region. When the last item is focused, it will loop to the start, and vice versa. Focusing Overlays Skeleton automatically enables this action for overlays such as modals and drawers to aid accessibility. On the Page Demo Navigation Focusing Overlays UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.1.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-1-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, March 28, 2023 4 min read Skeleton v1.1.0 Chris Simmons @SkeletonUI News The Skeleton v1.0 was a great success, thank you everyone for your kind words and joining us for this. This of course included two live stream events covering what Skeleton is, how to get started, and some advanced tips and tricks. If you missed it, check out the playlist, now with interactive chapter timestamps to jump straight to the topics you're interested in: https://www.youtube.com/playlist?list=PLJtgPDPrJYAuDISpNrarLCjVInKknDCcA Release Notes https://github.com/skeletonlabs/skeleton/releases/tag/1.1.0 As promised during our launch event, today's release contains primarily triage and bug fixes. However we've also implemented the new autocomplete component, made changes to preset theme fonts to ensure they are GDPR compliant, as well as some minor improvements to several features. See the full notes below. 💬 New autocomplete component ✅ Improved themes docs + GDPR compliance 🆕 Minor feature updates 🐞 Various bug fixes New Component: Autocomplete https://github.com/skeletonlabs/skeleton/pull/1206 Docs: https://www.skeleton.dev/components/autocomplete We've finally introduced the long desired autocomplete component! We've taken our time because we wanted to make it as flexible and useful as possible. As such, this can directly interface with nearly any type of suggested input you might want, including direct support for the Input Chip component. It supports whitelists, blacklists, and even keywords for fuzzy search. Plus it pairs directly with the Popup utility. We think you're going to love it! Themes Doc + GDPR Compliance https://github.com/skeletonlabs/skeleton/issues/1161 View the new Theme docs page: https://www.skeleton.dev/docs/themes If you're using preset themes you'll note that custom fonts will initially be lost when upgrading to v1.1.0. It was brought to our attention that embedding Google Fonts within our themes poses a risk to GDPR compliance. Given this, we've made a few notable changes: Fonts are no longer imported directly within each preset Skeleton theme. You must import them in your project. For GDPR compliance (and better performance) we recommend locally installing and importing fonts. Finally, we've introduced a new Docs > Themes section which covers a number of ways to customize your themes, including detailed instruction for local or remote imports of custom fonts! Additionally the new Themes page can be tailored to your specific theme and all instruction will be update accordingly. This details each font to download, then how and where to install and import them. Warning Please be aware we have a pending update to the CLI that will handle the fonts on install. In the meantime new CLI projects will be missing their custom fonts. You can, however, handle this manually following these instructions. Popup Focus Event https://github.com/skeletonlabs/skeleton/pull/1174 The popup utility now supports two new event types: focus and focus-click. The former allows a popup to appear when you focus an element, such as an input, then close when you click outside this element. While the latter works the same, except clicking the trigger element repeatedly will toggle the popup. This is the recommended event type to use alongside the new Autocomplete component as it keeps the focus on the input for search, rather than jumping into the focusable elements within the popup. Minor Improvements The Avatar component now supports $$restProps for implementing arbitrary image tag attributes: https://github.com/skeletonlabs/skeleton/issues/1185 Bugfixes Fixed an issue prevent File Dropzone binding: https://github.com/skeletonlabs/skeleton/issues/1021 The complete button in the Stepper now handles the locked state: https://github.com/skeletonlabs/skeleton/issues/1164 Removed a redundant space class from the App Bar default styles: https://github.com/skeletonlabs/skeleton/issues/1171 Resolved a bug that prevents the Popup action from reflecting live updates: https://github.com/skeletonlabs/skeleton/issues/1186 Resolved a bug where the Prompt modal was not capturing form submission properly: https://github.com/skeletonlabs/skeleton/issues/1193 Fixed a bug where the AppRailTile on:click event would trigger twice: https://github.com/skeletonlabs/skeleton/issues/1195 Documentation Adjusted permalinks and table of contents: https://github.com/skeletonlabs/skeleton/pull/1144 Documented how to pin to manually pin to dark mode: https://github.com/skeletonlabs/skeleton/issues/1146 Fixed an animation issue with the new documentation preview component: https://github.com/skeletonlabs/skeleton/issues/1148 Updated Prettier config to aid contributors: https://github.com/skeletonlabs/skeleton/pull/1162 A direct link to the Skeleton YouTube channel is now in the page footer: https://github.com/skeletonlabs/skeleton/pull/1169 Fix several code snippets on the Toast documentation: https://github.com/skeletonlabs/skeleton/issues/1172 Documented the use case for z-index within the Popup utility docs: https://github.com/skeletonlabs/skeleton/pull/1182 Improved documentation per the Stepper's stepTerm property: https://github.com/skeletonlabs/skeleton/pull/1203 Resolved a number of typos: https://github.com/skeletonlabs/skeleton/issues/1134 https://github.com/skeletonlabs/skeleton/issues/1140 https://github.com/skeletonlabs/skeleton/pull/1155 https://github.com/skeletonlabs/skeleton/pull/1198 https://github.com/skeletonlabs/skeleton/pull/1199 https://github.com/skeletonlabs/skeleton/pull/1208 https://github.com/skeletonlabs/skeleton/issues/1207 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.2.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-2-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Wednesday, April 12, 2023 4 min read Skeleton v1.2.0 Chris Simmons @SkeletonUI Premium Support and Services Alongside today's new release, we're thrilled to announce that Skeleton Labs is now providing premium support and services for your Skeleton projects. This includes professional consulting, contracting, and technical support via core team members such as Chris Simmons, the creator and core maintainer of Skeleton. Check the links below for more information. https://github.com/skeletonlabs/skeleton/discussions/1315 Visit our website at https://www.skeletonlabs.co/ Release Notes https://github.com/skeletonlabs/skeleton/releases/tag/1.2.0 Summary: 🌬️ Support for Tailwind v3.3 🐞 Bugfixes and minor improvements Support for Tailwind v3.3 In case you missed it, Tailwind recently dropped a a new update with a number of improvements. It will take a while for Skeleton to adopt all the new features, However, we wanted to let you know we've vetted the update and you're welcome to update at your own discretion. Note that new CLI projects will now use v3.3.x (or higher) by default. When updating to v3.3, please follow our recommendations: Keep your tailwind.config.cjs as is. While .esm and .ts support has been added, we're investigating support for these. You may utilize the new 950 shade of any Tailwind-provided color, however, Skeleton does not yet support this for theme colors (ex: primary, secondary, etc). We'll need to update our preset themes, theme generator, design tokens, and provide a migration path for your custom themes. Look for more details on this soon. If you're using the official Tailwind Line Clamp plugin, this may now be removed. These features are now built-in. Note the CLI will no longer prompt you to install this plugin. If you would like to view our progress towards implementing the additional Tailwind updates, you can monitor it here: https://github.com/skeletonlabs/skeleton/issues/1238 Inclusive Prop Terms for Autocomplete https://github.com/skeletonlabs/skeleton/issues/1276 We realize some folks will have opinions on this, but this is a change that was suggested by the community and we feel meets Skeleton's overall goal of building an inclusive community. It aligns with our Code of Conduct. However, this does come with the cost of a minor breaking change. This includes changes to the names of two properties: blacklist - now called denylist whitelist - now called allowlist This would typically constitute a major release for semantic versioning, however after internal review we've decided the fact that autocomplete is so new, paired with the relatively small scope of the change, that we'll limit this to a minor point change. Note that this will be the exception to the rule and not common practice. But please do take care to update your applications. Minor Updates New test cases added for the autocomplete component: https://github.com/skeletonlabs/skeleton/pull/1204 List styles now enable text wrapping by default: https://github.com/skeletonlabs/skeleton/issues/1211 Additional region props have been added to the Table component: https://github.com/skeletonlabs/skeleton/issues/1255 Bugfixes Resolved a11y warnings for ListBox, RadioGroups, and Tabs: https://github.com/skeletonlabs/skeleton/pull/1280 Modal response values now provide undefined when tapping the backdrop: https://github.com/skeletonlabs/skeleton/issues/1118 Fixed a bug where the on:backdrop event would fire when tapping the modal window: https://github.com/skeletonlabs/skeleton/issues/1240 Fixed an issue preventing popup closeQuery from working as expected: https://github.com/skeletonlabs/skeleton/issues/1229 Resolved toast timeouts affecting queued toasts: https://github.com/skeletonlabs/skeleton/issues/1197 Fixed input chip bug preventing duplicate entries option from working as expected: https://github.com/skeletonlabs/skeleton/issues/1224 Resolved a style issue preventing icon buttons from working with unsized SVG icons: https://github.com/skeletonlabs/skeleton/issues/1184 Fixed issue with component modals rendering undefined for default slot: https://github.com/skeletonlabs/skeleton/issues/1251 Fixed an issue preventing negative number values for the Range Slider: https://github.com/skeletonlabs/skeleton/issues/1260 Resolved an issue for AppRailTiles not supporting zero-based values: https://github.com/skeletonlabs/skeleton/issues/1253 Removed inherit padding for the ListboxItem, allowing the prop to work better: https://github.com/skeletonlabs/skeleton/issues/1254 Avatar initials are now centered: https://github.com/skeletonlabs/skeleton/pull/1268 Resolved the querySelectorAll error for Popups: https://github.com/skeletonlabs/skeleton/issues/1264 Improved the CSS selector for styling the webkit date/time calendar icon: https://github.com/skeletonlabs/skeleton/issues/1275 Resolved a number of minor issues with our Vitest test cases: https://github.com/skeletonlabs/skeleton/issues/1284 Corrected the up/down arrows for Table sort, which were reversed: https://github.com/skeletonlabs/skeleton/issues/1287 Fixed a misspelled implementation of onDestroy within the Focus Trap action: https://github.com/skeletonlabs/skeleton/pull/1295 Documentation Extended Theme documentation to showcase CSS custom property use cases: https://github.com/skeletonlabs/skeleton/issues/1235 Resolved pathing issue for Themes documentation: https://github.com/skeletonlabs/skeleton/issues/1226 Font Awesome icons are now installed locally within the project for GDPR compliance: https://github.com/skeletonlabs/skeleton/issues/1190 Improved instruction for the canned modal widths: https://github.com/skeletonlabs/skeleton/issues/1187 Better illustrate how the Autocomplete keywords work for the demo: https://github.com/skeletonlabs/skeleton/pull/1218 Resolved a z-index issue for the App Bar popups on the Themes documentation: https://github.com/skeletonlabs/skeleton/issues/1222 Added missing import for AppRailTile: https://github.com/skeletonlabs/skeleton/issues/1244 Better demonstrate wrapping card styling for Autocomplete docs: https://github.com/skeletonlabs/skeleton/pull/1257 The featured Avatar demo now has an interactive border radius: https://github.com/skeletonlabs/skeleton/pull/1279 Corrected incorrect name field description for the SlideToggle: https://github.com/skeletonlabs/skeleton/issues/1269 Fixed typos, grammar, and other small mistakes: https://github.com/skeletonlabs/skeleton/pull/1208 https://github.com/skeletonlabs/skeleton/issues/1207 https://github.com/skeletonlabs/skeleton/pull/1225 https://github.com/skeletonlabs/skeleton/issues/1247 https://github.com/skeletonlabs/skeleton/pull/1297 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Announcing new services and support from Skeleton Labs",
    "url": "https://www.skeleton.dev/blog/announcing-new-services-and-support-from-skeleton-labs",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Wednesday, April 12, 2023 2 min read Announcing new services and support from Skeleton Labs Chris Simmons @SkeletonUI In a hurry? Visit the new Skeleton Labs website for details. Hey everyone, Chris here from the Skeleton and Skeleton Labs teams. I'm thrilled to announce that Skeleton Labs is now provided premium services and support for your Skeleton projects. This is something we've been cooking for several months. We also discussed this in details during our Skeleton v1.0 launch livestream event: What's the Goal? Skeleton Labs was founded to provide a commercial extension to the open source Skeleton project. This means providing support to anyone who wishes to use Skeleton in a professional capacity. While our free community support through Discord and GitHub has been great (fielding 50-75 issues per week), we know that some groups may need a bit more time and attention. Additionally, one of the core tenets of Skeleton Labs is to fund the open source project and ensure it continues to thrive for years to come. This includes compensation for full time members, like myself, who strive to maintain, update, and extend the library for you in meaningful ways every single day. To this end, we think these new services will be a great way to provide more support to our professionals in the space. While also supporting the members of Skeleton responsible for keeping the project going day to day. New Support and Services As part of today's update, Skeleton Labs will now offer professional consulting, contracting, and technical support. These services draw from our intimate knowledge of Skeleton, as well as decades of experience building platforms for the web ecosystem. For more information see our new website: https://www.skeletonlabs.co/ Starting this week, we're offering free consultations with a member of the Skeleton Labs team. In most cases you'll be meeting with me to discuss and craft a strategic plan to fulfill the needs of your project. If you're interested, you can book right now, directly on our new website: Book an Appointment Reflecting on Skeleton Lab's Success We've seen great success via the Skeleton sponsorship programs, with dozens of individual sponsors between GitHub, Ko-Fi, and Patreon. We utilize your donations to cover Skeleton’s ongoing infrastructure costs (domains, hosting, blog services, etc), as well as contribute to key initiatives, such as paid advertising. This helps boost the size of Skeleton's community, which means more contributors and contributions, which in turn helps Skeleton continue to grow and evolve. What's Next? With sponsorship and services now widely available, our next goal is a new digital marketplace for Skeleton. This will initially feature a highly curated set of professional website templates for websites, blogs, and more over time. These templates will be purpose built for Skeleton, including direct support for our adaptive themes, allowing you to rebrand in seconds. We're excited to share more about this in the near future. Thank you for your continued support, Chris Simmons Resources Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.2.5",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-2-5",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, April 25, 2023 2 min read Skeleton v1.2.5 Chris Simmons @SkeletonUI News Skeleton at Svelte Summit! That's right, be on the lookout for a lightning talk from the Skeleton crew at the upcoming Svelte Summit spring conference, hosted by Svelte Society. The event will be on Saturday, May 6th. View the Svelte Summit website local times and more information: https://www.sveltesummit.com/ Svelte Society on Twitter Svelte Society on YouTube New Huntabyte Video! We're thrilled to share that Skeleton was recently covered by Svelte-focused YouTube content creator Huntabyte. In his latest video he provides a quick crash course into setting up a new Skeleton project and building a simple application. Hunter is a wonderful supporter and contributor in the Svelte community, so please drop him a like and follow! View the video on YouTube Follow Huntbyte on Twitter New Skeleton v2 Roadmap We've shared a new article discussing the future of Skeleton and the priority for upcoming features. As well as discussing progress on Skeleton Labs. View the article below to learn more about our plans. https://github.com/skeletonlabs/skeleton/discussions/1367 Release Notes https://github.com/skeletonlabs/skeleton/releases/tag/1.2.5 Summary: 🛠️ A variety of minor improvements 📗 Various documentation updates 🐞 A number of notable bugfixes Minor Improvements Improved Toast animations: https://github.com/skeletonlabs/skeleton/pull/1312 Input chips now feature an on:invalid event handler when an invalid value is input: https://github.com/skeletonlabs/skeleton/pull/1334 The Accordion and AccordionGroups now accept a disabled property: https://github.com/skeletonlabs/skeleton/issues/1343 Normalized horizontal scrollbar heights: https://github.com/skeletonlabs/skeleton/pull/1360 The Input Chip's input element now forwards on:focus and on:blur events: https://github.com/skeletonlabs/skeleton/pull/1365 Bugfixes Performance improvements for autocomplete with lots of options: https://github.com/skeletonlabs/skeleton/pull/1321 Resolved a visual bug when closing custom demo modals: https://github.com/skeletonlabs/skeleton/issues/1300 Resolved an issue preventing the popup closeQuery option from working with empty selectors: https://github.com/skeletonlabs/skeleton/issues/1318 Fixed a bug preventing form submission for Steppers with individual forms: https://github.com/skeletonlabs/skeleton/issues/1328 Resolved an issue with the hide-scrollbar class within TabGroups: https://github.com/skeletonlabs/skeleton/pull/1347 Quick fix to the spelling of some internal App Shell imports: https://github.com/skeletonlabs/skeleton/pull/1361 Documentation Documented the proper use of cspell for contributors: https://github.com/skeletonlabs/skeleton/pull/1329 Minor improvements to the App Rail demo: https://github.com/skeletonlabs/skeleton/pull/1339 Minor improvements to the App Shell documentation: https://github.com/skeletonlabs/skeleton/pull/1340 Removed a duplicate class in the modal examples: https://github.com/skeletonlabs/skeleton/pull/1346 Provided new FAQ and warning in regards to VS Code auto-reorder imports feature: https://github.com/skeletonlabs/skeleton/pull/1351 The Introduction documentation now features Huntabyte's recent video: https://github.com/skeletonlabs/skeleton/pull/1357 Fixed documentation issues for Design Tokens > Text: https://github.com/skeletonlabs/skeleton/issues/1363 Documented our stance on Toast position settings: https://github.com/skeletonlabs/skeleton/issues/1363 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.5.1",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-5-1",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, May 9, 2023 6 min read Skeleton v1.5.1 Chris Simmons @SkeletonUI News Skeleton at Svelte Summit The Svelte Summit aired over the weekend and was jam packed with awesome presentations by members of the Svelte community, including a talk by Rich Harris, as well as a short presentation from us showcasing Skeleton. Find a link to the full stream, as well as a high quality version of our presentation below: View the Svelte Summit stream View the Skeleton presentation Release Notes https://github.com/skeletonlabs/skeleton/releases/tag/1.5.0 Today's update includes the most features introduced to Skeleton since the v1 release! This include a new opt-in typography system, major overhauls to the popup feature, introduction of the new Tailwind blocks, gradient variants, and more. See the full list of updates detailed below. Summary: 🅰️ New opt-in typography system 💬 Major updates to Popups 🧠 New Chat and AI Prompt UI 🎨 Gradient variant styles added #️⃣ Code Blocks now support line numbers 🐞 Plus many new improvements and bugfixes Opt-in typography system https://github.com/skeletonlabs/skeleton/issues/1189 We've introduced a new opt-in typography system that will replace the on-by-default system of prior versions. This allows you to choose which elements receive Skeleton's typography via utility classes, similar to Skeleton's form styles. We've provided a few examples below: h1-h6: now uses .h1 through .h6 classes Anchor: now use the .anchor class Blockquote: now uses the .blockquote class Paragraph: no class needed, these inherit the global base text color and sizing View the Typography Documentation for all examples. This provides a number of benefits: including making it easy to avoid unwanted styling, allowing for local overrides inline with utility classes, as well as providing simpler selectors for global style overrides in your apps. See our pinned guide on the Typography page. Tailwind Typography Plugin Defaults In addition to the changes above, we now also provide some rudimentary defaults when using the official Tailwind Typography plugin, which is used to style HTML content you do not own (ex: blog or CMS markup). You'll receive this out of the box with no changes needed. You can still overwrite and extend these styles per your preference following the official modifiers. ⚠️ Migration Guide ⚠️ When creating new projects using the Skeleton CLI this will use the new opt-in typography system by default. If you're migrating an existing project though, we have provided a detailed migration guide near the top of the page. To begin using the new system simply rename all.css in your root layout to skeleton.css, then begin implementing each respective utility class. Please be warned that the on-by-default typography system provided by all.css will continue to work for now, but will be permanently removed in the next major release (Skeleton v2+). It's advised that you migrate to skeleton.css and the opt-in system as soon as possible! Major Popup overhaul https://github.com/skeletonlabs/skeleton/issues/1350 The popup action has been completely rewritten from the ground up, implementing a number of new feature requests, as well as addressing several known bugs and issues. See a summary of changes below: We now optionally support all Floating UI middleware Popups will now reflected changes when popupSettings data is updated (ex: changing targets) The hover event now utilizes mouseover/leave in place of mouseenter/out While the trigger is focused, pressing tab or arrow down will now focus the popup contents Trigger elements can now support multiple use:popup actions at once (ex: tooltip + dropdown) Provided a solution for preventing hover events from closing when hovering icons and child items Bugfix: fixed a bug where closeQuery: '' did not prevent child elements from closing the popup Bugfix: using tab or arrow down to focus the popup no longer skips options for autocomplete lists Plus we've greatly improved the overall documentation and examples ⚠️ Migration Guide ⚠️ As part of today's update we've standardized our event types to be more semantic. Please update your popups accordingly: click - opens the popup on click, closing when clicking outside hover - opens the popup on hovering the trigger element, closes when not hovering focus-blur (replaces focus) - opens the popup on focus, closes on blur focus-click - focuses the popup on focus, close on click outside NOTE: hover-click has been dropped as we felt this encouraged poor UX - especially for mobile users. We recommend you migrate to using the click event instead, which has great support across both mouse and touch devices. New \"Blocks\" section and Chat and AI Prompt interface https://github.com/skeletonlabs/skeleton/issues/1354 Today's update includes a new way for us to showcase Skeleton and what it can do for you. Instead of implementing new elements or components, we've introduced a new Tailwind > Blocks section that showcases how to build complex interfaces using existing Skeleton primitives. These are paired with Tailwind utility classes, with Javascript logic provided. We've now introduced a new opinionated guide for creating Chat and AI prompt interfaces making use of a number of Skeleton features, including: cards, avatars, lists, inputs, and more. View the documentation to learn the basic principles required for building this interface, or tap the \"Page Source\" button near the top of the page to view the source code for the featured example found near the top of the page. If you find this section useful, please let us know, as this may encourage us to add more sections like this in the future! Added new gradient variant styles https://github.com/skeletonlabs/skeleton/issues/1368 Skeleton Labs recently announced new support services, including contracting for companies and individuals using Skeleton. As part of this process we've made a commitment to provide new features upstream to the open source project whenever possible. This begins today with the introduction several new gradient variants. Like other variant classes, these are multi-purpose and may be used for buttons, cards, badges, and more. Each two-tone gradient automatically adapts to your theme just as you might expect. Code Block now support line numbers https://github.com/skeletonlabs/skeleton/pull/1437 Our code block components now support line numbers when enabling the lineNumbers property. Note that this currently supports up to 1000 lines of code, but we will look to expand this in the future. Minor Improvements Implemented a new limit property for the autocomplete component: https://github.com/skeletonlabs/skeleton/issues/1382 Tab component updated with a11y friendly keyboard interactions: https://github.com/skeletonlabs/skeleton/pull/1398 Improved how anchor tiles work for App Rail, and allow derived stores: https://github.com/skeletonlabs/skeleton/pull/1402 Improved typing for the Toast position property: https://github.com/skeletonlabs/skeleton/pull/1404 Implemented a fallback mechanics for Avatars when image fails to load: https://github.com/skeletonlabs/skeleton/pull/1427 Accordions now have a width prop and fill to container width by default: https://github.com/skeletonlabs/skeleton/issues/1428 Implemented nonce on the Lightswitch script tag injected into the page head: https://github.com/skeletonlabs/skeleton/issues/1349 The input\\\\\\[search\\\\\\] cancel button is now styled for webkit-based browsers: https://github.com/skeletonlabs/skeleton/issues/1373 Bugfixes Bugfix for modal window undefined error: https://github.com/skeletonlabs/skeleton/pull/1375 Various linting improvements: https://github.com/skeletonlabs/skeleton/pull/1387 Fixed a bug where the default state of the Lightswitch could be incorrect: https://github.com/skeletonlabs/skeleton/pull/1440 Documentation Updated the Docs > Introduction page to showcase more Skeleton videos: https://github.com/skeletonlabs/skeleton/issues/1455 Migrated the doc site to utilize the new opt-in typography system: https://github.com/skeletonlabs/skeleton/pull/1419 Doc example images and text copy now more consistent, now implements faker.js: https://github.com/skeletonlabs/skeleton/issues/1377 Consistent example naming used for models: https://github.com/skeletonlabs/skeleton/pull/1400 Updated popup documentation examples to use const instead of let: https://github.com/skeletonlabs/skeleton/pull/1385 Fixed a mislabeled drawer property: https://github.com/skeletonlabs/skeleton/issues/1383 Fixed a test case for filters: https://github.com/skeletonlabs/skeleton/pull/1405 Improved form input example text and settings: https://github.com/skeletonlabs/skeleton/pull/1412 Expanded and clarified Firefox browser support for SVG Filters: https://github.com/skeletonlabs/skeleton/issues/1431 Updated the Skeleton favicon to be visible on light themed browser UI: https://github.com/skeletonlabs/skeleton/issues/1441 Various typos and grammar fixes: https://github.com/skeletonlabs/skeleton/pull/1392 https://github.com/skeletonlabs/skeleton/pull/1447 https://github.com/skeletonlabs/skeleton/pull/1448 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.6.2",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-6-2",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Wednesday, May 24, 2023 3 min read Skeleton v1.6.2 Chris Simmons @SkeletonUI Release Notes Today's update is a bit different than normal, as outwardly it will appear as a minor triage update. However, internally we've now migrated the Skeleton project to a new monorepo structure. This will have little to no immediate impact for Skeleton users in the short term, but long term will open up a lot of new possibilities for the library. See below for more information. 🧱 New monorepo project structure 📗 Contribution guidelines overhauled 📎 New anchor tile added to App Rails 🐞 Plus a host of improvements and bugfixes Monorepo Project Structure https://github.com/skeletonlabs/skeleton/pull/1506 Special shoutout to @niktek and @AdrianGonz97 for making this happen! Attention contributors! As mentioned above, we've now migrated the project to a new monorepo structure. This precedes a number of upcoming housekeeping issues for the project. Please see our updated contributor guidelines for detailed instructions for new contributions. For now, here's the most important information in a nutshell: We now require contributors to use pnpm, which fully supports monorepo workspaces.  Make sure you delete your node\\\\\\_modules folder before doing pnpm i after pulling from your sync'd fork. /packages/skeleton - contains the core library package (@skeletonlabs/skeleton) /sites/skeleton.dev- contains the documentation website (skeleton.dev) The monorepo is currently comprised of two projects, but this will grow over time: /sites/theme-generator - will be a standalone web app that houses a greatly improved theme generator /packages/popups - will be a standalone package and huge rework of our popup feature /packages/codeblocks - will be a standalone package of our code block feature We may also merge create-skeleton-app (the Skeleton CLI) Plus additional sites and packages as we see fit Why the change? Overall it just makes the project more modular and easier to maintain. For the theme generator, this allows us to improve the UX, interface, and functionality. For the standalone packages, this typically means we can more tightly integrate required peer dependencies, and these can potentially be used outside of Skeleton projects. No specific deadline has been set for these changes, we're just starting to lay the groundwork to make this possible! Contribution Guide Overhaul https://github.com/skeletonlabs/skeleton/pull/1526 Doc Link: https://www.skeleton.dev/docs/contributing We've now completely overhauled our contributor documentation top to bottom. It should now be more accurate, more complete, and provides full instructions for installing pnpm and using our new monorepo structure. If you're new to monorepos, but still wish to contribute, find our full guide for this within the Requirements section. App Rail Anchor Tile https://github.com/skeletonlabs/skeleton/pull/1486 In previous iterations of Skeleton the App Rail would utilized an AppRailTile for both selection state as well as links (anchor elements). In today's release we've now introduced a dedicated AppRailAnchor component, which provides the same options, but with a simpler set of props purpose built for anchors. Best of all, you can mix AppRailTile and AppRailAnchor within the same App Rail component. See the documentation for details. Other Notable Improvements The focus trap action now correctly updates when content within mutates: https://github.com/skeletonlabs/skeleton/pull/1482 Paginator now includes first and last buttons for quicker navigation: https://github.com/skeletonlabs/skeleton/pull/1530 Filters are now supported in Firefox: https://github.com/skeletonlabs/skeleton/pull/1449 Improved optional theme mesh background styles to support custom layouts: https://github.com/skeletonlabs/skeleton/pull/1538 Bugfixes Fixed an illegal constructor bug for popup: https://github.com/skeletonlabs/skeleton/pull/1464 Fixed a bug where the class attribute wasn't applied to the Tab parent element: https://github.com/skeletonlabs/skeleton/pull/1468 Fixed a bug where ModalStore could return null/undefined: https://github.com/skeletonlabs/skeleton/pull/1471 Fixed a bug where code block line numbers didn't display without syntax highlighting enabled: https://github.com/skeletonlabs/skeleton/pull/1472 Fixed the callback is not a function error for popups: https://github.com/skeletonlabs/skeleton/pull/1479 Fixed an undefined class error for Toasts: https://github.com/skeletonlabs/skeleton/pull/1487 Dropped the \"v\" in version for package.json: Resolved an issue preventing responsive sizing for opt-in typography headings: https://github.com/skeletonlabs/skeleton/pull/1495 https://github.com/skeletonlabs/skeleton/pull/1507 Fixed a bug where popup focus events could fail: https://github.com/skeletonlabs/skeleton/pull/1522 Fixed an issue where input group styling could show a blue ring: https://github.com/skeletonlabs/skeleton/pull/1537 Button icons now match the click animation of standard buttons: https://github.com/skeletonlabs/skeleton/pull/1493 Fixed an issue with autocomplete and responsive data: https://github.com/skeletonlabs/skeleton/pull/1543 Documentation Updated theme font preload tips to prevent flickering on load: https://github.com/skeletonlabs/skeleton/pull/1524 Improved the popup hover event tip for disabling pointer events for children: https://github.com/skeletonlabs/skeleton/pull/1511 Appended modal documentation with async example: https://github.com/skeletonlabs/skeleton/pull/1523 Minor fixes and typos: https://github.com/skeletonlabs/skeleton/pull/1465 https://github.com/skeletonlabs/skeleton/pull/1491 https://github.com/skeletonlabs/skeleton/pull/1497 https://github.com/skeletonlabs/skeleton/pull/1508 https://github.com/skeletonlabs/skeleton/pull/1518 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.7.1",
    "url": "https://www.skeleton.dev/blog/skeleton-1-7-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, July 4, 2023 3 min read Skeleton v1.7.1 Chris Simmons @SkeletonUI Release Notes Release: https://github.com/skeletonlabs/skeleton/releases/tag/%40skeletonlabs%2Fskeleton%401.7.0 Changelog: https://github.com/skeletonlabs/skeleton/blob/master/packages/skeleton/CHANGELOG.md Today's update represents another substantial update on the operational side of things. Skeleton now automatically generates our changelog using Changesets. We've also introduced new CI/CD processes for common pull request tasks (ex: linting), as well as automating the process for packaging and deploying each release to NPM. Overall this should greatly improve the accuracy of this process, and help reduce the manual effort on the part of project maintainers. You'll also note a change to the format of our release notes going forward. These will now only include the most notable updates that require screenshots, videos, detailed descriptions, migration steps, etc. For a complete list of updates, please view the Skeleton changelog located above or on the sidebar of the main repository page. Summary: 🦋 Introducing Changesets for contributors 🔁 Automated CI/CD process for contributors 📄 Paginator UI updates 🔠 Typography prose styles updates Changesets Note Attention Contributors! When submitting a new pull request that modifies the Skeleton package or any other project in the /packages/\\\\\\* directory, you will need to submit a Changeset as part of the contribution. You'll note a bot message appear in the PR thread that will indicate the Changeset status (shown above). This will aid us in automatically generating a changelog per each release. Creating a Changeset will prompt you for three details: What packages have been modified (only @skeletonlabs/skeleton for now) If the change is a major, minor, or patch A short and semantic description - which appears on the changelog itself If you're new to Changesets, we've provided additional documentation within our Contribution Guidelines: https://skeleton.dev/docs/contributing/requirements#changesets NOTE: we do NOT maintain a changelog for documentation updates, please avoid sending changesets that target the documentation project within our monorepo. Pull Request Updates Note Attention Contributors! We've updated our PR submission template on GitHub to be simpler and more informative. This includes instructions for generating Changesets, as well as a checklist of requirements for each pull request. Make sure all steps are completed in full if you wish for your PR to be considered for review. Additionally, you may also see a list of CI/CD process results that inform you of any failed checks, such as a failure for svelte-check, ESLint, or Prettier formatting. This UI may appear briefly while the process is running, but will hide if all checks pass. Paginator Updates https://skeleton.dev/components/paginators A number of notable UI updates have been introduced to the Paginator component. This includes improved arrow and caret icons, improved styling properties, as well as a new numeric row display option. See a preview of this below. To enable the new numeric row style, follow the instructions provided on the updated documentation page. DEPRECATED: Typography Prose Styles If you rely on the Skeleton-provided default styling for the Tailwind Typography plugin, please be aware that today's update will require additional effort on your part. We've been alerted to the fact these styles are causing a breaking issue for users that do not install the Tailwind Typography plugin. Additionally, we no longer feel it's relevant for Skeleton to maintain these styles for an optional plugin. We're introducing a new process today to phase these out: If you rely on these styles in your project, we've provide a temporary solution through a new dedicated stylesheet called typography-prose.css. To implement this, view our updated documentation. Long term, we advise you to replicate and maintain these styles in your own project within the app.postcss global stylesheet. As of Skeleton v2 and forward we will permanently remove the typography-pose.css stylesheet and no longer offer these styles as part of the library. You can, however, continue to use the Tailwind Typography plugin and your own self-maintained set of styles. Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Announcing the Skeleton Store!",
    "url": "https://www.skeleton.dev/blog/announce-the-skeleton-store",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, July 18, 2023 5 min read Announcing the Skeleton Store! Chris Simmons @SkeletonUI Hey everyone, Chris here from Skeleton Labs. Today I'm thrilled to reveal our newest service, the Skeleton Store. A digital storefront featuring premium assets purpose-built by and for Skeleton. The new Skeleton Store at store.skeleton.dev Today's launch welcomes our first two website templates. This includes the sleek Blog template, as well as modern portfolio website. Each provides a perfect foundation for both beginners and pros alike - whether you lack confidence in your design skills, or just looking for a quick and turnkey solution for deploying a new application. 🇺🇸 To our international friends - please note that today's release is initially reserved for customers in the United States. However, we are looking to expand to other countries in the near future. We appreciate your patience in the meantime. Adaptive Design First things first, these are not your tradition website templates – each is designed from the ground up using Skeleton, meaning they're capable of adapting to the visual theme and aesthetic of your brand. This includes turnkey support for light and dark mode right out of the box. Plus each template is bundled with it's own unique hand-crafted theme, which you may reuse in any number of projects! You can also opt for any of Skeleton's preset themes or implement your own using our powerful Theme Generator. Add your own images and content and you're ready to deploy! Functional Apps Our templates also operate as fully functional web applications. Take the blog template for example – this implements mdsvex, which provides a simple to use yet powerful Markdown blogging system. If you wish to create a new post, just add a new file, no CMS or backend required. This template also comes with type-safe frontmatter, a customizable category system, and support for multiple authors. Quickly create and edit a blog post using Markdown. The Portfolio template provides a local configuration file to quickly and easily customize the details of each listed project and add or edit the category grouping. With all routing handled for you automatically. Best in Class Features Each template is generated using Skeleton, which means it's powered by Svelte, SvelteKit, and Tailwind under the hood. Use Skeleton's vast array of components and elements, Tailwind's powerful utility classes, or swap your SvelteKit adapter for pain-free deployment. Typescript Support Full support for Typescript's type safety by default. Ensuring you can easily consume and extend data with confidence. Full Typescript type safety for all data. Custom Components We've included a number of custom features as well, such as a Social Links component. This allows you to easily configure the links and icons for social networks. Font Awesome is included by default to handle icons. The Social Links component. Sandbox Each template features a handy sandbox page for previewing your theme styling, testing Skeleton features, or implementing your own custom components. This can be found from the hidden /sandbox route. Gradients and color palette options on the hidden sandbox page. Free Updates All templates are maintained to support the latest and greatest versions of Svelte/Kit, Tailwind, and Skeleton. Including support for Svelte v4 out of the box, as well as Skeleton v2 in the near future. Licensing When you purchase a template from the Skeleton Store you have access to several flexible license options. We've taken great care to tailor these for a developers at any scale, including: Personal - intended for personal project, hobbyists, and freelancers. Commercial - for small to medium size businesses, including agencies. Enterprise - for large organizations that need custom rights for distribution. The Personal and Commercial license options are available when adding each product to the cart on the Skeleton Store, while users interested in our Enterprise license may contact Skeleton Labs at admin@skeleton.dev. Curated by Skeleton Labs Each template has been designed and implemented by myself (Chris Simmons) – the creator and core maintainer of Skeleton, as well as co-founder of Skeleton Labs. I've had the privilege of serving as a professional frontend developer for a little over two decades. I go to great lengths to ensure each project meets the highest standards of quality and follow the best practices for Skeleton. A peek at the design process behind the Blog template. As an aside - we will be looking for new creators in the future! If you are a professional frontend developer with a keen eye for design and strong emphasis on high quality UX, please contact me at chris@skeleton.dev and let's talk! Who Benefits? As I'm sure you're aware, Skeleton is a free and open source library. The Skeleton project is tended by Skeleton Labs, which offers a number of paid services and sponsorship through Ko-Fi, GitHub, and Patreon. All funds from these services are aimed at covering Skeleton's hosting fees, third party services, contractors, and other expenses. However, the Skeleton Store is a bit different. Each purchase will go directly to the author of the product. So for example, any templates you purchased today will support me directly! As you may know, I've been a full time contributor to Skeleton since it's inception over a year and half ago. I have served as the core maintainer since the project went open source in August 2022 and Skeleton is my full time job. My goal is to continue to build and maintain Skeleton for as long as I'm able, so each purchase you make helps enable this. Funding development of a large open source project is a real challenge, but I feel this is the most ethical optional available to do so - plus you get really cool products in return, which I hope is a win for everyone! What's Next? Currently we're aiming to introduce a new template each month. This may include e-commerce and dashboard templates in the future. We're also looking to introduce entirely new product categories as relevant. Of course we're also excited to bring the current slate of goods to other countries as soon as possible! That said, please stay tuned for further announcements, and as always, thanks to everyone for your support! We wouldn't be here with you. ➡️ Enter code launch at checkout to received 10% off your first purchase! Available until August 1st, 2023. View the newly launched Skeleton Store at store.skeleton.dev News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.8.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-8-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, June 20, 2023 2 min read Skeleton v1.8.0 Chris Simmons @SkeletonUI News Beta Features Starting today, new Skeleton features will include a small Beta tag in the documentation navigation. This allows us to launch new features quickly, but still make breaking changes based on your feedback. If you are leery of breaking changes, please avoid using beta features in production. However, in most cases you can expect the beta tag to be removed in the following release cycle. Release Notes Release: https://github.com/skeletonlabs/skeleton/releases/tag/%40skeletonlabs%2Fskeleton%401.8.0 View Changelog After several maintenance focused updates, we return with a new set of feature updates. This includes a brand new and interactive ratings component, new layouts for handling images and more, introducing an anchor-specific variation for tabs, and several new features for Toast notifications. If you wish to learn more about each new feature, continue reading below. Tap the Changelog link above if you wish to see the full list of changes. Summary: ⭐ Ratings component added 🖼️ Image Layout blocks added 🔗  TabAnchor component added 🍞 Expanded Toast features 🐞 Plus general improvements and bugfixes Ratings Component (Beta) https://github.com/skeletonlabs/skeleton/pull/1654 This component allows you to create a visual representation of numeric values - perfect for ratings for movies and more. This supports SVG, emoji, images, and text per each of the whole, half, and empty states. Plus see the documentation to learn how to make this interactive on click. https://skeleton.dev/components/ratings Image Layouts https://github.com/skeletonlabs/skeleton/pull/1617 This new Blocks section pairs HTML markup with standard Tailwind utility classes to provide grid or masonry layouts for displaying images. The styling for this feature comes directly from our friends over at Flowbite. If you're Interested in learning more about how to pair Skeleton and Flowbite, see our dedicated guide. https://skeleton.dev/elements/image-layouts TabAnchor Component Following the same pattern as the AppRailAnchor component in Skeleton v.1.6, we've now introduced a TabAnchor component. This provides dedicated support for anchor links that are displayed as Tabs. Make sure to read the documentation to understand the ideal use case between standard Tabs and TabAnchors, as these should not be used interchangeably. https://skeleton.dev/components/tabs New Toast Features The Toast notifications feature has been expanded with a number of new features, including: Now supports hiding the dismiss button when using the hideDismiss option Can remain visible when hovering with a mouse cursor using the hoverable option Has the ability to be closed programmatically using each Toast's unique reference ID See the revamped Toast documentation to learn more about each of these features: https://skeleton.dev/utilities/toasts News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.9.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-9-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, July 4, 2023 2 min read Skeleton v1.9.0 Chris Simmons @SkeletonUI News Coming Soon: Premium Templates from Skeleton Labs As part of the Skeleton Labs roadmap we've been promising premium templates for quite a while. These are intended to be fully functional apps built from the ground up to utilize Skeleton. This includes direct support for our adaptive theme system, allowing for ultimate customization compared to traditional templates. We're happy to announce that this is progressing well, and wanted to pull back the curtain and give you a quick sneak peek at our personal portfolio and blog templates. Both will be available at launch, with more options added over time. We're very excited to show you more, so keep an eye out for our full announcement in the near future! Release Notes View Release View Changelog Svelte 4 Support Added https://github.com/skeletonlabs/skeleton/pull/1690 We're happy to announce that Skeleton now fully supports Svelte 4. This was a monumental effort by contributor @AdrianGonz97 (aka Coka), so please send him some <3. While this is a major update to Svelte, the changes themselves include minimal new features, and instead mostly focus on triage. However the Svelte team is using this to set the stage for Svelte 5. For full details we recommend checking the official posts by the Svelte team, as well as the awesome video summary by Joy of Code: Announcing Svelte 4 - Svelte Blog Svelte 4 migration guide What's New In Svelte 4? - Joy of Code The updates to Skeleton include the following: Updated all dependencies that now support Svelte 4 Performed a full audit and cover everything in the migration guide Updated all component transitions since |local is now set by default. Fixed all import paths that targeted svelte/internal Added Svelte 3 and 4 as peer dependencies Enhanced all types for custom dispatched events We've currently disabled some a11y-focused warnings - see details on this below Determined the lowest version of Svelte we will support (v3.56.0) If you update and encounter additional issues though, please reach out through GitHub Issues or the #skeleton-support channel on our Discord server. Svelte 4 Accessibility Warnings Svelte provides a number of warnings when certain a11y conditions are not met, such as missing a recommended ARIA role. We've identified a handful of features in Skeleton that are currently not up to par and triggering these warnings. However, we've opted to silence them, which allows us to provide Svelte 4 support sooner than later. That said, we will aim to resolve each of these warnings in subsequent releases of Skeleton. Unfortunately a few may incur breaking changes and will need to be delayed to our next major release (Skeleton v2.0). If you're curious to track the progress on this, please monitor the following issue: https://github.com/skeletonlabs/skeleton/issues/1708 Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.10.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-10-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, July 18, 2023 2 min read Skeleton v1.10.0 Chris Simmons @SkeletonUI News The Skeleton Store is now live! View the Store: https://store.skeleton.dev/ Announcement: https://github.com/skeletonlabs/skeleton/discussions/1763 After a ton of hard work behind the scenes, we're thrilled to announce that the Skeleton Store is now live! This offers professional website templates, designed from the ground up for use with Skeleton. Including custom features, adaptive themes, powerful components, and more. Today's launch includes our first two templates for a blog and personal portfolio site, with more coming soon. View the store or read the full announcement here to learn more. Release View Release View Changelog Alongside the launch of the store, we're introducing a minor release of Skeleton that includes several notable improvements and features. While today's release is on the smaller side, we anticipate the next few releases will be a return to form - including several large and meaty updates. This will likely include the full release of Skeleton v2. This represents a large step forward for Skeleton and much improved onboarding and easy of use, so we're excited to share more soon. Tree View Component https://skeleton.dev/components/tree-views Today's headline feature is the introduction of the long-requested Tree View component. This element is ideal for drill-down navigation similar to your OS file navigation and includes Skeleton typical slew of customization. With great defaults right out of the box. As with all new feature release this one is launching with the beta tag, which allows you to begin using the product right away, provide feedback, and allow us to make any final adjustments, which may or may not include small breaking changes. Let us know what you think! A note on Skeleton v2 As a peek into the future of the project - we wanted to share a quick update regarding Skeleton v2. We're currently very close to completing our roadmap, with most issues either complete, pending, or to be implemented over this next release cycle. We're currently expecting this this to drop as either the next release, or the release following. As with any major release, this will include a number of breaking changes. However, alongside this, you'll gain access to a slew major new features, quality of life improvements, and of improved stability and bugfixes. We'll be sharing more about this soon. Stay tuned! News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v1.11.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v1-11-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, August 1, 2023 1 min read Skeleton v1.11.0 Chris Simmons @SkeletonUI View Release View Changelog Today's release includes a handful of minor bugfixes and and improvements to the Skeleton documentation. No notable new features are included in this release, but it is still advised to update when you can. Update on Skeleton v2 We've identified a number of remaining issues that we will be tackling this release cycle. Two weeks from today we'll introduce the first release candidate for Skeleton v2. This would include a large list of new features, and some notable breaking changes. However, we'll also provide a migration guide to help ease your projects to the new version. The largest changes will be around the Skeleton Tailwind plugin, Skeleton stylesheets, and Skeleton themes. Especially if you use a custom theme. Look for more information on this soon. You may also view our roadmap to preview what's in progress and what will be included in this release: https://github.com/skeletonlabs/skeleton/discussions/1367 News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v2.0 Release Candidate",
    "url": "https://www.skeleton.dev/blog/skeleton-v2-0-release-candidate",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, August 15, 2023 6 min read Skeleton v2.0 Release Candidate Chris Simmons @SkeletonUI Today we're happy to introduce the new v2 release candidate of Skeleton! This represents a huge step forward for Skeleton, introducing a number of important updates, new features, and of course some necessary breaking changes. As part of today's update you'll find a new Skeleton plugin for Tailwind, new theme format and configuration options, a dynamic transitions system for components, and much more! 🚨 Migration Guide 🚨 We've created a detailed migration guide to help you move from v1.x to the v2 release candidate. View the v2 RC migration guide View the v2 RC documentation site 🆕 What's New? New Tailwind Plugin (#1660) Skeleton co-maintainer @AdrianGonz97 has provided one of the largest and most impactful updates - a brand new Skeleton Tailwind plugin, which is now a standalone package separate from the core library. Under the hood, the plugin composes and injects all styles required, such Skeleton's Tailwind Elements, and injects those directly via Tailwind. This means you're no longer required to import and manage additional stylesheets such as theme.css or skeleton.css. Additionally, the plugin now supports the recently introduced .ts or .js formats for your Tailwind Config. The new plugin also changes the way you define and customize your themes settings, which we'll cover in more detail below. New Theme Updates (#1660) Learn more about the new theme options from the updated Themes section of our documentation. Register and Switch Themes The new Skeleton v2 plugin now allows you to register one or more preset or custom themes directly within your Tailwind config. You may then define which theme you wish to be actively displayed via a data-theme attribute on the body element in your application. This means dynamic theme switching is not only possible, but quite trivial to implement! Preset Theme Enhancements Preset themes have a simpler interface for enabling optional features, such as background gradients. This is provided via the enhancements setting in your plugin settings. Set the value to TRUE to opt into these extra features per each theme. New Theme Format Additionally, themes have been migrated to use CSS-in-JS, Tailwind's preferred format for injecting new styles via a plugins. Themes still utilize CSS custom properties (aka CSS variables) like before, this merely changes how the theme data is delivered to the plugin. Typescript fans will also enjoy the new CustomThemeConfig type for simple type safety. Using the New Format Whether you're using a preset theme or aiming to migrate a custom theme, we recommend following our full migration guide linked at the top of this page. Note that we've also update the Theme Generator to output themes in the new format. Dynamic Transitions for Components (#1533) Contributor @Mahmoud-zino has devoted a tremendous amount of time to introduce a new dynamic transition system. This allows you to modify or disable transitions for nearly every component in the library! See the new Essentials > Transitions to learn more about how this works. This covers which components are supported, how to configure each transition, how to disable transitions, and of course how to adhere to best practices for accessibility. And yes, this dynamic transition system supports custom Svelte-based CSS or JS Svelte transitions! New Table of Contents Utility (#1832) Skeleton introduced a rudimentary Table of Contents component for our v1 launch, however, this never quite reached our standards of quality. Given this, we've raised this feature to the ground and began anew. With this, a new version of the feature can now be found under Utilities > Table of Contents. The new version features a \"crawler\" action to scan a region of the page for headings, optionally append unique IDs to each heading, passing a reference for each heading to the component. While the updated component provides the visual interface and list of links on the page. Furthermore, we've reworked the scroll mechanisms to allow for native browser URL hashes for deep linking (ex: /some/path#my-deeplinked-section). This means the feature is now supported with or without the use of the Skeleton App Shell. You'll note the default styles are much less opinionated, but you'll find a wider range of customization is possible through the new style props. Tree View Updates (#1779) Contributor @Mahmoud-zino has been hard at work to introduce a number of user-requested features to the new Tree View. This includes a slew of selection methods, utility features, and even a means to generate tree views in a data-driven and recursive manner. Given the scope of the changes we're going to keep the beta label for a little while longer, but very much welcome your feedback on these changes. PurgeCSS Plugin Support While not directly part of the library proper, Skeleton co-maintainer @AdrianGonz97 has launched his initial version of vite-plugin-tailwind-purgecss. If you're not aware, Tailwind can provide a sub-par experience when it comes to purging unused CSS provided by third party Tailwind libraries such as Skeleton. To remedy this, the plugin helps ensure only the styles used in your production application make it to final CSS bundle. While optional, we highly encourage this for all Skeleton projects and have enabled it by default for all Skeleton CLI generated projects going forward. We've also provide a simple guide to help you get started. Additional Updates: Added a regionLabel prop to the RadioGroup component (#1836) Many updates to the Skeleton documentation to cover the latest changes. ⚠️ Breaking Changes: Drawers, Modals, and Toasts Stores (#1831) We've refactored the stores for all singleton-based overlay features to help prevent known SvelteKit SSR issues. The new requirements are covered in our migration guide, and of course you're welcome to reference the updated documentation page for each feature: Drawers: https://skeleton-docs-git-v2-skeleton-labs.vercel.app/utilities/drawers Modals: https://skeleton-docs-git-v2-skeleton-labs.vercel.app/utilities/modals Toasts: https://skeleton-docs-git-v2-skeleton-labs.vercel.app/utilities/toasts Skeleton Data Table Removed (#1822) We've now removed the long-deprecated and unlisted Skeleton Data Table feature. Going forward, Skeleton's official recommendation is to use Svelte Simple Datatables paired with Skeleton's Table Element styles. For any holdouts wishing to keep the legacy data table feature, you can find a zip backup here. Additional Breaking Changes The deprecated whitelist | blacklist props have been removed from the Autocomplete component. Removed all remnants of Skeleton's legacy typography system, which is no longer available in v2. Renamed the Paginator offset to page for better semantics. 🐞 Bugfixes Resolved a bug when Autocomplete allow and deny lists are empty. Resolved a style issue for .bg-hover-primary-token color in dark mode. Prevent Paginator from resetting page value on length change. InputChips now update binded value only once. What's Next? We'll be gathering and implementing fixes for issues found within the v2 RC, then anticipate a minor migration process from v2 RC -> v2 (stable). Keep an eye out for that in our next round of announcements on or around August 29th. You may also reference our current proposals for the v3 roadmap. This provides a sneak peek into what we have planned for the future. News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton v2.0",
    "url": "https://www.skeleton.dev/blog/skeleton-v2-0",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 28, 2023 7 min read Skeleton v2.0 Chris Simmons @SkeletonUI Today we're happy to introduce Skeleton v2! This represents a huge step forward for Skeleton, introducing a number of critical updates, new features, and of course a handful of breaking changes. We'll cover the details for this release below. 🚨 Migration Guide 🚨 We've created a detailed migration guide to help you move from v1.x or v2 RC to the v2 stable release. View the v2 migration guide View the v2 documentation site View the v2 Changelog View the archived v1 documentation site 🆕 What's New? New Tailwind Plugin (#1660) Skeleton co-maintainer @AdrianGonz97 has provided one of the largest and most impactful updates - a brand new Skeleton Tailwind plugin, which is now a standalone package separate from the core library. Under the hood, the plugin composes and injects all styles required, such Skeleton's Tailwind Elements, and injects those directly via Tailwind. This means you're no longer required to import and manage additional stylesheets such as theme.css or skeleton.css. Additionally, the plugin now supports the recently introduced .ts or .js formats for your Tailwind Config. The new plugin also changes the way you define and customize your themes settings, which we'll cover in more detail below. New Theme Updates (#1660) Learn more about the new theme options from the updated Themes section of our documentation. Register and Switch Themes The new Skeleton v2 plugin now allows you to register one or more preset or custom themes directly within your Tailwind config. You may then define which theme you wish to be actively displayed via a data-theme attribute on the body element in your application. This means dynamic theme switching is not only possible, but quite trivial to implement! Preset Theme Enhancements Preset themes have a simpler interface for enabling optional features, such as background gradients. This is provided via the enhancements setting in your plugin settings. Set the value to TRUE to opt into these extra features per each theme. New Theme Format Additionally, themes have been migrated to use CSS-in-JS, Tailwind's preferred format for injecting new styles via plugin. Themes still utilize CSS custom properties (aka CSS variables) like before, this merely changes how the theme data is delivered to the plugin. Typescript fans will also enjoy the new CustomThemeConfig type for simple type safety. Using the New Format Whether you're using a preset theme or aiming to migrate a custom theme, we recommend following our full migration guide linked at the top of this page. Note that we've also update the Theme Generator to output themes in the new format. Wintry Theme (#1901) Along with the new theme updates, we've opted to introduce the new \"Wintry\" theme. An elegant blue-focused theme. Register and implement this alongside your favorite Skeleton preset themes. Dynamic Transitions for Components (#1533) Contributor @Mahmoud-zino has devoted a tremendous amount of time to introduce a new dynamic transition system. This allows you to modify or disable transitions for nearly every component in the library! See the new Essentials > Transitions to learn more about how this works. This covers which components are supported, how to configure each transition, how to disable transitions, and of course how to adhere to best practices for accessibility. And yes, this dynamic transition system supports custom Svelte-based CSS or JS Svelte transitions! New Table of Contents Utility (#1832) Skeleton introduced a rudimentary Table of Contents component for our v1 launch, however, this never quite reached our standards of quality. Given this, we've raised this feature to the ground and began anew. With this, a new version of the feature can now be found under Utilities > Table of Contents. The new version features a \"crawler\" action to scan a region of the page for headings, optionally append unique IDs to each heading, passing a reference for each heading to the component. While the updated component provides the visual interface and list of links on the page. Furthermore, we've reworked the scroll mechanisms to allow for native browser URL hashes for deep linking (ex: /some/path#my-deeplinked-section). This means the feature is now supported with or without the use of the Skeleton App Shell. You'll note the default styles are much less opinionated, but you'll find a wider range of customization is possible through the new style props. Tree View Updates (#1779) Contributor @Mahmoud-zino has been hard at work to introduce a number of user-requested features to the new Tree View. This includes a slew of selection methods, utility features, and even a means to generate tree views in a data-driven and recursive manner. Given the scope of the changes we're going to keep the beta label for a little while longer, but very much welcome your feedback on these changes. You can reference pending updates here: https://github.com/skeletonlabs/skeleton/issues/1943 https://github.com/skeletonlabs/skeleton/issues/1944 PurgeCSS Plugin Support While not directly part of the library proper, Skeleton co-maintainer @AdrianGonz97 has launched his initial version of vite-plugin-tailwind-purgecss. If you're not aware, Tailwind can provide a sub-par experience when it comes to purging unused CSS provided by third party Tailwind libraries such as Skeleton. To remedy this, the plugin helps ensure only the styles used in your production application make it to final CSS bundle. While optional, we highly encourage this for all Skeleton projects and have enabled it by default for all Skeleton CLI generated projects going forward. We've also provide a simple guide to help you get started. ⚠️ Breaking Changes: Drawers, Modals, and Toasts Stores (#1831) We've refactored the stores for all singleton-based overlay features to help prevent known SvelteKit SSR issues. The new requirements are covered in our migration guide, and of course you're welcome to reference the updated documentation page for each feature: Drawers: https://www.skeleton.dev/utilities/drawers Modals: https://www.skeleton.dev/utilities/modals Toasts: https://www.skeleton.dev/utilities/toasts Skeleton Data Table Removed (#1822) We've now removed the long-deprecated and unlisted Skeleton Data Table feature. Going forward, Skeleton's official recommendation is to use Svelte Simple Datatables paired with Skeleton's Table Element styles. For any holdouts wishing to keep the legacy data table feature, you can find a zip backup here. Additional Breaking Changes The deprecated whitelist | blacklist props have been removed from the Autocomplete component. Removed all remnants of Skeleton's legacy typography system, which is no longer available in v2. Renamed the Paginator offset to page for better semantics. 🐞 Bugfixes Resolved a bug when Autocomplete allow and deny lists are empty. Resolved a style issue for .bg-hover-primary-token color in dark mode. Prevent Paginator from resetting page value on length change. InputChips now update binded value only once. Updates since the v2 Release Candidate If you installed an early version of the Skeleton v2 release candidate, please be aware we've implemented a number of updates based on your feedback, including: The brand new \"Wintry\" preset theme is now available: Resolved a bug in vite-plugin-tailwind-purgecss breaking styles in production: The new CSS-in-JS theme format now support properties\\\\\\_dark for specifying dark mode overrides to CSS custom properties Theme properties and properties\\\\\\_dark can now be extended with aribtrary CSS custom properties: Scrollbar corners now utilize theme styles: Improvements to the beta Tree View component: The new Table of Components utility now now includes optional prefix and suffix parameters: Added theme styles for the indeterminate checkbox style: File Button now allows you to remove the .btn class style for a completely unstyled display: Improved the documentation around the new store features for Drawers, Modals, and Stores: We've rolled back a change to the Input Chips that introduced a reactivity regression: Added a regionLabel prop to the RadioGroup component A number of issues have been resolved in the Skeleton CLI (aka create-skeleton-app or CSA) We've made various corrections and updates to the Skeleton documentation The documentation website features a slightly updated App Bar with version navigation What's Next? You may reference our current proposals for the v3 roadmap. This provides a sneak peek into what we have planned for the future. The overall goal will be to start breaking up core features, such as Popups and Code Blocks to their own standalone packages. This will allow better implementation of the dependencies these rely on. Likewise we have some major updates planned for themes and the theme generator. Expect to see updates on this in the near future. News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Premium templates now available via GitHub Sponsors!",
    "url": "https://www.skeleton.dev/blog/premium-templates-github-sponsors",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Tuesday, September 26, 2023 3 min read Premium templates now available via GitHub Sponsors! Chris Simmons @SkeletonUI Hey everyone, Chris here from Skeleton Labs. I wanted to make you aware of two important updates dropping today in regards to the Skeleton Store and our GitHub Sponsorships incentives. Skeleton Store We introduced the Skeleton Store in July as a means to help generate funds to support the free and open source Skeleton project. Unfortunately it has fell short of our expectations: Sales have been much lower than anticipated - we clearly missed the mark on pricing and/or promotion We've had difficulty supporting tax laws in countries outside the United States Technical limitations have prevented us from easily maintaining or update the template assets Our goal has always been to provide our premium templates to as many people as possible, while still enabling you to support Skeleton in return. Given this, we've made the tough decision to closing the Skeleton Store. Starting today, the store will no longer be publicly available and will redirect to a page detailing a new manner for obtaining the templates, which we'll discuss below. GitHub Sponsors Update Starting today, we will now be offering all premium website templates (previous provided by the Store) as incentives when you sponsor Skeleton via GitHub Sponsors at the Gold Tier ($20 USD) or higher. Please refer to our new documentation page below covering the details, including a detailed FAQ: https://www.skeleton.dev/docs/sponsorship By providing the templates via sponsorship, this provides a number of benefits to you: The cost of entry for BOTH our Portfolio and Blog templates is now $20 total, rather than $99 each! GitHub Sponsors is available in most countries, which means these are no longer restricted to the United States. While actively sponsoring you will continue to receive updates to the current templates. While actively sponsoring you gain access to any and all new templates added in the future. We can now more easily deliver regular updates and maintenance to the templates themselves. While this does require a monthly sponsorship, you are free to cancel at any time. We do, however, encourage you to sponsor for as long as you're able, because again, the end goal is to help fund the open source project and it's core team members. Skeleton remains available in part because of contributions like these. We hope you enjoy these new changes as we strive to make supporting Skeleton not only more accessible, but also providing better incentives in return. While this is a great start, we are constantly evaluating more options to making sponsorship more exciting and more rewarding. If there are any specific types of templates you would like to see added in the future, or any additional incentives that might help you out, please let us know in the comments! We're building these FOR YOU! Preview the current themes here: Portfolio Template Blog Template Visit our GitHub Sponsors page here: https://github.com/sponsors/skeletonlabs Ko-Fi and Patreon Please note that we do not currently provide access to the premium templates through Ko-Fi or Patreon at this time. However, we're actively investigating options to allow for this. If you prefer to support Skeleton through these services, please continue to do so. However, if you wish to receive the premium templates, please consider migrating your sponsorship over to GitHub Sponsors. Template License Be aware that while Skeleton is free and open source, the templates obtained through our incentive program are not. Each template is provided under the following licensing terms. Sponsorship via GitHub Sponsors grants you the Personal License for these templates. Please take care to avoid cloning or redistribute the templates under this license. However, Skeleton Labs does offer both Commercial and Enterprise licenses with more flexible options for those interested. Please contact admin@skeleton.dev for details. News Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/chat",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Chat Create a custom chat feed or AI prompt interface using features provided by Skeleton and Tailwind. Page Source Usage Demo Contacts Michael Janet Susan Joey Lara Melissa Jane Yesterday @ 2:30pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. Michael Yesterday @ 2:45pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. Jane Yesterday @ 2:50pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. Michael Yesterday @ 2:52pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. + If you wish to review the source for the complete example above, please tap the Page Source button near the top of the page. We'll cover each core principle in the sections below. Layout Columns We recommend using Tailwind's grid column utility classes to define horizontal columns for your layout. (nav) (feed) (online) (nav) (feed) Layout Rows We recommend using Tailwind's grid row utility classes to define vertical layout rows for your layout. (search) (list) (footer) (feed) Esse reiciendis quibusdam molestiae doloremque nisi illo. Quas necessitatibus explicabo quae eligendi expedita praesentium dolorum. Laborum reprehenderit dolorum iure ducimus animi. Qui itaque delectus ab quasi dolorem vitae voluptatum. Iusto aperiam dolore fuga quaerat delectus. Harum dignissimos magnam quod occaecati ducimus. Ullam quia reprehenderit dolor cum adipisci officia rem qui distinctio. Id ab quod odit minus officia. Cumque modi quae esse adipisci labore. Aperiam iure deleniti odit veniam modi. (prompt) Message Feed Within our feed element, we'll generate a feed of messages. Note that we'll replace the pre tags in the next section. host: { \"id\": 0, \"host\": true, \"avatar\": 48, \"name\": \"Jane\", \"timestamp\": \"Yesterday @ 2:30pm\", \"message\": \"Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat.\", \"color\": \"variant-soft-primary\" } guest: { \"id\": 1, \"host\": false, \"avatar\": 14, \"name\": \"Michael\", \"timestamp\": \"Yesterday @ 2:45pm\", \"message\": \"Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat.\", \"color\": \"variant-soft-primary\" } Message Bubbles By mixing Skeleton features with Tailwind styling, we can provided message bubble interfaces for each type of feed post. Jane Yesterday @ 2:30pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. Michael Yesterday @ 2:45pm Repellendus dolor explicabo repellendus quidem. Ad dolores ab natus sapiente voluptatum consequuntur cum facilis quaerat. Nemo tempora consequatur minima magni earum placeat. Prompt We can utilize a Skeleton Input Group to create a custom text prompt. + Send Scroll to Bottom Chat windows typically remain fixed at the bottom of the scrollable pane. This can be triggered on page load and when a new message is added. Use bind:this to bind your scrollable feed element. TYPESCRIPT Copy let elemChat: HTMLElement; HTML Copy (chat) Then use Javascript's scrollTo method to scroll the binded element to the bottom on demand. You may also set smooth scrolling via behavior: 'smooth'. TYPESCRIPT Copy function scrollChatBottom(behavior?: ScrollBehavior): void { elemChat.scrollTo({ top: elemChat.scrollHeight, behavior }); } Add a Message Below we'll cover how to append the message feed with a new message from the host user. Per our above examples, we'll use the same messageFeed data structure. TYPESCRIPT Copy let messageFeed = \\\\\\[ /\\\\\\* ...\\\\\\*/ \\\\\\]; Then bind to the textarea for your prompt in order to capture any message typed by the user. TYPESCRIPT Copy let currentMessage = ''; HTML Copy Here's an example of how we might append a new message to the messageFeed array. TYPESCRIPT Copy function addMessage(): void { const newMessage = { id: messageFeed.length, host: true, avatar: 48, name: 'Jane', timestamp: new date(), message: currentMessage, color: 'variant-soft-primary' }; // Append the new message to the message feed messageFeed = \\\\\\[...messageFeed, newMessage\\\\\\]; // Clear the textarea message currentMessage = ''; // Smoothly scroll to the bottom of the feed setTimeout(() => { scrollChatBottom('smooth'); }, 0); } This can be triggered when the prompt's SEND button is clicked. HTML Copy Send On the Page Demo Layout Columns Layout Rows Message Feed Message Bubbles Prompt Scroll to Bottom Add a Message UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/scroll-containers",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Scroll Containers Create scrolling containers using the scroll snap features from Tailwind. Page Source Usage Demo 1 2 3 4 5 6 7 8 snap-start snap-end snap-center snap-align-none Scroll left or right to demo snapping. Tailwind References Use the following links to learn more about Tailwind's scroll behavior and snap features. Feature Description scroll-behavior Controls the scroll behavior of an element. scroll-margin Controls the scroll offset around items in a snap container. scroll-padding Controls an element's scroll offset within a snap container. scroll-snap-align Controls the scroll snap alignment of an element. scroll-snap-stop Controls whether you can skip past possible snap positions. scroll-snap-type Controls how strictly snap points are enforced in a snap container. Carousels Using Scroll Containers, we can create a fully functional carousel, complete with thumbnail selection. This introduces javascript logic to control the carousel navigation on demand. Multi-Column Attribution: TMDB On the Page Demo Tailwind References Carousels Multi-Column UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/tables",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Tables Provides a set of styles for native HTML table elements. Source Page Source Usage Classes Demo Name Symbol Atomic Number Lithium Li 3 Oxygen O 8 Rubidium Rb 37 Neodymium Nd 60 Neptunium Np 93 Total Elements 5 Elements Wrap a .table-container element around any native HTML table with the .table class applied to create a responsive table. Options Spacing Hover Selection Fit Width Sorting Apply classes .table-compact or .table-comfortable to the table for tighter or looser row spacing. HTML Copy ... See Also A simple data-driven table component. Tables Component → UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/image-layouts",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Image Layouts Various layouts for displaying images. Page Source Usage Demo Masonry Gallery Show the images inside a masonry grid layouts with multiple columns. Attribution Image layout markup and styles provided courtesy Flowbite. Please view our guide to learn more about integrating Flowbite elements and blocks in your Skeleton projects. Fast implementation, a customizable login experience, and flexible user journeys. Try Auth0 for free ADS VIA CARBON On the Page Demo Masonry Gallery Attribution UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/gradient-headings",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Gradient Headings Create gradient-colored heading styles. Page Source Tailwind Gradients Usage Demo Incubate. Recontextualize. Incubate. Can be generated using Tailwind's gradient color stops. Skeleton is not required. Using @apply Create a new class using @apply in your app.postcss global stylesheet. Then apply the following styles. CSS Copy .gradient-heading { @apply bg-clip-text text-transparent box-decoration-clone; /\\\\\\* Direction \\\\\\*/ @apply bg-gradient-to-br; /\\\\\\* Color Stops \\\\\\*/ @apply from-primary-500 via-tertiary-500 to-secondary-500; } HTML Copy Skeleton ======== UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/placeholders",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Placeholders Provides \"skeleton\" placeholders that can display while content loads. Source Page Source Usage Classes Demo Animated Apply the .placeholder class to any div element. Layout Use the Tailwind column and gap classes to adjust column amount and gap spacing. Circular Apply the .placeholder-circle class and set a width to define the diameter. Animated Apply the .animate-pulse utility class provided by Tailwind. HTML Copy On the Page Demo Layout Circular Animated UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/logo-clouds",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Logo Clouds Provides a grid for presenting a set of logos, brands, or sponsors. Source Page Source Usage Classes Demo Twitch YouTube Vimeo bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Multiple Rows Use the Tailwind column and gap classes to adjust column amount and gap spacing. Leverage Optimize Revolutionize Empower Reintermediate Harness Empower Cultivate Styling Items Use Tailwind's arbitrary variant syntax to customize the .logo-item styles. Tailwind classes and variants are supported. Twitch YouTube Vimeo UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/lists",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Lists Provides styles for static list elements. Source Page Source Usage Classes Demo Unordered List Teri Kling ⋮ Carolyn Jerde ⋮ Amanda Adams ⋮ Apply the .list class to the parent. Wrap children with span elements to allow for horizontal spacing. Ordered List 1 Numbered Item A ⋮ 2 Numbered Item B ⋮ 3 Numbered Item C ⋮ Description List Note we insert an extra div element to control flex layout and aid with vertical list item spacing. Item A Description for A ⋮ Item B Description for B ⋮ Item C Description for C ⋮ Navigation List While verbose, we do recommend you use all tags shown below to meet recommended accessibility guidelines. Nav Item A ⋮ Nav Item B ⋮ Nav Item C ⋮ To highlight active state, we recommend conditionally applying a background color to the anchor tag. TYPESCRIPT Copy $: classesActive = (href: string) => (href === $page.url.pathname ? '!bg-primary-500' : ''); HTML Copy \\[Page\\]({href}) UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/chips",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Chips Interactive elements for actions, selection, or filtering. Source Page Source Usage Classes Demo Chip bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Apply .chip to any inline element, such as a span or anchor tag. Action Chips Use chips to create small related set of actions. Like Share State Dynamically modify chip classes to represent state. See the examples below using this technique. TYPESCRIPT Copy $: chipStateClass = (someCondition) ? 'variant-filled-primary' : 'variant-soft-primary'; HTML Copy ... Single Selection red blue green Multiple Selection Vanilla Chocolate Strawberry On the Page Demo Action Chips State Single Selection Multiple Selection UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/cards",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Cards Provides container elements that wrap and separate content Source Page Source Usage Classes Demo Minimal Announcements Skeleton is Awesome! Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam aspernatur provident eveniet eligendi cumque consequatur tempore sint nisi sapiente. Iste beatae laboriosam iure molestias cum expedita architecto itaque quae rem. By Alex On 12/26/2023 bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Headers and Footers Segment your card using the included .card-header and .card-footer classes. Header Content Footer Interactive Anchor cards have an inherent hover style. Add .card-hover to provide an additional 3D hover effect. Hover Me! On the Page Demo Headers and Footers Interactive UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/buttons",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Buttons Provides a robust set of button styles, including preset variants. Source Page Source Usage Classes Demo Button Button bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Use .btn to add basic button styles to any anchor or button element. Replace with .btn-icon for an icon button. Mix buttons with any arbitrary background color or variant style classes, such as .variant-\\\\\\[style\\\\\\]-\\\\\\[themeColor\\\\\\]. Sizes A number of canned size presets are available via .btn-\\\\\\[size\\\\\\]. Default sizing matches btn-md. sm md lg xl Button Groups Groups related anchors or buttons. Pairs with any variant style. Horizontal and vertical options are provided. Months Days Years Months Days Years SvelteKit Link Options While using native anchor elements, you can take advantage of SvelteKit's Link Options such as a prefetch. HTML Copy \\[Button\\](/) On the Page Demo Sizes Button Groups SvelteKit Link Options UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/breadcrumbs",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Breadcrumbs Displays the current navigation hierarchy. Source Page Source Usage Classes Demo Skeleton › Elements › Breadcrumbs Separators Replace the contents of the .crumb-separator element with an icon or any valid unicode symbol. For accessibility, use aria-hidden to hide this element from screen readers. Home / Blog / Article Icons Add your icon before or after your anchor tag within the .crumb list item. › › Current Mixed Media Mix and match buttons, avatars, and text. Users › › Profile Non-Responsive Breadcrumbs are responsive by default and will auto-hide all but the last two crumb elements on small screens. If you wish to disable this behavior, replace .breadcrumb with .breadcrumb-nonresponsive. HTML Copy ... Using #each Loops Use the following technique to ensure the current item is formatted properly and prevent an extra separator at the end. TYPESCRIPT Copy const myBreadcrumbs = \\\\\\[ { label: 'Foo', link: '/foo' }, { label: 'Bar', link: '/bar' }, { label: 'Fizz', link: '/fizz' }, { label: 'Buzz', link: '/buzz' } \\\\\\]; HTML Copy {#each myBreadcrumbs as crumb, i} {#if i < myBreadcrumbs.length - 1}1. \\[{crumb.label}\\]({crumb.link}) 2. › {:else}3. {crumb.label} {/if} {/each} On the Page Demo Separators Icons Mixed Media Non-Responsive Using #each Loops UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/badges",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Badges Provides a robust set of non-interactive badge styles. Source Page Source Usage Classes Demo Badge bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Icon Badge Replace .badge with .badge-icon for a badge based on an icon. Overlapping Use Tailwind styles to overlap another element with an Icon Badge. 2 AB On the Page Demo Icon Badge Overlapping UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/forms",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Forms Pair with the Tailwind Forms plugin to style various input fields. Source Page Source Tailwind Forms Plugin Usage Classes Demo Input Select Option 1 Option 2 Option 3 Option 4 Option 5 Textarea Unlike other UI libraries, Skeleton relies heavily on native HTML form fields. This provides the best user experience and optimal accessibility. Note that form field styling is opt-in, which means a class must be applied to each element. Install the Forms Plugin The Tailwind Forms plugin normalizes form field styles, making them easier to customize and providing some rudimentary styles. See Tailwind's video tutorial for more information. TERMINAL Copy npm install -D @tailwindcss/forms Prepend the Tailwind Forms plugin to your tailwind.config.\\\\\\[ts|js\\\\\\], JAVASCRIPT Copy import forms from '@tailwindcss/forms'; export default { //... plugins: \\\\\\[ forms, //... \\\\\\], }; Labels Label Input Input (text) Input (text) Input (readonly) Input (disabled) Input (email) Input (email, multiple) Input (password) Input (search) Input (date) Input (datetime-local) Input (month) Input (number) Input (time) Input (week) Input (tel) Input (url) Files Input (file) Input (file, multiple) Textarea Textarea Select Select Option 1 Option 2 Option 3 Option 4 Option 5 Select (size) Option 1 Option 2 Option 3 Option 4 Option 5 Select (multiple) Option 1 Option 2 Option 3 Option 4 Option 5 Checkboxes Option 1 Option 2 Option 3 Radio Groups Option 1 Option 2 Option 3 Range Color Input Groups Create a horizontal group of related form fields. Groups support most input types and select elements, but not all. The column sizes are grid-based, via Tailwind's arbitrary column syntax. Descriptive segments (on either side) allow for div, button, and anchor (a) elements. The .input-group-divider class applies vertical divider lines. The .input-group-shim class applies subtle shading to a segment, to draw more attention. Website https:// Amount USD CAD EURO Username Search Submit Variants Skeleton includes a forms variant inspired by Material Design. Use this as a reference for building your own variant classes. Input (text) Input (password) Select Option 1 Option 2 Option 3 Option 4 Option 5 Validation Classes Skeleton provides a set of classes for indicating form validation. These must come last in a group of class values. They are compatible with the variant above. .input-success .input-warning .input-error Browser Support Please be aware that not all native HTML form fields work consistently across browsers or operating systems. We strongly recommend cross-device/OS/browser testing to ensure compatibility for your target audience. On the Page Demo Install the Forms Plugin Labels Input Files Textarea Select Checkboxes Radio Groups Range Color Input Groups Variants Validation Classes Browser Support UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/alerts",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Alerts Displays customizable alerts to attract attention and provide critical actions. Source Page Source Usage Classes Demo Warning Earum doloribus dicta explicabo minima ex impedit iste. Beatae labore saepe et tempora inventore ex totam. Dolores ratione facere nesciunt dolorem explicabo. Action bg-initial !bg-transparent variant-filled variant-filled-surface variant-filled-primary variant-filled-secondary variant-filled-tertiary variant-filled-success variant-filled-warning variant-filled-error variant-ghost variant-ghost-surface variant-ghost-primary variant-ghost-secondary variant-ghost-tertiary variant-ghost-success variant-ghost-warning variant-ghost-error variant-soft variant-soft-surface variant-soft-primary variant-soft-secondary variant-soft-tertiary variant-soft-success variant-soft-warning variant-soft-error variant-ringed variant-ringed-surface variant-ringed-primary variant-ringed-secondary variant-ringed-tertiary variant-ringed-success variant-ringed-warning variant-ringed-error bg-gradient-to-br variant-gradient-primary-secondary bg-gradient-to-br variant-gradient-secondary-tertiary bg-gradient-to-br variant-gradient-tertiary-primary bg-gradient-to-br variant-gradient-secondary-primary bg-gradient-to-br variant-gradient-tertiary-secondary bg-gradient-to-br variant-gradient-primary-tertiary bg-gradient-to-br variant-gradient-success-warning bg-gradient-to-br variant-gradient-warning-error bg-gradient-to-br variant-gradient-error-success bg-gradient-to-br variant-gradient-warning-success bg-gradient-to-br variant-gradient-error-warning bg-gradient-to-br variant-gradient-success-error Create an element with the .alert class. Wrap the alert in a Svelte #if statement to hide it or make it visible. Sections Message Content Use the .alert-message to create a vertical set of text information that fills the available width of the alert. HTML Copy ### (title) {message} HTML Copy ### (title) Action Buttons Use the .alert-actions to create a trailing area to house interactive action buttons. HTML Copy (buttons) Animation Svelte Transitions can provide smooth transition animations when the alert state changes. HTML Copy (content) UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton + Tailwind UI",
    "url": "https://www.skeleton.dev/blog/skeleton-plus-tailwind-ui",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 21, 2023 6 min read Skeleton + Tailwind UI Chris Simmons @SkeletonUI Skeleton provides an ever expanding set of elements, components, and utility features. However, you may occasionally may find it valuable to mix and match elements from other UI libraries. This includes Tailwind UI, an extensive set of elements created by the makers of Tailwind CSS. In this guide we'll cover how to combine Skeleton and Tailwind UI to get the best of both worlds! 👍 This guide has been updated for Skeleton v2 or higher. You don't have to choose! Create a New Skeleton Project To begin, we'll create a new Skeleton project using the Skeleton CLI: npm create skeleton-app@latest skeleton-plus-tailwindui - Choose \"Yes, using Typescript syntax\" - Select \"No\" for ESLint, Prettier, Playwright, Vitest, Inspector - Hit \"Enter\" to skip Tailwind plugins - Select the default \"Skeleton\" theme - Select the \"Bare Bones\" template cd skeleton-plus-tailwindui npm install npm run dev -- --open Open the project in your text editor of choice and ensure your local dev server is running. You'll be met with some basic styles and welcome message: The home page in our minimal Skeleton app. What is Tailwind UI? Tailwind UI - Official Tailwind CSS Components & Templates Beautiful UI components and templates by the creators of Tailwind CSS. Official Tailwind CSS Components & Templates Tailwind UI is an obvious choice for new UI features, as it's built and maintained by the creators of Tailwind CSS. They offer many different elements (called Components). While Tailwind charges for most of this content, they do offer a handful of freebies. For this guide we'll begin using the \"Header banner\" sample found on the Tailwind UI Banner section as shown below. Select \"HTML\" then tap the \"Code\" button near the top-right to view the markup. Copy the HTML markup for this element, then paste this into your homepage template in /src/routes/+page.svelte. Feel free to replace all current content. Your new banner will appear at the top of the page. While this looks great by default, there's a few items we'll need to address: It's hardcoded to Tailwind's Indigo color, rather than using your theme. Theme settings such as border radius are not currently utilized. Button styles are hardcoded inline, with minor style issues. The text color may not always adhere to accessible color ratios. The element is not responsive to light/dark mode by default. Theme Color We'll begin by fixing the theme colors. Most text editors include a multi-select feature - for VS Code select the first reference to indigo in line 1 (part of bg-indigo-500) then use control/command+shift+L to select all other instances within the markup. Then type warning to update these values to your theme color. When you save, you'll see the banner is now a golden yellow. Skeleton supports all color values from 50-900, so even the darkened shade behind the megaphone icon will update as expected. Using Design Tokens The element surrounding the megaphone icon is rounded, however, depending on your theme this may not match your theme's --theme-rounded-base setting. Thankfully Skeleton provides a set of Design Token classes that can help. Locate the span that surrounds the megaphone icon, then update it to use the .rounded-token design token class: This change is very subtle, but will be more prominent on other themes: The icon element now using .rounded-container-token To ensure this is working, you can open your root layout in /src/routes/+layout.svelte. Then change the theme from theme-skeleton.css to theme-rocket.css or theme-modern.css and save. The border radius setting for these themes should be much more obvious. NOTE: Be sure to revert back to theme-skeleton.css when done! Skeleton Button Element By default, Tailwind UI generates their own UI button styles using utility classes inline. This is great, but you may find it easier to maintain using Skeleton's flexible Button element styles. Within your banner markup, look for the button using an Anchor tag and containing the text \"Learn more\". \\[Learn more\\](/) Then replace it with a Skeleton's button, using the variant filled style: \\[Learn more\\](/) This implements a simple button that respects your theme settings. Color Contrast and Accessibility By default the text color for the banner text is hardcoded as white text. This is fine for the indigo background, but may be hard to see on the new yellow background. Look for the paragraph tag containing the text \"Big News!\", then change the class from text-white to Skeleton's text-on-warning-token design token. This will use the --on-warning color from your Skeleton theme. Additionally we may wish to apply a similar change to the SVG \"X\" close icon on the right. Change the SVG class from text-white to text-on-warning-token. Supporting Dark Mode Tailwind UI elements only implement base (read: light mode) styles. To easily toggle Tailwind's dark mode we'll use Skeleton's Light Switch utility. Import the component into /src/routes/+page.svelte, then add it to your homepage route template: import { LightSwitch } from '@skeletonlabs/skeleton'; Note the wrapping markup and styles. We can now toggle the Light Switch to toggle between light/dark modes. The app background and Skeleton buttons will automatically respond as we toggle between modes. Use Tailwind's dark: modifier to adjust other classes as desired. For example, we can change the primary background in the opening div element like so: This provides a lighter background color for our base light mode styles. Testing Themes To ensure our new element is fully prepared to utilize any Skeleton theme, let's try our a few of the preset options available to us. Open your tailwind.config.\\\\\\[ts|js\\\\\\] in the root of your project, and register one or more of the following preset themes as follows: plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ \"skeleton\", \"wintry\", \"modern\" \\\\\\] } }) \\\\\\] Choose from any of the following options: skeleton wintry modern rocket seafoam vintage sahara hamlindigo gold-nouveau crimson Next, open /src/app.html and set the active theme using the data-theme attribute. Your new banner should respect all theme colors and operate in both light and dark mode as expected. Previewing the final design using the theme-crimson.css theme in dark mode. Additional Resources While Tailwind UI and Flowbite provide excellent options for extending your UI feature set, we've linked to some other useful resources below: https://tailwindcomponents.com/ https://tailblocks.cc/ https://merakiui.com/ https://www.material-tailwind.com/ Project Source Code Find the source code for this project on Github: blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials This directory contains a series of tutorial projects created as part of the Skeleton blog. - blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials GitHubskeletonlabs Tutorials Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/typography",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Typography Provides a variety of globally scoped typographic styles. Keeps common tags styled consistently throughout an app. Source Page Source Usage Headings Skeleton H1 Skeleton H2 Skeleton H3 Skeleton H4 Skeleton H5 Skeleton H6 Paragraph The quick brown fox jumps over the lazy dog. Anchor Anchor Blockquote Lorem ipsum, dolor sit amet consectetur adipisicing elit. Expedita cupiditate dolores dignissimos maiores doloremque fugiat, dolore doloribus nisi, repellendus mollitia nostrum, commodi a minus aperiam deleniti. Velit rerum ut tempora! Pre-formatted Text The quick brown fox jumps over the lazy dog. Code .myExampleClass Keyboard Press ⌘ + C to copy. Insertion / Deletion Always Gonna Give You Up Never Gonna Give You Up On the Page Headings Paragraph Anchor Blockquote Pre-formatted Text Code Keyboard Insertion / Deletion UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton Blog — Skeleton + Flowbite",
    "url": "https://www.skeleton.dev/blog/skeleton-plus-flowbite",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Blog › Article Monday, August 21, 2023 9 min read Skeleton + Flowbite Chris Simmons @SkeletonUI Skeleton provides an ever expanding set of elements, components, and utility features. However, you may occasionally may find it valuable to mix and match elements from other UI libraries. This includes open source UI libraries such as Flowbite. In this guide we'll cover how to combine Skeleton and Flowbite to get the best of both worlds! 👍 This guide has been updated for Skeleton v2 or higher. You don't have to choose! What is Flowbite? Flowbite - Tailwind CSS component library Get started with the most popular open-source library of interactive UI components built with the utility classes from Tailwind CSS Tailwind CSS component libraryThemesberg Zoltán and the Flowbite team have created an extensive open-source library that includes over 450+ UI elements (called components). By pairing these with Skeleton you open the door to a tremendous number of valuable UI assets. Flowbite vs Flowbite Svelte Before we get started, you should know the difference between Flowbite's two offerings. Flowbite is the core library of elements generated with HTML and Tailwind's utility classes, while Flowbite Svelte is a Svelte-focused component library built using these Flowbite elements. The latter is comparable to Skeleton. Unfortunately Flowbite Svelte and Skeleton's Tailwind plugins appear to modify similar settings and currently do not play well together. For this guide, we will be focusing purely on the core library elements. Create a New Skeleton Project To begin, we'll create a new Skeleton project using Skeleton CLI: npm create skeleton-app@latest skeleton-plus-flowbite - Choose \"Yes, using Typescript syntax\" - Select \"No\" for ESLint, Prettier, Playwright, Vitest, Inspector - Hit \"Enter\" to skip Tailwind plugins - Select the default \"Skeleton\" theme - Select the \"Bare Bones\" template cd skeleton-plus-flowbite npm install npm run dev -- --open Open the project in your text editor of choice and ensure your local dev server is running. You'll be met with some basic styles and welcome message: The home page in our minimal Skeleton app. Supporting Dark Mode Flowbite provides great support for both light and dark mode styles for most elements.  To easily toggle Tailwind's dark mode we'll use Skeleton's Light Switch utility. Import the component into /src/routes/+page.svelte, then add it to your homepage route template. Feel free to replace all content within this page. import { LightSwitch } from '@skeletonlabs/skeleton'; This provides a simple switch for toggling between light and dark modes. Flowbite's Timeline Element You can browse the full list of the available elements (called components) on Flowbite's website. For this guide we'll focus on the Vertical Timeline element. A useful feature not currently available in Skeleton. Tailwind CSS Timeline - Flowbite Get started with the responsive timeline component to show data in a chronological order with support for multiple styles, sizes, and variants FlowbiteThemesberg The Timeline element presented on the Flowbite website. Additionally we'll implement this feature using custom Svelte components. This will encourage reusability and reduce the number of changes needed within the HTML template. Getting Started View the component, copy the HTML markup, then create a new component in your project in /src/lib/Timeline/Timeline.svelte. When ready, paste the markup into this new component file. Next, let's place the new component on our homepage. Open /src/routes/+page.svelte, import the component in your Script tag, then append the component at the very bottom of the file, below the Light Switch. import Timeline from '$lib/Timeline/Timeline.svelte'; We've included a wrapping element with padding. The Flowbite timeline should now be visible on the homepage. As with our Tailwind UI banner, there's a few changes we'll want to implement: Currently the contents of the three timeline points are hardcoded into our component, making it hard to add or remove additional timeline points. Many colors are hardcoded and do not change according to the Skeleton theme. We'll want to replace the button and badges with Skeleton equivalents. We'll make minor adjustments to the layout and typography. Unlike Tailwind UI, Flowbite's timeline elements do respond to Tailwind's light/dark mode. However, some of the default styles might be hard to see in light mode, so we'll cover this as we go. Dividing Parent and Child Components If we review our component markup we'll see it's made up of a wrapping ordered list ol that contains a set of list items li. To start, let's simplify things by removing the second and third timeline points, the list items li and their contents. This will leave the most fleshed out option at the top: Only this single timeline point should remain. Next, let's divide our component into two parts, the parent and child elements. Child Component (TimelineItem.svelte) Create a new Svelte component in /src/lib/TimelineItem.svelte. Cut the full markup of the the current list item li and it's contents, then paste this into the new component file you just created. 1. ... Parent Component (Timeline.svelte) Return to our parent Timeline.svelte and implement a default Svelte slot between the open and close of the ol tags, where the li elements resided: We'll also quickly modify the ol border color to match our theme: This provides a left border color that responds to your theme and light/dark mode. TimelineItem Props & Slots Open TimelineItem.svelte again and let's abstract a few things to Svelte props and slots. For brevity, we've handled this for you. Replace the entire contents of TimelineItem.svelte with the following: export let title: string = '(Title)'; export let timestamp: string = '(Timestamp)'; export let description: string = '(Description)'; export let badgeText: string = '(Badge)';2. ♥ ### {title} {#if badgeText} {badgeText} {/if} Released on {timestamp} {description} {#if $$slots.default} {/if} Take a moment to review these changes. Implement Multiple Children We can now implement multiple instances of our TimelineItem component on our homepage with unique values. Import the component and add the following to your /src/routes/+page.svelte homepage route: import TimelineItem from '$lib/Timeline/TimelineItem.svelte'; Download ZIP Note how we set badgeText and added a new Skeleton button in the first item. We now see three unique instances on our timeline. Badge and Icons While this is starting to look much better, we should take a moment to implement a Skeleton badge, and ensure our icons utilize our theme colors. Open TimelineItem.svelte and make the following changes: Badge Styles: {badgeText} {badgeText} This will apply Skeleton's badge styles with a soft primary background. Icon Styles: ... ... This will ensure our timeline icons use Skeleton's theme colors. Our updated badge and icon styles. We can quickly resolve that spacing issue between the icon and title by adjusting the li classes in TimelineItem.svelte. 9. Adjust Typography In most cases you can rely on Skeleton's default typography settings, which means we can strip many of Flowbite's inline styles. Let's adjust a few settings now. Adjust the markup and classes for your title region, noting the addition of the span element around the title. ### {title} {#if badgeText} {badgeText} {/if} Note the addition of the wrapping span around the title. Adjust the time element for our timestamp: Released on {timestamp} Then finally the paragraph element styles: {description} The final results are shown with all changes is shown below. Congrats, you now have a reusable timeline component thanks to Flowbite + Skeleton! Testing Themes To ensure our new element is fully prepared to utilize any Skeleton theme, let's try our a few of the present options available to us. Open your tailwind.config.\\\\\\[ts|js\\\\\\] in the root of your project, and register one or more of the following preset themes as follows: plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ \"skeleton\", \"wintry\", \"modern\" \\\\\\] } }) \\\\\\] Choose from any of the following options: skeleton wintry modern rocket seafoam vintage sahara hamlindigo gold-nouveau crimson Next, open /src/app.html and set the active theme using the data-theme attribute. Your new timeline component should respect all theme colors and operate in both light and dark mode as expected. Previewing the final design using the theme-crimson.css theme in dark mode. Additional Resources While Tailwind UI and Flowbite provide excellent options for extending your UI feature set, we've linked to some other useful resources below: https://tailwindcomponents.com/ https://tailblocks.cc/ https://merakiui.com/ https://www.material-tailwind.com/ Project Source Code Find the source code for this project on Github: blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials This directory contains a series of tutorial projects created as part of the Skeleton blog. - blog-tutorials/alternative-ui-elements at master · skeletonlabs/blog-tutorials GitHubskeletonlabs Tutorials Scroll to Top ↑ UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/tauri",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Tauri The following guide will cover the basics for generating a new Tauri app using both SvelteKit and Skeleton. Tauri is a toolkit that helps developers make applications for the major desktop platforms - using virtually any frontend framework in existence. The core is built with Rust, and the CLI leverages Node.js making Tauri a genuinely polyglot approach to creating and maintaining great apps. Prerequisites Before you begin, make sure to install all required Rust language and system dependencies per the guide below. Tauri Prerequisites Guide Video Guide Optional For visual learners, the following video will guide you through the process of integrating Tauri and SvelteKit. You can then follow these instructions to manually add Skeleton to your project. Manual Guide Setup Skeleton To begin, we'll use the Skeleton CLI to scaffold a new project. This will automatically install SvelteKit, Tailwind, and Skeleton. If you're using an existing SvelteKit project, please refer to our manual install instructions. TERMINAL Copy npm create skeleton-app@latest skeleton-tauri-app - Enable Typescript when prompted (recommended) cd skeleton-tauri-app npm install Prepare Your App Since Tauri will use Rust as the backend, we'll adjust SvelteKit to use static site generation (SSG). This makes use of SvelteKit's adapter-static. TERMINAL Copy npm install --save-dev @sveltejs/adapter-static Locate svelte.config.\\\\\\[ts|js\\\\\\] in the root of your project, then switch from adapter-auto to adapter-static. JAVASCRIPT Copy import adapter from '@sveltejs/adapter-static'; import { vitePreprocess } from '@sveltejs/kit/vite'; /\\\\\\*\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\*/ const config = { preprocess: \\\\\\[vitePreprocess({})\\\\\\], kit: { adapter: adapter() } }; export default config; Open your root layout, found in /src/routes/+layout.\\\\\\[ts|js\\\\\\], then append the following two lines at the top of the script tag. This disables server-side rendering (SSR) while enabling prerendering. JAVASCRIPT Copy export const ssr = false; export const prerender = true; Install Tauri Tauri offers a friendly CLI to easily automate the install process. Run the following command in your terminal. TERMINAL Copy npm install --save-dev @tauri-apps/cli Locate package.json in the root of your project, open this and append the following script command. JSON Copy \"scripts\": { \"tauri\": \"tauri\" } Run the following command in your terminal. Please take care to use the recommendations settings provided below. TERMINAL Copy npm run tauri init 1 What is your app name? Set the desired name of the generated bundle 2 What should the window title be? Set the desired title of the main window 3 Where are your web assets (HTML/CSS/JS) relative to /src-tauri/tauri.conf.json? Set the default to ../build 4 What is the URL of your dev server? SvelteKit's default is http://localhost:5173 5 What is your frontend dev command? If using NPM, set this to npm run dev 6 What is your frontend build command? If using NPM, set this to npm run build Verify Install Once installed, look for /src-tauri in the root of your project. This houses the following critical Tauri assets: Cargo.toml - similar to package.json, but for Rust. tauri.conf.json - the Tauri configuration file. src/main.rs - the entry point of your Rust backend. Run the App Use the following command to start your Tauri application. TERMINAL Copy npm run tauri dev Starter Template If you're looking for a quick start or reference project, please refer to our opinionated template on GitHub. View Starter Template Learn More Official Tauri Documentation → The Rust Book → On the Page Prerequisites Video Guide Manual Guide Setup Skeleton Prepare Your App Install Tauri Verify Install Run the App Starter Template Learn More UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/contributing",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Contributing Thank you for your interest in contributing to Skeleton. We ask that you please review the sections below in full before submitting your first pull request. Getting Started Concepts and Best Practices New to open source? Read this detailed guide covering the basics. Read Guide Step-by-Step Guide Follow a guided tour showing you how to make your first contribution. Read Guide Contributing to Skeleton Requirements Read Skeleton's requirements and review our recommended workflow process. Read Guide Style Guide View our recommended conventions for writing code, naming properties, and more. Read Guide Sveld for Components Learn how we use Sveld to automatically document components. Read Guide Documentation Pages Learn how to properly document features within Skeleton. Read Guide On the Page Getting Started Contributing to Skeleton UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/purgecss",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri PurgeCSS This guide covers vite-plugin-tailwind-purgecss, a simple Vite plugin that thoroughly purges excess CSS via PurgeCSS. While optional, this is highly recommended if you wish to minimize your production CSS bundle size. View on GitHub Introduction Motivation Tailwind UI component libraries like Skeleton and Flowbite provide a number of benefits, but come with an important caveat - Tailwind generates classes for all imported components, regardless if they are used in the project or not. This leads to a larger than necessary CSS bundle. Unfortunately this is a limitation of how Tailwind implements it's Content Configuration. Tailwind searches through all files specified in content, uses a regex to locate possible selectors, then generates their respective classes. The key thing to note is this occurs before the build process, meaning there's no CSS treeshaking or purging involved against your production file assets. How it Works Ideally, we would like to limit selectors to only those used within your project. We accomplish this by analyzing the emitted Javascript chunks generated by Rollup, which includes only the modules that are actually used in your project, then it extracts the utilized selectors. From there, we can pass along the selectors to PurgeCSS for final processing. Usage Last updated for v0.1.0. View GitHub for the the latest instructions. Installation TERMINAL Copy npm i -D vite-plugin-tailwind-purgecss Add to Vite Implement the following in vite.config.ts, found in the root of your project. TYPESCRIPT Copy import { purgeCss } from 'vite-plugin-tailwind-purgecss'; const config: UserConfig = { plugins: \\\\\\[sveltekit(), purgeCss()\\\\\\], }; Safelisting To denote selectors that shouldn't be purged, simply add them via safelist in your vite.config.ts. TYPESCRIPT Copy import { purgeCss } from 'vite-plugin-tailwind-purgecss'; const config: UserConfig = { plugins: \\\\\\[ sveltekit(), purgeCss({ safelist: { // any selectors that begin with \"hljs-\" will not be purged greedy: \\\\\\[/^hljs-/\\\\\\], }, }), \\\\\\], }; Alternatively, can safelist selectors directly within your stylesheets using special comments. CSS Copy /\\\\\\*! purgecss start ignore \\\\\\*/ h1 { color: red; } h2 { color: blue; } /\\\\\\*! purgecss end ignore \\\\\\*/ You may also safelist selectors directly within each declaration block. CSS Copy h3 { /\\\\\\*! purgecss ignore current \\\\\\*/ color: pink; } See the PurgeCSS documentation for additional configuration settings. Attribution This plugin is provided courtesy of Skeleton co-maintainer Adrian (aka CokaKoala). On the Page Introduction Motivation How it Works Usage Installation Add to Vite Safelisting Attribution UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/figma",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Figma A community-maintained Figma design kit for Skeleton. View on Figma Community Introduction The Figma kit is designed to match the structure of the components and properties in Skeleton. This can assist both designers and developers in create and mocking stunning user interfaces. Features • Made with Autolayout • Theme support with variables • Composable with slots • Tutorial (limited to Alerts at the moment) • Playground Attribution This Figma UI kit is maintained by Micha and Bohdan. If you have any questions or feedback, please feel free ping these members on the Skeleton community discord via @Micha or @Bodya. On the Page Introduction Features Attribution UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/transitions",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Transitions Skeleton provides a simple interface for modifying Svelte component transitions. This supports Svelte-provided transitions, such as: fade, blur, fly, slide, and scale. As well as custom CSS and Javascript transitions. Transitions Look for this indicator on each component page. If present, custom transitions are supported. Properties Provide the transition and transition parameters as follows. Transition In HTML Copy Transition Out HTML Copy Parameters You can modify parameters for both the default in and out transitions. HTML Copy Disable Transitions To disable all transitions for a single component, set transitions to false. This will affect both the in and out transitions. HTML Copy Non-Supported Transitions Note that Svelte provides special crossfade and draw transitions. However these work and operate in a different manner than standard transition such as fade and fly. These are not supported within the dynamic transition system at this time. Reduced Motion To ensure a better experience for users who are sensitive to motion or have vestibular disorders, Skeleton's default behavior is to disable all transitions when users enable prefers-reduced-motion in their browser settings. Force Enable For components with subtle transitions, you may choose to override this behavior by applying a property of transitions={true} to the component. We encourage you to use this setting with caution though. Store You may utilize prefersReducedMotionStore to access the user's preferred motion setting. TYPESCRIPT Copy import { prefersReducedMotionStore } from '@skeletonlabs/skeleton'; const userMotionPreference = $prefersReducedMotionStore; On the Page Properties Transition In Transition Out Parameters Disable Transitions Non-Supported Transitions Reduced Motion Force Enable Store UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/tokens",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Tailwind Design Tokens The Skeleton Tailwind plugin provides a set of utility classes that adjust to your theme settings. Source Page Source Skeleton utilizes a simple but powerful design token system to implement theme settings in elements and components. These represent the defaults for most elements and components, which means they auto-adapt based on your theme with minimal configuration out of the box. Best of all you can use these within your custom components as well! Learn More We recommend this conference talk by Brad Frost if you would like to learn more about the design token concept. Theme Flow Below is a visualization of how Skeleton uses your theme to control your UI. We start with your theme's CSS variables, then construct design token classes based on these variables, next components utilize these design token classes, then finally you construct your pages with sets of elements and components. Color Pairing Chart Below is a visualization of color pairings in Skeleton. This is how we balance light and dark mode for your themes in practice. For example, the surface color swatch 50 is the lightest available color, so we utilize that for your light theme background color. While swatch 900 is the darkest, so vice versa. These two colors form a pair. We then generate design token classes for .bg-surface-50-900-token and bg-surface-900-50-token that automatically switch between these in light/dark mode respectively. Backgrounds Class Values Description .bg-\\\\\\[color\\\\\\]-backdrop-token Theme Colors Background styles for modal backdrops. .bg-\\\\\\[color\\\\\\]-hover-token Theme Colors Background styles for hoverable elements. .bg-\\\\\\[color\\\\\\]-active-token Theme Colors Background styles for active selected elements. .bg-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Pairing values can be 50-900 or 900-50 format. Border Radius Class Values Description .rounded-token Border radius for small elements: buttons, badges, chips, etc. .rounded-\\\\\\[corner\\\\\\]-token tl | tr | bl | br Corner border radius styles for small elements. .rounded-container-token Border radius for large elements, such as cards and textareas .rounded-\\\\\\[corner\\\\\\]-container-token tl | tr | bl | br Corner border radius styles for large elements. Borders Class Values Description .border-token Implements your theme's configured border size. .border-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Pairing values can be 50-900 or 900-50 format. Divide Utility for controlling the border color between elements. Class Values Description .divide-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Implements a text-decoration color. Pairing values can be 50-900 or 900-50 format. SVG Fill Color Class Values Description .fill-token The default responsive light/dark mode fill color. .fill-on-\\\\\\[color\\\\\\]-token Theme Colors Provides an accessible foreground color. Rings Utilities for creating outline rings with box-shadows. Class Values Description .ring-outline-token Creates a subtle transparent outline like Card elements. .ring-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Pairing values can be 50-900 or 900-50 format. Text Class Values Description .font-heading-token Implements your theme's configured heading font family. .font-token Implements your theme's configured base font family. .text-token Implements your theme's configured base text color. .text-on-\\\\\\[color\\\\\\]-token Theme Colors Provides an accessible foreground color. .text-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Pairing values can be 50-900 or 900-50 format. Text Decoration Class Values Description .decoration-\\\\\\[color\\\\\\]-\\\\\\[pairings\\\\\\]-token Theme Colors Color Pairing Pairing values can be 50-900 or 900-50 format. Accent Class Values Description accent-\\\\\\[color\\\\\\]-token Theme Colors Provides an input accent-color. Segment with advanced AI tools for up to 141% more revenue ADS VIA CARBON On the Page Learn More Theme Flow Color Pairing Chart Backgrounds Border Radius Borders Divide SVG Fill Color Rings Text Text Decoration Accent UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/variants",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Tailwind Variants Canned styles available to easily customize elements, components, and more. Source Page Source Usage Implement using .variant-\\\\\\[style\\\\\\]-\\\\\\[color\\\\\\]. Automatically applies an accessible text or SVG fill color. HTML Copy primary Filled Primary Secondary Tertiary Success Warning Error Surface Ghost Primary Secondary Tertiary Success Warning Error Surface Soft Primary Secondary Tertiary Success Warning Error Surface Ringed Primary Secondary Tertiary Success Warning Error Surface Glass Adds a frosted glass style effect. Perfect for overlapping busy or animated backgrounds. Primary Secondary Tertiary Success Warning Error Surface Image Source Gradients Provides two-toned gradient combinations. Requires a direction, such as bg-gradient-to-br (bottom-right). Primary-Secondary Secondary-Tertiary Tertiary-Primary Secondary-Primary Tertiary-Secondary Primary-Tertiary Success-Warning Warning-Error Error-Success Warning-Success Error-Warning Success-Error For more options see the Tailwind Docs → On the Page Usage Filled Ghost Soft Ringed Glass Gradients UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/styling",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Styling This covers basic techniques for styling Skeleton components. View our comprehensive guide to learn more. Via Component Props This is the recommended manner to style most components. Each component provides a set of style props (read: properties) that allow you to override the default style classes. See a list of available options under the \"Props\" tab per each feature in Skeleton. HTML Copy Skeleton TIP: You may provide multiple utility classes per each prop, as well as use variations such as dark:bg-green-500. Via the Class Attribute If a style prop is not available, you can still provide arbitrary utility classes via a standard class attribute. These styles are always applied to the parent element in the component template. HTML Copy Skeleton Tailwind's Arbitrary Variants If you need to target deeper than the parent element, we recommend using Tailwind's arbitrary variant syntax. HTML Copy ... This will affect the Parent > .foo-label element and apply a Tailwind class of p-4. Global Styles Overrides Skeleton components include selector classes, such as .avatar-image within the Avatar component. Please note that selector classes are always the first listed. HTML Copy ... Use these selector classes to target global style overrides to all instances of this feature in your global stylesheet. CSS Copy .avatar-image { @apply border-2 border-red-500; } In some cases you may need to use ! important or style light and dark mode variants to give precedence. On the Page Via Component Props Via the Class Attribute Tailwind's Arbitrary Variants Global Styles Overrides UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/themes",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Themes Skeleton leans into Tailwind's best practices when implementing themes. This includes support for color opacity and dark mode. Themes also enable Skeleton's design tokens system. CSS Custom Properties Skeleton themes are generated using a number of CSS Custom Properties, also known as as CSS variables. CSS Property Description --theme-font-family-base Set the font family for your default base text. --theme-font-family-heading Set the font family for your heading text. --theme-font-color-base Set the default text color for light mode. --theme-font-color-dark Set the default text color for dark mode. --theme-rounded-base Set the border radius for small elements, such as buttons, inputs, etc. --theme-rounded-container Set the border radius for large elements, such as cards, textfields, etc. --theme-border-base Set the default border size for elements, including inputs. --on-\\\\\\[color\\\\\\] Set an accessible overlapping text or fill color per each theme color. --color-\\\\\\[color\\\\\\]-\\\\\\[shade\\\\\\] Defines each color and shade value for your theme. Overwriting Properties Similar to variables in other languages, CSS properties can be overwritten. By adding the following snippet in /src/app.postcss, you can overwrite the base and container border radius styles for your active theme. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-rounded-base: 20px; --theme-rounded-container: 4px; } Likewise, you can override base and heading font family settings as shown below. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-font-family-base: 'MyCustomFont', sans-serif; --theme-font-family-heading: 'MyCustomFont', sans-serif; } For deeper customization, consider cloning Skeleton's preset themes, modifying each as desired, then implementing as a custom theme. Follow the theme generator implementation guide for more information. CSS-in-JS Format New in v2 Skeleton now defines theme settings via the CSS-in-JS format. This allows themes to be easily registered within the Skeleton Tailwind plugin, rather than relying on additional stylesheet imports. Tailwind Plugin Settings New in v2 Themes are configured via Skeleton's Tailwind plugin in your tailwind.config.\\\\\\[ts|js|cjs\\\\\\], found in your project root. Register Themes Skeleton provides a number of preset themes out of the box. You'll need to register at least one theme to load them and make them available to use. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { // Register each theme within this array: preset: \\\\\\[ \"skeleton\", \"modern\", \"crimson\" \\\\\\] } }) \\\\\\] Open /src/app.html and define the active theme to display using the data-theme attribute. You can modify this attribute to dynamically switch between any registered theme. HTML Copy Enhancements Preset themes may sometimes include additional optional features, such as: heading font weights, background mesh gradients, and more. To enable these settings, include enhancements as shown below. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ // Enable 'enhancements' per each registered theme: { name: \"skeleton\", enhancements: true } \\\\\\] } }) \\\\\\] Custom Themes View the theme generator for more information about implementing custom themes. Note that it is possible to mix and match preset and custom themes. Dark Mode By default Tailwind opts for light mode. If you wish to default to dark mode, append the following class to the html element within /src/app.html. View Tailwind's documentation for more information. HTML Copy Note that Skeleton also provides a Lightswitch utility if you wish toggle between light and dark modes. Backgrounds The background color of your application is automatically set using one of Skeleton's design token styles. By default, this utilizes --color-surface-50 for light mode and --color-surface-900 for dark mode. Use your global stylesheet app.postcss to modify this. CSS Copy /\\\\\\* Default setting: \\\\\\*/ body { @apply bg-surface-50-900-token; } /\\\\\\* --- \\\\\\*/ /\\\\\\* Example: primary color via a design token: \\\\\\*/ body { @apply bg-primary-50-900-token; } /\\\\\\* Example: secondary color via Tailwind: \\\\\\*/ body { @apply bg-secondary-50 dark:bg-secondary-900; } /\\\\\\* Example: using vanilla CSS: \\\\\\*/ body { background: red; } .dark body { background: blue; } Images and Gradients You may optionally provide a background image, including the use of a CSS mesh gradient. Replace the static color values with theme color properties to create a fully adaptive gradient background. Create a Mesh CSS Copy html, body { @apply h-full; } body { background-image: radial-gradient(at 0% 0%, rgba(var(--color-secondary-500) / 0.33) 0px, transparent 50%), radial-gradient(at 98% 1%, rgba(var(--color-error-500) / 0.33) 0px, transparent 50%); background-attachment: fixed; background-position: center; background-repeat: no-repeat; background-size: cover; } Custom Fonts Fonts may be installed from a local or remote source. For GDPR compliance and optimal performance we recommend installing the fonts locally. For this guide we'll demonstrate this process using free fonts from Google Fonts. Local (recommended) Remote 1. Download a Font Select a font on Google Fonts, then tap the \"Download Family\" button near the top-right of the page. Inter 2. Add the Font Files Unzip the downloaded file, then copy all font files to the /static/fonts directory in the root of your SvelteKit project. When available we recommend using variable fonts as they require only a single file. Otherwise copy all static font file assets to the /static/fonts directory. TERMINAL Copy /static/fonts/Inter-VariableFont\\\\\\_slnt,wght.ttf 3. Apply @font-face At the top of your global stylesheet /src/app.postcss append the @font-face settings per each font. The font-family assigns the font's reference name, while src points to the font file(s) in your /static/fonts directory. CSS Copy @font-face { /\\\\\\* Reference name \\\\\\*/ font-family: 'Inter'; /\\\\\\* For multiple files use commas, ex: url(), url(), ... \\\\\\*/ src: url('/fonts/Inter-VariableFont\\\\\\_slnt,wght.ttf'); } 4. Set the Font Family. Use CSS Property overrides or open your custom theme to set the font family for base and heading properties. Be sure to use the same reference name set above or your font will not work. CSS Copy /\\\\\\* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) \\\\\\*/ :root \\\\\\[data-theme='skeleton'\\\\\\] { --theme-font-family-base: 'Inter', sans-serif; --theme-font-family-heading: 'Inter', sans-serif; /\\\\\\* ... \\\\\\*/ } 5. Preloading Fonts. To avoid your page flickering during hydration, consider preloading fonts within the head tag in app.html HTML Copy On the Page CSS Custom Properties Overwriting Properties CSS-in-JS Format Tailwind Plugin Settings Register Themes Enhancements Custom Themes Dark Mode Backgrounds Images and Gradients Custom Fonts UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/colors",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Colors Skeleton themes extend Tailwind's color palette and can be used anywhere within your project. Color ID Example \\\\\\[style\\\\\\]-primary-\\\\\\[50-900\\\\\\] Typically your primary brand color. \\\\\\[style\\\\\\]-secondary-\\\\\\[50-900\\\\\\] A secondary branding color for supplementary value. \\\\\\[style\\\\\\]-tertiary-\\\\\\[50-900\\\\\\] A third and additional branding color. \\\\\\[style\\\\\\]-success-\\\\\\[50-900\\\\\\] Used for successful or positive actions, such as a form submit alert. \\\\\\[style\\\\\\]-warning-\\\\\\[50-900\\\\\\] Used for negative or harmful actions, such as warnings. \\\\\\[style\\\\\\]-error-\\\\\\[50-900\\\\\\] May be used for errors, alerts, and invalid inputs. \\\\\\[style\\\\\\]-surface-\\\\\\[50-900\\\\\\] The base level colors, used for backgrounds. Color Palette Shade 500 is used as the default value. Primary 50 100 200 300 400 500 ★ 600 700 800 900 Secondary 50 100 200 300 400 500 ★ 600 700 800 900 Tertiary 50 100 200 300 400 500 ★ 600 700 800 900 Success 50 100 200 300 400 500 ★ 600 700 800 900 Warning 50 100 200 300 400 500 ★ 600 700 800 900 Error 50 100 200 300 400 500 ★ 600 700 800 900 Surface 50 100 200 300 400 500 ★ 600 700 800 900 Usage HTML Copy Skeleton HTML Copy Skeleton CSS Copy /\\\\\\* Using Tailwind @apply \\\\\\*/ .example { @apply text-primary-500; } CSS Copy /\\\\\\* Using CSS custom properties. Note that colors are RGB values! \\\\\\*/ body { background: rgba(var(--color-surface-900) / 1); } On the Page Color Palette Usage UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/introduction",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Introduction A powerful UI toolkit built using Svelte and Tailwind CSS. Create adaptive, accessible design systems for your web apps. Skeleton utilizes Tailwind’s utility classes and design system capabilities to quickly and easily create beautiful interfaces. Paired with Svelte’s powerful component architecture, Skeleton creates customized, responsive, and reactive interfaces for projects of any scope or scale. Our Vision Skeleton aims to provide a seamless user experience by creating intelligent and adaptive UI elements that automatically conform to the unique aesthetic of your application. It leverages native browser APIs and form elements, while also incorporating powerful components that follow WAI-ARIA guidelines for accessibility, empowering developers to create user-centric web applications with ease. We're huge fans of Svelte and wish to contribute to this amazing ecosystem. We believe this only happens through contributions of high quality open source projects our own. Created by the community, for the community. Finally, we aim for inclusion, whether you're a contributor to the project, a consumer, or the end user. The Skeleton core team is not a faceless corporate entity, but rather a small group of individuals motivated to make accessible UI with great UX (user experience) and DX (developer experience) for all. Benefits Free and Open Source Skeleton is available as free and open-source software (FOSS) provided under the MIT License. Community Owned Skeleton is maintained by a number of talented contributors. If you wish to contribute to the project, you are welcome to do so. Visit the Skeleton communities on either GitHub or Discord. Theme System We provide a powerful and comprehensive theme system that goes well beyond generating a color palette. Themes allow you to control common settings, such as border radius, and apply those universally throughout your application. Furthermore, themes are built using CSS variables, which makes themes simple to configure and reuse. Design Tokens These tokens are a special set of CSS classes that ingest your theme settings for easy reuse throughout your design system. They are used as the default settings for most features within Skeleton, meaning your UI elements automatically adjust to theme changes. Likewise, these tokens are available to you, meaning you can build custom components using the same tools we do, for a truly cohesive look and feel. Release Cycle Skeleton receives new updates every other week, typically around Tuesday (US/Central). Each release is packed with new features, improvements, and bugfixes. View Releases Comparisons A quick comparison to alternative open source UI libraries. Tailwind UI https://tailwindui.com/ A library of UI elements designed by the creators of Tailwind CSS. This provides a huge library of turnkey HTML/CSS components. Currently Tailwind UI supports three options: HTML, React, and Vue. This means there's no plug and play solution for Svelte. You will need to generate your own components and build your own logic around these. Tailwind UI can be directly integrated with Skeleton though, providing tight integration with Skeleton's theme and design token systems. View our Integration Guide Flowbite Daisy UI FAQs A list of common questions and issues from our community. Is Typescript required? No, Skeleton does not require Typescript, though we highly recommend it. Please be aware all documentation examples are written with Typescript by default. If you wish to learn Typescript we recommend Total Typescript. What package managers are supported? Can I use a monorepo? Do you have a project roadmap? How can I contribute? Where can I learn Svelte and SvelteKit? Where can I learn Tailwind? Why is VS Code reordering my imports? Fast implementation, a customizable login experience, and flexible user journeys. Try Auth0 for free ADS VIA CARBON On the Page Our Vision Benefits Free and Open Source Community Owned Theme System Design Tokens Release Cycle Comparisons FAQs UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/quickstart",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Quickstart This guide will walk you through the basics of creating a new Skeleton app using SvelteKit. Get Started To begin, let's scaffold our project using the Skeleton CLI. Note that we've listed a couple required options for this guide. TERMINAL Copy npm create skeleton-app@latest my-skeleton-app - Enable SvelteKit's Typescript syntax - Select the \"Welcome\" template cd my-skeleton-app npm run dev By selecting the \"Welcome\" template the project will come preconfigured with both an App Shell and App Bar components in /src/routes/+layout.svelte. Add Sidebar Navigation Let's customize our App Shell's sidebar slot. Open /src/routes/+layout.svelte and add the following Tailwind utility classes to the AppShell slotSidebarLeft prop. HTML Copy Next, let's implement a navigation list within the App Shell's left sidebar slot. Append this slot fragment alongside any other fragment within the AppShell. HTML Copy \\* \\[Home\\](/) \\* \\[About\\](/about) Page Setup Let's add some basic content to our homepage. Open /src/routes/+page.svelte and replace the contents with the following. This will provide multiple elements automatically styled by Skeleton. HTML Copy Hello Skeleton ============== Lorem ipsum dolor sit amet consectetur adipisicing elit. \\[SvelteKit\\](https://kit.svelte.dev/) \\[Tailwind\\](https://tailwindcss.com/) \\[GitHub\\](https://github.com/) Add a Component Finally let's implement Skeleton's Avatar component. First, import the component, then add it anywhere within your page, we recommend within the .container element. HTML Copy import { Avatar } from '@skeletonlabs/skeleton'; Congrats! You have now created a simple Skeleton project. Feel free to begin customizing and implementing additional Tailwind, Svelte, and Utility features. On the Page Get Started Add Sidebar Navigation Page Setup Add a Component UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/sponsorship",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Sponsorship Sponsorship is a fundamental way to support open source projects such as Skeleton. Funds provided by sponsors cover operation costs, fund paid promotion, support contributors, and more. Choose from any of the services listed below. Github Ko-Fi Patreon GitHub Incentives Discord Role Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please contact a member of the Discord moderator team if this role is not automatically assigned. Premium Templates Sponsorship of the Gold Tier or higher unlocks access to all templates below. Select any template to preview. Portfolio A personal portfolio template, this template allows you to quickly and easily edit a static file to maintain your list of personal projects. Easily modify the images and stats on the homepage to make it your own. Makes use of the recently added Wintry theme by default, but easily switch to any theme you prefer. Blog This template provides a fully featured blog, allowing you to generate and maintain posts using Markdown via mdsvex. Includes full support for multiple authors and filtering by custom categories. All Markdown frontmatter is type safe and easy to expand. Including a unique and classy black and white theme. How may I access my templates? While your sponsorship is active, you gain access to a private GitHub repository containing all available templates. What makes these templates so special? Can I use other preset or custom themes? Are templates subject to license restrictions? Is support available for templates? Are Svelte and SvelteKit required? Is Tailwind required? Is Typescript required? How do I install and use each template? Ko-Fi Incentives Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please note that premium templates are not currently available to this service. Patreon Incentives Sponsorship of the Silver Tier or higher provides access to a sponsor role on Discord, enabling a special #sponsors channel which provides a direct line of communication with Skeleton contributors. Please note that premium templates are not currently available to this service. Get 50% off Slack Pro. Slack helps you stay organized, save time & get more done. ADS VIA CARBON On the Page GitHub Incentives Discord Role Premium Templates Ko-Fi Incentives Patreon Incentives UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/generator",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Theme Generator Toggle the \"Enable Preview\" option to begin creating a new theme. The entire documentation site will update as you progress. You can navigate to different sections without losing your settings as long as you do not refresh the page. Disabling the preview will reset back to your original theme. Enable Preview Randomize Colors Primary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Secondary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Tertiary 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Success 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Warning 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Error 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Surface 50 100 200 300 400 500 Text 600 700 800 900 Text & Fill Color Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Fonts Base sans serif mono system Headings sans serif mono system Text Color Light Mode Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Dark Mode Black White Primary 50 Primary 100 Primary 200 Primary 300 Primary 400 Primary 500 Primary 600 Primary 700 Primary 800 Primary 900 Secondary 50 Secondary 100 Secondary 200 Secondary 300 Secondary 400 Secondary 500 Secondary 600 Secondary 700 Secondary 800 Secondary 900 Tertiary 50 Tertiary 100 Tertiary 200 Tertiary 300 Tertiary 400 Tertiary 500 Tertiary 600 Tertiary 700 Tertiary 800 Tertiary 900 Success 50 Success 100 Success 200 Success 300 Success 400 Success 500 Success 600 Success 700 Success 800 Success 900 Warning 50 Warning 100 Warning 200 Warning 300 Warning 400 Warning 500 Warning 600 Warning 700 Warning 800 Warning 900 Error 50 Error 100 Error 200 Error 300 Error 400 Error 500 Error 600 Error 700 Error 800 Error 900 Surface 50 Surface 100 Surface 200 Surface 300 Surface 400 Surface 500 Surface 600 Surface 700 Surface 800 Surface 900 Border Radius Base 0px 2px 4px 6px 8px 12px 16px 24px 9999px Container 0px 2px 4px 6px 8px 12px 16px 24px Border Size Base 0px 1px 2px 4px 6px 8px Preview primary secondary tertiary success warning error surface primary secondary tertiary glass success warning error Show Theme Source How to Implement Generate your theme above, copy the source code, then paste this into a new file in the root of your project with a distinct name, such as: my-custom-theme.\\\\\\[ts|js\\\\\\]. If you opt for the Javascript format, make sure to strip out any Typescript type information. Open tailwind.config.\\\\\\[ts|js|cjs\\\\\\] found in the root of your project, and import your custom theme. TYPESCRIPT Copy import { myCustomTheme } from './my-custom-theme' Within this file, register your custom theme via the Skeleton Tailwind plugin settings. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { custom: \\\\\\[ myCustomTheme \\\\\\] } }) \\\\\\] Open /src/app.html and define your theme using the data-theme attribute. The value should match the name field set within your theme's source code. HTML Copy Note that custom themes can be registered along with Skeleton's preset themes, allowing you to switch between these as desired. Migrate from v1 to v2 Need help migrating your theme from the v1 CSS format to the v2 CSS-in-JS format? Try this handy conversion tool. Conversion Tool → Advanced Color Curation Looking for deeper customization? We recommend using Palette Generator. This includes support for hue, saturation, and lightness adjustments. Pair this with the Hex-To-RGB extension to convert each Hex color value to RGB in bulk with VS Code. UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/utilities/codeblocks",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Utilities Code Blocks Drawers Lightswitch Local Storage Stores Modals Popups Toasts Table of Contents Utility Code Blocks Displays pre-formatted source code, with optional support for Highlight.js syntax highlighting. TYPESCRIPT Copy import { CodeBlock } from '@skeletonlabs/skeleton'; Source Page Source Highlight.js Usage Props Events Demo HTML Copy This is meta CSS Copy .skeleton { color: #bada55; } TYPESCRIPT Copy const skeleton: string = 'awesome'; Install Highlight.js Highlight.js is a required dependency to enable syntax highlighting. TERMINAL Copy npm install highlight.js Configure Your Project To reduce your bundle size, we'll only import and register select languages for (ex: HTML, CSS, JS, TS). Please refer to the Highlight.js usage guide for more instruction. TYPESCRIPT Copy import hljs from 'highlight.js/lib/core'; // Import each language module you require import xml from 'highlight.js/lib/languages/xml'; // for HTML import css from 'highlight.js/lib/languages/css'; import json from 'highlight.js/lib/languages/json'; import javascript from 'highlight.js/lib/languages/javascript'; import typescript from 'highlight.js/lib/languages/typescript'; import shell from 'highlight.js/lib/languages/shell'; // Register each imported language module hljs.registerLanguage('xml', xml); // for HTML hljs.registerLanguage('css', css); hljs.registerLanguage('json', json); hljs.registerLanguage('javascript', javascript); hljs.registerLanguage('typescript', typescript); hljs.registerLanguage('shell', shell); Import any Highlight.js CSS theme of your choice. TYPESCRIPT Copy import 'highlight.js/styles/github-dark.css'; Finally, import the CodeBlock's writable store and pass a referenced to Highlight.js. TYPESCRIPT Copy import { storeHighlightJs } from '@skeletonlabs/skeleton'; storeHighlightJs.set(hljs); If you are using PurgeCSS, safelist the imported classes in vite.config.ts so that they will not be removed during the build. TYPESCRIPT Copy import { purgeCss } from 'vite-plugin-tailwind-purgecss'; const config: UserConfig = { plugins: \\\\\\[ sveltekit(), purgeCss({ safelist: { // any selectors that begin with \"hljs-\" will not be purged greedy: \\\\\\[/^hljs-/\\\\\\], }, }), \\\\\\], }; Line Numbers Adding the lineNumbers property will add line numbers to the displayed code. Supports up to 1000 lines of code. HTML Copy The quick brown fox jumped over the lazy dog. Language Syntax highlighting will appear when a valid language alias is provided to the Code Block's language property. For common web languages we recommend the shorthand values: html, css, js, ts, and shell. Accessibility Uses pre-wrap by default to support keyboard-only navigation. Please be mindful of color contrast ratios when customizing the design of your Code Block components. On the Page Demo Install Highlight.js Configure Your Project Line Numbers Language Accessibility UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/actions/clipboard",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Actions Clipboard Filters Focus Trap Components Accordions App Bar App Rail App Shell Autocomplete Avatars Conic Gradients File Buttons File Dropzone Input Chips Listboxes Paginators Progress Bars Progress Radials Ratings Radio Groups Range Sliders Slide Toggles Steppers Tabs Tables Tree Views Beta Svelte Action Clipboard Allows you to quickly copy data to the clipboard. TYPESCRIPT Copy import { clipboard } from '@skeletonlabs/skeleton'; Source Page Source Usage Params Demo Copy If your data is available as a primitive data type (string, integer, etc), you can provide it directly to the action. Copying HTML Contents To copy the innerHTML for an element, set a data-clipboard on your target, then provide an element reference to the action. This div is set to 'contenteditable'. Make changes then tap copy. Copy Copying Input Values To copy the target input value, set a data-clipboard data attribute on your target, then provide an input reference to the action. Copy Secure Context This action utilizes the native browser Clipboard API which only functions within a Secure Context. For best results ensure your app is served with https://. Skeleton will produce a console error when this is triggered outside a Secure Context. On the Page Demo Copying HTML Contents Copying Input Values Secure Context UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/blog",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri The Skeleton Blog Keep up with the latest news, tutorials, and releases for Skeleton. Tuesday, September 26, 2023 Premium templates now available via GitHub Sponsors! Hey everyone, Chris here from Skeleton Labs. I wanted to make you aware of two important updates starting today involving Skeleton Store and GitHub Sponsorships. News Read Article → Monday, August 28, 2023 Skeleton v2.0 Today we're happy to introduce Skeleton v2! This represents a huge step forward for Skeleton, introducing a number of critical updates, new features, and of course a handful of breaking changes. News Read Article → Tuesday, August 15, 2023 Skeleton v2.0 Release Candidate Today we're happy to introduce the new v2 release candidate of Skeleton! This represents a huge step forward for Skeleton, introducing a number of important updates, new features, and of course some necessary breaking changes. News Read Article → Tuesday, August 1, 2023 Skeleton v1.11.0 Today's release includes a handful of minor bugfixes and and improvements to the Skeleton documentation. No notable new features are included in this release, but it is still advised to update when you can. News Read Article → Tuesday, July 18, 2023 Announcing the Skeleton Store! Hey everyone, Chris here from Skeleton Labs. Today I'm thrilled to reveal our newest service, the Skeleton Store. A digital storefront featuring premium assets purpose-built by and for Skeleton. News Read Article → Tuesday, July 18, 2023 Skeleton v1.10.0 Alongside the launch of the store, we're introducing a minor release of Skeleton that includes several notable improvements and features. While today's release is on the smaller side, we anticipate the next few releases will be a return to form - including several large and meaty updates. News Read Article → Tuesday, July 4, 2023 Skeleton v1.9.0 We're happy to announce that Skeleton now fully supports Svelte 4. This was a monumental effort by contributor @AdrianGonz97 (aka Coka), so please send him some <3. Read Article → Tuesday, June 20, 2023 Skeleton v1.8.0 After several maintenance focused updates, we return with a new set of feature updates. This includes a brand new and interactive ratings component, new layouts for handling images and more... News Read Article → Tuesday, July 4, 2023 Skeleton v1.7.1 Today's update represents another substantial update on the operational side of things. Skeleton now automatically generates our changelog using Changesets. Read Article → Wednesday, May 24, 2023 Skeleton v1.6.2 Today's update is a bit different than normal, as outwardly it will appear as a minor triage update. However, internally we've now migrated the Skeleton project to a new monorepo structure. News Read Article → Tuesday, May 9, 2023 Skeleton v1.5.1 Today's update includes the most features introduced to Skeleton since the v1 release! This include a new opt-in typography system, major overhauls to the popup feature, introduction of the new Tailwind blocks, gradient variants, and more. See the full list of updates detailed below. News Read Article → Tuesday, April 25, 2023 Skeleton v1.2.5 A new version of Skeleton is now available, featuring various improvements and bugfixes. News Read Article → Wednesday, April 12, 2023 Announcing new services and support from Skeleton Labs We're thrilled to announce that Skeleton Labs is now provided premium services and support for your Skeleton projects. Resources Read Article → Wednesday, April 12, 2023 Skeleton v1.2.0 Alongside today's new release, we're thrilled to announce that Skeleton Labs is now providing premium support and services for your Skeleton projects. This includes professional consulting, contracting, and technical support via Skeleton Labs core team members. News Read Article → Tuesday, March 28, 2023 Skeleton v1.1.0 As promised during our launch event, today's release contains primarily triage and bug fixes. However we've also implemented the new autocomplete component, made changes to preset theme fonts to ensure they are GDPR compliant, as well as some minor improvements to several features. News Read Article → Page 1 of 3 ← Next → UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/elements/core",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Globals Core Typography Forms Elements Alerts Badges Breadcrumbs Buttons Cards Chips Lists Logo Clouds Placeholders Tables Blocks Chat Gradient Headings Image Layouts Scroll Containers Tailwind Core Provides a variety of globally scoped styles. Source Page Source Usage Body Background Your app's background is automatically set via a design token class. Adjust your theme's color scheme to customize. This affects both light and dark mode. CSS Copy body { @apply bg-surface-50-900-token; } Selection Selection color is also set via a token class. Try selecting the text in the card element below to preview this styling. Notice how selection color changes depending on the background. The quick brown fox jumps over the lazy dog. Try selecting the text above. Mobile Focus Interactive elements on mobile will briefly show a focus style when touched. Skeleton adjusts the coloring. Tap Me Scrollbars Skeleton automatically provides custom scrollbar styles in supported browsers. Use .hide-scrollbar to disable scrollbars. Test Scrolling Here At ad tempore. Consectetur quia autem nisi pariatur eaque aspernatur cupiditate nulla. In ipsa deleniti blanditiis beatae eligendi quo voluptate. Enim architecto veniam dolore voluptas rem. Nostrum eligendi voluptatem non et quam officia saepe sint. Est illum facilis necessitatibus vero eligendi. Vero culpa quos optio. Dolores ex autem adipisci ex maiores provident inventore iusto aut. Ut voluptates quasi et nemo. Commodi id quasi. Ab quaerat aut soluta assumenda expedita eligendi nulla eligendi. Odio culpa nesciunt corrupti expedita dolor sed sapiente dicta architecto. Temporibus laborum nihil sint laboriosam sunt magni ab. Eos minima temporibus cupiditate. Ipsum culpa nulla nobis. Maxime hic ex soluta iste suscipit ipsam repudiandae. Vitae asperiores ratione ullam quos. Cum error esse impedit aspernatur vero corporis doloribus iure. Harum iusto corrupti voluptatibus possimus dolorem ullam corporis iusto. Rem voluptatibus incidunt esse deleniti quo asperiores voluptas minus. Assumenda nobis perferendis. Mollitia accusamus nulla quibusdam laudantium voluptas fugiat molestiae repellendus. Mollitia quod laborum facilis quibusdam quisquam fuga. Qui iusto animi et. In ut hic architecto. Veniam ex quas iure dolore distinctio necessitatibus. Ipsum nesciunt illum quod. Quaerat sunt reiciendis molestias totam totam repellat velit adipisci quo. Vero dolorum vitae vitae repudiandae blanditiis ratione. Facere eveniet unde animi ratione reiciendis corporis nam debitis. In porro veritatis optio. Sit nemo repellat minima corrupti perspiciatis. Ipsum alias illum cumque repellat saepe quasi voluptates. Magni incidunt quis non tenetur. Incidunt id voluptas praesentium. Beatae illum minima. Eveniet accusantium occaecati culpa vitae nihil commodi quaerat sapiente commodi. Provident id cupiditate. Quibusdam modi autem repudiandae iste ab ea porro possimus. Maxime labore vitae libero corrupti harum praesentium sit at rerum. Dignissimos voluptatibus aspernatur totam. Inventore soluta totam nobis optio quod. Architecto est nam enim recusandae vel. Officia omnis deleniti. Sit sapiente alias magni beatae. Voluptate excepturi hic. Consequatur asperiores expedita dolorem officiis nesciunt architecto debitis aliquid eius. Voluptate doloremque hic sed. Provident nihil rem sit minima. Blanditiis quam dignissimos dolores. Dividers Native hr horizontal rule elements respect your theme settings automatically. Use border size to adjust the width. Use Tailwind's Border Width Top and Border Styles to customize each divider. Divider Styling Dividers may be dashed, dotted, or doubled. Vertical Dividers Divide columns with the .divider-vertical class. You can apply it with a span tag. Adjust the height as desired. Left Right UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/docs/get-started",
    "html": "Explore Theme Sponsor Version ⌘+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri Get Started We recommend at least moderate experience with Svelte, SvelteKit, and Tailwind CSS before your proceed. Please be aware that Skeleton only supports SvelteKit applications at this time. Create Your Project Skeleton CLI Manual Install We highly recommend the Skeleton CLI for creating new Skeleton projects. This will automatically scaffold a new SvelteKit application, install Tailwind, configure Skeleton, and more. TERMINAL Copy npm create skeleton-app@latest my-skeleton-app - Enable Typescript when prompted (recommended) cd my-skeleton-app Install Skeleton Skeleton CLI Manual Install The CLI will automatically install Skeleton and the Skeleton Tailwind plugin. Install Tailwind Skeleton CLI Manual Install The CLI will automatically install Tailwind and configure all required settings. Add Themes Skeleton provides several preset themes out of the box. Select a theme to learn how to implement it. 💀 Skeleton 🌨️ Wintry 🤖 Modern 🚀 Rocket 🧜‍♀️ Seafoam 📺 Vintage 🏜️ Sahara 👔 Hamlindigo 💫 Gold Nouveau ⭕ Crimson First, register your preferred theme(s) in tailwind.config.\\\\\\[ts|js|cjs\\\\\\]. This will ensure each theme is available to use. TYPESCRIPT Copy plugins: \\\\\\[ skeleton({ themes: { preset: \\\\\\[ \"skeleton\" \\\\\\] } }) \\\\\\] Next, open /src/app.html and set the active theme using the data-theme attribute. HTML Copy Learn more about Skeleton themes and customization. Themes Guide → Create a custom theme using the theme generator. Theme Generator → On the Page Create Your Project Install Skeleton Install Tailwind Add Themes UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  },
  {
    "title": "Skeleton — UI Toolkit for Svelte + Tailwind",
    "url": "https://www.skeleton.dev/",
    "html": "Explore Theme Sponsor Version Ctrl+K Docs Tailwind Svelte Utilities Docs Introduction Get Started Quickstart Essentials Themes Colors Styling Design Tokens Variants Transitions Resources Theme Generator Figma New PurgeCSS Contributing Sponsorship Integrations Tauri The UI toolkit for Svelte and Tailwind. Skeleton allows you to create adaptive and accessible interfaces for web apps of any shape or size. Get Started Learn More Search Friendly Adaptive Customizable Skeleton @SkeletonUI UI toolkit for Svelte and Tailwind. 50 Following 500 Followers Design Try Skeleton live in your browser. Open in StackBlitz Designed for Svelte and SvelteKit. Skeleton integrates directly with Svelte and SvelteKit's best features, including components, stores, actions, and more. Offering interactive components, image filters, and much more. Components Interactive and customizable components. Actions Dynamic actions for filters, tab focus, and more. Utilities Powerful utilities that extend even further. Components What is Día de los Muertos? While Halloween and Day of the Dead occur nearly in tandem and share similar customs (candy, face painting, and community gathering), the two are not related. Halloween has ancient Celtic roots, while Day of the Dead has its own origins that date back to the Indigenous people of Mexico and Central America. When did it begin? When is it celebrated? What are ofrendas? Source Elements Announcements Skeleton is Awesome! This showcases Skeleton's Card, Typography, Chips, and Divider elements. Like Save Share Enhanced with Tailwind CSS. Skeleton has been designed from the ground up to take advantage of Tailwind's unique utility class approach to CSS styling, allowing you to create or extend your own personal design system. Elements Common UI elements via HTML + CSS. Theme Colors Includes an extensive palette of colors. Dark Mode Toggle dark mode with the flip of a switch. Adaptive Theming. Use Skeleton's design token system, variant styles, and Tailwind utility classes to create custom components that match your overall theme and aesthetic. Simple Elegant Playful Brutalist Mood Booster Have It Your Way The Skeleton Crew And so much more... There's too many amazing features to list, but here are a few of our favorites. Amazing DX Offers a best in class developer experience providing thorough documentation and ample examples to help you ship faster. Accessibility Components follow WAI-ARIA guidelines to implement required semantics, attributes, and keyboard interactions. Extensible Bring elements from other UI libraries such as Flowbite or Tailwind UI to expand your toolkit arsenal even further. Typescript Uses Typescript by default and provides IntelliSense feedback as you build your application within your editor. Integrations Bring your favorite Svelte or Javascript libraries and use the adaptive theme system for a seamless experience. Icon Agnostic Supports all forms of iconography for complete control, including: unicode, emoji, vector, or SVG-based icon systems. 60k+ Monthly Downloads 3.5k+ GitHub Stars 1.5k+ Discord Members Help Support Skeleton. Skeleton is an open source project that survives in part through your support. Consider becoming a sponsor through the following services. For larger contributions please contact us. Ko-Fi GitHub Patreon Built by Awesome People. Here are a few of the people responsible for creating and maintaining Skeleton. Chris Simmons Co-founder and core maintainer. Trey Weir Co-founder and business relations. Ready to Begin? Create your first Skeleton project in seconds. Via StackBlitz Install Skeleton UI Toolkit for Svelte + Tailwind. 2.6.1 Explore Introduction Get Started Blog Features Tailwind Svelte Utilities Project Github Organization NPM Organization NPM Package MIT License | Skeleton Labs"
  }
]