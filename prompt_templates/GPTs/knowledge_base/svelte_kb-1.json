[
  {
    "title": "svelte/register • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-register",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript LEGACY svelte/register Edit this page on GitHub ON THIS PAGE This API is removed in Svelte 4. require hooks are deprecated and current Node versions understand ESM. Use a bundler like Vite or our full-stack framework SvelteKit instead to create JavaScript modules from Svelte components. To render Svelte components in Node.js without bundling, use require('svelte/register'). After that, you can use require to include any .svelte file. require('svelte/register'); const App = require('./App.svelte').default; // ... const { html, css, head } = App.render({ answer: 42 }); The .default is necessary because we're converting from native JavaScript modules to the CommonJS modules recognised by Node. Note that if your component imports JavaScript modules, they will fail to load in Node and you will need to use a bundler instead. To set compile options, or to use a custom file extension, call the register hook as a function: require('svelte/register')({ extensions: \\\\\\\\\\\\\\['.customextension'\\\\\\\\\\\\\\], // defaults to \\\\\\\\\\\\\\['.html', '.svelte'\\\\\\\\\\\\\\] preserveComments: true }); PREVIOUS Svelte 4 migration guide NEXT"
  },
  {
    "title": "Svelte 4 migration guide • Docs • Svelte",
    "url": "https://svelte.dev/docs/v4-migration-guide",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript MISC Svelte 4 migration guide Edit this page on GitHub ON THIS PAGE Svelte 4 migration guide Minimum version requirements Browser conditions for bundlers Removal of CJS related output Stricter types for Svelte functions Custom Elements with Svelte SvelteComponentTyped is deprecated Transitions are local by default Default slot bindings Preprocessors New eslint package Other breaking changes This migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: npx svelte-migrate@latest svelte-4 If you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your peerDependencies. Minimum version requirements permalink Upgrade to Node 16 or higher. Earlier versions are no longer supported. (#8566) If you are using SvelteKit, upgrade to 1.20.4 or newer (sveltejs/kit#10172) If you are using Vite without SvelteKit, upgrade to vite-plugin-svelte 2.4.1 or newer (#8516) If you are using webpack, upgrade to webpack 5 or higher and svelte-loader 3.1.8 or higher. Earlier versions are no longer supported. (#8515, 198dbcf) If you are using Rollup, upgrade to rollup-plugin-svelte 7.1.5 or higher (198dbcf) If you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. (#8488) Browser conditions for bundlers permalink Bundlers must now specify the browser condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as onMount not get called and you'll need to update the module resolution configuration. For Rollup this is done within the @rollup/plugin-node-resolve plugin by setting browser: true in its options. See the rollup-plugin-svelte documentation for more details For webpack this is done by adding \"browser\" to the conditionNames array. You may also have to update your alias config, if you have set it. See the svelte-loader documentation for more details (#8516) Removal of CJS related output permalink Svelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the svelte/register hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. (#8613) Stricter types for Svelte functions permalink There are now stricter types for createEventDispatcher, Action , ActionReturn , and onMount: createEventDispatcher now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly (#7224) import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher<{ optional: number | null; required: string; noArgument: null; }>(); // Svelte version 3: dispatch('optional'); dispatch('required'); // I can still omit the detail argument dispatch('noArgument', 'surprise'); // I can still add a detail argument // Svelte version 4 using TypeScript strict mode: dispatch('optional'); dispatch('required'); // error, missing argument dispatch('noArgument', 'surprise'); // error, cannot pass an argument Action and ActionReturn have a default parameter type of undefined now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically (#7442) const action: Action = (node, params) => { .. } // this is now an error if you use params in any way const action: Action = (node, params) => { .. } // params is of type string onMount now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions (#8136) // Example where this change reveals an actual bug onMount( // someCleanup() not called because function handed to onMount is async async () => { const something = await foo(); // someCleanup() is called because function handed to onMount is sync () => { foo().then(something => .. // .. return () => someCleanup(); } ); Custom Elements with Svelte permalink The creation of custom elements with Svelte has been overhauled and significantly improved. The tag option is deprecated in favor of the new customElement option: This change was made to allow more configurability for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. (#8457) SvelteComponentTyped is deprecated permalink SvelteComponentTyped is deprecated, as SvelteComponent now has all its typing capabilities. Replace all instances of SvelteComponentTyped with SvelteComponent . import { SvelteComponentTyped } from 'svelte'; import { SvelteComponent } from 'svelte'; export class Foo extends SvelteComponentTyped<{ aProp: string }> {} export class Foo extends SvelteComponent<{ aProp: string }> {} If you have used SvelteComponent as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing : typeof SvelteComponent to : typeof SvelteComponent . import ComponentA from './ComponentA.svelte'; import ComponentB from './ComponentB.svelte'; import { SvelteComponent } from 'svelte'; let component: typeof SvelteComponent; let component: typeof SvelteComponent; function choseRandomly() { component = Math.random() > 0.5 ? ComponentA : ComponentB; } random The migration script will do both automatically for you. (#8512) Transitions are local by default permalink Transitions are now local by default to prevent confusion around page navigations. \"local\" means that a transition will not play if it's within a nested control flow block (each/if/await/key) and not the direct parent block but a block above it is created/destroyed. In the following example, the slide intro animation will only play when success goes from false to true, but it will not play when show goes from false to true: {#if show} ... {#if success} Success {/each} {/if} To make transitions global, add the |global modifier - then they will play when any control flow block above is created/destroyed. The migration script will do this automatically for you. (#6686) Default slot bindings permalink Default slot bindings are no longer exposed to named slots and vice versa: import Nested from './Nested.svelte'; count in default slot - is available: {count} count in bar slot - is not available: {count} This makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. (#6049) Preprocessors permalink The order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style. import { preprocess } from 'svelte/compiler'; const { code } = await preprocess( source, \\\\\\\\\\\\\\[ { markup: () => { console.log('markup-1'); }, script: () => { console.log('script-1'); }, style: () => { console.log('style-1'); } }, { markup: () => { console.log('markup-2'); }, script: () => { console.log('script-2'); }, style: () => { console.log('style-2'); } } \\\\\\\\\\\\\\], { filename: 'App.svelte' } ); // Svelte 3 logs: // markup-1 // markup-2 // script-1 // script-2 // style-1 // style-2 // Svelte 4 logs: // markup-1 // script-1 // style-1 // markup-2 // script-2 // style-2 This could affect you for example if you are using MDsveX - in which case you should make sure it comes before any script or style preprocessor. preprocess: \\\\\\\\\\\\\\[ vitePreprocess(), mdsvex(mdsvexConfig) mdsvex(mdsvexConfig), vitePreprocess() \\\\\\\\\\\\\\] Each preprocessor must also have a name. (#8618) New eslint package permalink eslint-plugin-svelte3 is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package eslint-plugin-svelte. See this Github post for an instruction how to migrate. Alternatively, you can create a new project using npm create svelte@latest, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project. Other breaking changes permalink the inert attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. (#8628) the runtime now uses classList.toggle(name, boolean) which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8629) the runtime now uses the CustomEvent constructor which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8775) people implementing their own stores from scratch using the StartStopNotifier interface (which is passed to the create function of writable etc) from svelte/store now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. (#6750) derived will now throw an error on falsy values instead of stores passed to it. (#7947) type definitions for svelte/internal were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5 Removal of DOM nodes is now batched which slightly changes its order, which might affect the order of events fired if you're using a MutationObserver on these elements (#8763) if you enhanced the global typings through the svelte.JSX namespace before, you need to migrate this to use the svelteHTML namespace. Similarly if you used the svelte.JSX namespace to use type definitions from it, you need to migrate those to use the types from svelte/elements instead. You can find more information about what to do here PREVIOUS TypeScript NEXT svelte/register"
  },
  {
    "title": "TypeScript • Docs • Svelte",
    "url": "https://svelte.dev/docs/typescript",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript MISC TypeScript Edit this page on GitHub ON THIS PAGE TypeScript Setup Enhancing built-in DOM types Experimental advanced typings Limitations Types You can use TypeScript within Svelte components. IDE extensions like the Svelte VSCode extension will help you catch errors right in your editor, and svelte-check does the same on the command line, which you can integrate into your CI. Setup permalink To use TypeScript within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript. Using SvelteKit or Vite permalink The easiest way to get started is scaffolding a new SvelteKit project by typing npm create svelte@latest, following the prompts and choosing the TypeScript option. svelte.config.js import { vitePreprocess } from '@sveltejs/kit/vite'; const config = { preprocess: vitePreprocess() }; export default config; If you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing npm create vite@latest and selecting the svelte-ts option. svelte.config.js import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'; const config = { preprocess: vitePreprocess() }; export default config; In both cases, a svelte.config.js with vitePreprocess will be added. Vite/SvelteKit will read from this config file. Other build tools permalink If you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's rollup-plugin-svelte and for Webpack that's svelte-loader. For both, you need to install typescript and svelte-preprocess and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the rollup or webpack template to scaffold the setup from a script. If you're starting a new project, we recommend using SvelteKit or Vite instead permalink To use TypeScript inside your Svelte components, add lang=\"ts\" to your script tags: let name: string = 'world'; function greet(name: string) { alert(\\\\\\\\\\\\\\`Hello, ${name}!\\\\\\\\\\\\\\`); } Props permalink Props can be typed directly on the export let statement: export let name: string; Slots permalink Slot and slot prop types are inferred from the types of the slot props passed to them: export let name: string; {name} Events permalink Events can be typed with createEventDispatcher: import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher<{ event: null; // does not accept a payload click: string; // has a required string payload type: string | null; // has an optional string payload }>(); function handleClick() { dispatch('event'); dispatch('click', 'hello'); } function handleType() { dispatch('event'); dispatch('type', Math.random() > 0.5 ? 'world' : null); } Click Enhancing built-in DOM types permalink Svelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our HTML typings. In that case, you are welcome to open an issue and/or a PR fixing it. In case this is a custom or experimental attribute/event, you can enhance the typings like this: additional-svelte-typings.d.ts declare namespace svelteHTML { // enhance elements interface IntrinsicElements { 'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent) => void }; } // enhance attributes interface HTMLAttributes { // If you want to use on:beforeinstallprompt 'on:beforeinstallprompt'?: (event: any) => any; // If you want to use myCustomAttribute={..} (note: all lowercase) mycustomattribute?: any; // You can replace any with something more specific if you like } } Then make sure that d.ts file is referenced in your tsconfig.json. If it reads something like \"include\": \\\\\\\\\\\\\\[\"src/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*/\\\\\\\\\\\\\\*\"\\\\\\\\\\\\\\] and your d.ts file is inside src, it should work. You may need to reload for the changes to take effect. Since Svelte version 4.2 / svelte-check version 3.5 / VS Code extension version 107.10.0 you can also declare the typings by augmenting the svelte/elements module like this: additional-svelte-typings.d.ts import { HTMLButtonAttributes } from 'svelte/elements'; declare module 'svelte/elements' { export interface SvelteHTMLElements { 'custom-button': HTMLButtonAttributes; } // allows for more granular control over what element to add the typings to export interface HTMLButtonAttributes { veryexperimentalattribute?: string; } } export {}; // ensure this is not an ambient module, else types will be overridden instead of augmented Experimental advanced typings permalink A few features are missing from taking full advantage of TypeScript in more advanced use cases like typing that a component implements a certain interface, explicitly typing slots, or using generics. These things are possible using experimental advanced type capabilities. See this RFC for more information on how to make use of them. The API is experimental and may change at any point Limitations permalink No TS in markup permalink You cannot use TypeScript in your template's markup. For example, the following does not work: let count = 10; Count as string: {count as string}! =================================== {#if count > 4} {@const countString: string = count} {countString} {/if} Reactive Declarations permalink You cannot type your reactive declarations with TypeScript in the way you type a variable. For example, the following does not work: let count = 0; $: doubled: number = count \\\\\\\\\\\\\\* 2; // ❌ Does not work You cannot add a : TYPE because it's invalid syntax in this position. Instead, you can move the definition to a let statement just above: let count = 0; let doubled: number; $: doubled = count \\\\\\\\\\\\\\* 2; Types permalink ComponentConstructorOptions permalink interface ComponentConstructorOptions< Props extends Record = Record > {…} target: Element | Document | ShadowRoot; anchor?: Element; props?: Props; context?: Map; hydrate?: boolean; intro?: boolean; $$inline?: boolean; ComponentEvents permalink Convenience type to get the events the given component expects. Example: import type { ComponentEvents } from 'svelte'; import Component from './Component.svelte'; function handleCloseEvent(event: ComponentEvents<Component>\\\\\\\\\\\\\\['close'\\\\\\\\\\\\\\]) { console.log(event.detail); } type ComponentEvents = Component extends SvelteComponent ? Events : never; ComponentProps permalink Convenience type to get the props the given component expects. Example: import type { ComponentProps } from 'svelte'; import Component from './Component.svelte'; const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props type ComponentProps = Component extends SvelteComponent ? Props : never; ComponentType permalink Convenience type to get the type of a Svelte component. Useful for example in combination with dynamic components using . Example: import type { ComponentType, SvelteComponent } from 'svelte'; import Component1 from './Component1.svelte'; import Component2 from './Component2.svelte'; const component: ComponentType = someLogic() ? Component1 : Component2; const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2; type ComponentType< Component extends SvelteComponent = SvelteComponent > = (new ( options: ComponentConstructorOptions< Component extends SvelteComponent ? Props : Record > ) => Component) & { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* The custom element version of the component. Only present if compiled with the \\\\\\\\\\\\\\`customElement\\\\\\\\\\\\\\` compiler option \\\\\\\\\\\\\\*/ element?: typeof HTMLElement; }; SvelteComponent permalink Base class for Svelte components with some minor dev-enhancements. Used when dev=true. Can be used to create strongly typed Svelte components. Example: permalink You have component library on npm called component-library, from which you export a component called MyComponent. For Svelte+TypeScript users, you want to provide typings. Therefore you create a index.d.ts: import { SvelteComponent } from \"svelte\"; export class MyComponent extends SvelteComponent<{foo: string}> {} Typing this makes it possible for IDEs like VS Code with the Svelte extension to provide intellisense and to use the component like this in a Svelte file with TypeScript: import { MyComponent } from \"component-library\"; class SvelteComponent< Props extends Record = any, Events extends Record = any, Slots extends Record = any > {…} \\\\\\\\\\\\\\[prop: string\\\\\\\\\\\\\\]: any; constructor(options: ComponentConstructorOptions); $destroy(): void; $capture\\\\\\\\\\\\\\_state(): void; $inject\\\\\\\\\\\\\\_state(): void; SvelteComponentTyped permalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512 class SvelteComponentTyped< Props extends Record = any, Events extends Record = any, Slots extends Record = any > extends SvelteComponent {} PREVIOUS Accessibility warnings NEXT Svelte 4 migration guide</x-turndown></x-turndown>"
  },
  {
    "title": "Accessibility warnings • Docs • Svelte",
    "url": "https://svelte.dev/docs/accessibility-warnings",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript MISC Accessibility warnings Edit this page on GitHub ON THIS PAGE Accessibility (shortened to a11y) isn't always easy to get right, but Svelte will help by warning you at compile time if you write inaccessible markup. However, keep in mind that many accessibility issues can only be identified at runtime using other automated tools and by manually testing your application. Some warnings may be incorrect in your concrete use case. You can disable such false positives by placing a comment above the line that causes the warning. Example: Here is a list of accessibility checks Svelte will do for you. a11y-accesskey permalink Enforce no accesskey on element. Access keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements. Inconsistencies between keyboard shortcuts and keyboard commands used by screen reader and keyboard-only users create accessibility complications. To avoid complications, access keys should not be used. a11y-aria-activedescendant-has-tabindex permalink An element with aria-activedescendant must be tabbable, so it must either have an inherent tabindex or declare tabindex as an attribute. a11y-aria-attributes permalink Certain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the aria-\\\\\\\\\\\\\\* props. a11y-autofocus permalink Enforce that autofocus is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users alike. a11y-click-events-have-key-events permalink Enforce that visible, non-interactive elements with an on:click event are accompanied by a keyboard event handler. Users should first consider whether an interactive element might be more appropriate such as a element for actions or element for navigations. These elements are more semantically meaningful and will have built-in key handling. E.g. Space and Enter will trigger a and Enter will trigger an element. If a non-interactive element is required then on:click should be accompanied by an on:keyup or on:keydown handler that enables the user to perform equivalent actions via the keyboard. In order for the user to be able to trigger a key press, the element will also need to be focusable by adding a tabindex. While an on:keypress handler will also silence this warning, it should be noted that the keypress event is deprecated. {}} /> Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users. a11y-distracting-elements permalink Enforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated, and should be avoided. The following elements are visually distracting: and . a11y-hidden permalink Certain DOM elements are useful for screen reader navigation and should not be hidden. invisible header ---------------- a11y-img-redundant-alt permalink Enforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce img elements as an image. There is no need to use words such as image, photo, and/or picture. !\\\\\\[Foo eating a sandwich.\\\\\\](foo) !\\\\\\[Picture of me taking a photo of an image\\\\\\](bar) !\\\\\\[Photo of foo being weird.\\\\\\](foo) !\\\\\\[Image of me at a bar!\\\\\\](bar) !\\\\\\[Picture of baz fixing a bug.\\\\\\](foo) a11y-incorrect-aria-attribute-type permalink Enforce that only the correct type of value is used for aria attributes. For example, aria-hidden should only receive a boolean. a11y-invalid-attribute permalink Enforce that attributes important for accessibility have a valid value. For example, href should not be empty, '#', or javascript:. invalid a11y-interactive-supports-focus permalink Enforce that elements with an interactive role and interactive handlers (mouse or key press) must be focusable or tabbable. {}} /> a11y-label-has-associated-control permalink Enforce that a label tag has a text label and an associated control. There are two supported ways to associate a label with a control: Wrapping a control in a label tag. Adding for to a label and assigning it the ID of an input on the page. B C A a11y-media-has-caption permalink Providing captions for media is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is this important for accessibility, but can also be useful for all users in the case that the media is unavailable (similar to alt text on an image when an image is unable to load). The captions should contain all important and relevant information to understand the corresponding media. This may mean that the captions are not a 1:1 mapping of the dialogue in the media content. However, captions are not necessary for video components with the muted attribute. a11y-misplaced-role permalink Certain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the role props. a11y-misplaced-scope permalink The scope attribute should only be used on elements. a11y-missing-attribute permalink Enforce that attributes required for accessibility are present on an element. This includes the following checks: should have an href (unless it's a fragment-defining tag) should have alt, aria-label, or aria-labelledby should have lang should have title should have alt should have title, aria-label, or aria-labelledby should have alt, aria-label, or aria-labelledby text a11y-missing-content permalink Enforce that heading elements (h1, h2, etc.) and anchors have content and that the content is accessible to screen readers\\[ a11y-mouse-events-have-key-events permalink Enforce that on:mouseover and on:mouseout are accompanied by on:focus and on:blur, respectively. This helps to ensure that any functionality triggered by these mouse events is also accessible to keyboard users. a11y-no-redundant-roles permalink Some HTML elements have default ARIA roles. Giving these elements an ARIA role that is already set by the browser has no effect and is redundant. !\\[\\](foo.jpg) a11y-no-interactive-element-to-noninteractive-role permalink WAI-ARIA roles should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip. a11y-no-noninteractive-element-interactions permalink A non-interactive element does not support event handlers (mouse and key handlers). Non-interactive elements include\n\n, ,\n\n(,\n==\n\n, etc),\n\n, ,\n\n*   ,\n    and\n    \n    . Non-interactive WAI-ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip.1.  {}} />\n        \n        {}} /> a11y-no-noninteractive-element-to-interactive-role permalink WAI-ARIA roles should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include button, link, checkbox, menuitem, menuitemcheckbox, menuitemradio, option, radio, searchbox, switch and textbox.\n        \n        ### Button\n        \n        a11y-no-noninteractive-tabindex permalink Tab key navigation should be limited to elements on the page that can be interacted with.\n        \n        a11y-no-static-element-interactions permalink Elements like\n        \n        with interactive handlers like click must have an ARIA role.\n        \n        ''} /> a11y-positive-tabindex permalink Avoid positive tabindex property values. This will move elements out of the expected tab order, creating a confusing experience for keyboard users.\n        \n        a11y-role-has-required-aria-props permalink Elements with ARIA roles must have all required attributes for that role. a11y-role-supports-aria-props permalink Elements with explicit or implicit roles defined contain only aria-\\\\\\\\\\\\\\* properties supported by that role.\n        \n    2.  a11y-structure permalink Enforce that certain DOM elements have the correct structure.\n        \n        Image caption\n        \n        a11y-unknown-aria-attribute permalink Enforce that only known ARIA attributes are used. This is based on the WAI-ARIA States and Properties spec.  a11y-unknown-role permalink Elements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at WAI-ARIA site. \n        \n        PREVIOUS Frequently asked questions NEXT TypeScript =============================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================== \\](/foo)\n        \n    \n
  },
  {
    "title": "Frequently asked questions • Docs • Svelte",
    "url": "https://svelte.dev/docs/faq",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript MISC Frequently asked questions Edit this page on GitHub ON THIS PAGE I'm new to Svelte. Where should I start? permalink We think the best way to get started is playing through the interactive tutorial. Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser. Five to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial. Where can I get support? permalink If your question is about certain syntax, the API page is a good place to start. Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the existing questions tagged with Svelte or ask your own! There are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. Our Discord or the Reddit channel are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit. Are there any third-party resources? permalink Svelte Society maintains a list of books and videos. How can I get VS Code to syntax-highlight my .svelte files? permalink There is an official VS Code extension for Svelte. Is there a tool to automatically format my .svelte files? permalink You can use prettier with the prettier-plugin-svelte plugin. How do I document my components? permalink In editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments. /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* What should we call the user? \\\\\\\\\\\\\\*/ export let name = 'world'; Hello, {name} ============= Note: The @component is necessary in the HTML comment which describes your component. Does Svelte scale? permalink There will be a blog post about this eventually, but in the meantime, check out this issue. Is there a UI component library? permalink There are several UI component libraries as well as standalone components. Find them under the design systems section of the components page on the Svelte Society website. How do I test Svelte apps? permalink How your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte. A Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E). Unit Tests: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup Vitest for unit testing. There are a number of other test runners that could be used as well. Component Tests: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like Vitest to solutions that leverage an actual browser to provide a visual testing capability such as Playwright or Cypress. End-to-End Tests: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup Playwright for end-to-end testing. There are many other E2E test libraries available for use as well. Some resources for getting started with testing: Svelte Testing Library Svelte Component Testing in Cypress Example using vitest Example using uvu test runner with JSDOM Test Svelte components using Vitest & Playwright Component testing with WebdriverIO Is there a router? permalink The official routing library is SvelteKit. SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React. However, you can use any router library. A lot of people use page.js. There's also navaid, which is very similar. And universal-router, which is isomorphic with child routes, but without built-in history support. If you prefer a declarative HTML approach, there's the isomorphic svelte-routing library and a fork of it called svelte-navigator containing some additional functionality. If you need hash-based routing on the client side, check out svelte-spa-router or abstract-state-router. Routify is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR. You can see a community-maintained list of routers on sveltesociety.dev. Can I tell Svelte not to remove my unused styles? permalink No. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise. Svelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it: If it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or {@html ...}. If it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page. If you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using :global(...). But also keep in mind that you can wrap :global(...) around only part of a selector. .foo :global(.bar) { ... } will style any .bar elements that appear within the component's .foo elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want. Is Svelte v2 still available? permalink New features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability. The documentation is still available here. How do I do hot module reloading? permalink We recommend using SvelteKit, which supports HMR out of the box and is built on top of Vite and svelte-hmr. There are also community plugins for rollup and webpack. PREVIOUS Custom elements API NEXT Accessibility warnings"
  },
  {
    "title": "Custom elements API • Docs • Svelte",
    "url": "https://svelte.dev/docs/custom-elements-api",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript COMPILER AND API Custom elements API Edit this page on GitHub ON THIS PAGE Svelte components can also be compiled to custom elements (aka web components) using the customElement: true compiler option. You should specify a tag name for the component using the element. export let name = 'world'; Hello {name}! ============= You can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static element property which contains the custom element constructor and which is available when the customElement compiler option is true. import MyElement from './MyElement.svelte'; customElements.define('my-element', MyElement.element); // In Svelte 3, do this instead: // customElements.define('my-element', MyElement); Once a custom element has been defined, it can be used as a regular DOM element: document.body.innerHTML = \\\\\\\\\\\\\\` This is some slotted content \\\\\\\\\\\\\\`; By default, custom elements are compiled with accessors: true, which means that any props are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible). To prevent this, add accessors={false} to . const el = document.querySelector('my-element'); // get the current value of the 'name' prop console.log(el.name); // set a new value, updating the shadow DOM el.name = 'everybody'; Component lifecycle permalink Custom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately. When a custom element is created, the Svelte component it wraps is not created right away. It is only created in the next tick after the connectedCallback is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the extend option. When a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component. The inner Svelte component is destroyed in the next tick after the disconnectedCallback is invoked. Component options permalink When constructing a custom element, you can tailor several aspects by defining customElement as an object within since Svelte 4. This object may contain the following properties: tag: the mandatory tag property for the custom element's name shadow: an optional property that can be set to \"none\" to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots props: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings: attribute: string: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning attribute: \"\". reflect: boolean: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set reflect: true. type: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object': While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a String by default. This may not always be accurate. For instance, for a number type, define it using type: \"Number\" You don't need to list all properties, those not listed will use the default settings. extend: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use ElementInternals for better HTML form integration. { // Extend the class so we can let it participate in HTML forms return class extends customElementConstructor { static formAssociated = true; constructor() { super(); this.attachedInternals = this.attachInternals(); } // Add the function here, not below in the component so that // it's always available, not just when the inner Svelte component // is mounted randomIndex() { this.elementIndex = Math.random(); } }; } }} /> export let elementIndex; export let attachedInternals; // ... function check() { attachedInternals.checkValidity(); } ... Caveats and limitations permalink Custom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as most frameworks. There are, however, some important differences to be aware of: Styles are encapsulated, rather than merely scoped (unless you set shadow: \"none\"). This means that any non-component styles (such as you might have in a global.css file) will not apply to the custom element, including styles with the :global(...) modifier Instead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string Custom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads In Svelte, slotted content renders lazily. In the DOM, it renders eagerly. In other words, it will always be created even if the component's element is inside an {#if ...} block. Similarly, including a in an {#each ...} block will not cause the slotted content to be rendered multiple times The let: directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot Polyfills are required to support older browsers You can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use setContext on a parent custom element and read that with getContext in a child custom element. PREVIOUS Server-side component API NEXT Frequently asked questions"
  },
  {
    "title": "Server-side component API • Docs • Svelte",
    "url": "https://svelte.dev/docs/server-side-component-api",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript COMPILER AND API Server-side component API Edit this page on GitHub ON THIS PAGE const result = Component.render(...) Unlike client-side components, server-side components don't have a lifespan after you render them — their whole job is to create some HTML and CSS. For that reason, the API is somewhat different. A server-side component exposes a render method that can be called with optional props. It returns an object with head, html, and css properties, where head contains the contents of any elements encountered. You can import a Svelte component directly into Node using svelte/register. require('svelte/register'); const App = require('./App.svelte').default; const { head, html, css } = App.render({ answer: 42 }); The .render() method accepts the following parameters: parameter default description props {} An object of properties to supply to the component options {} An object of options The options object takes in the following options: option default description context new Map() A Map of root-level context key-value pairs to supply to the component const { head, html, css } = App.render( // props { answer: 42 }, // options { context: new Map(\\\\\\\\\\\\\\[\\\\\\\\\\\\\\['context-key', 'context-value'\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]) } ); PREVIOUS Client-side component API NEXT Custom elements API"
  },
  {
    "title": "Client-side component API • Docs • Svelte",
    "url": "https://svelte.dev/docs/client-side-component-api",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript COMPILER AND API Client-side component API Edit this page on GitHub ON THIS PAGE Creating a component permalink const component = new Component(options); A client-side component — that is, a component compiled with generate: 'dom' (or the generate option left unspecified) is a JavaScript class. import App from './App.svelte'; const app = new App({ target: document.body, props: { // assuming App.svelte contains something like // \\\\\\\\\\\\\\`export let answer\\\\\\\\\\\\\\`: answer: 42 } }); The following initialisation options can be provided: option default description target none An HTMLElement or ShadowRoot to render to. This option is required anchor null A child of target to render the component immediately before props {} An object of properties to supply to the component context new Map() A Map of root-level context key-value pairs to supply to the component hydrate false See below intro false If true, will play transitions on initial render, rather than waiting for subsequent state changes Existing children of target are left where they are. The hydrate option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the hydratable: true option. Hydration of elements only works properly if the server-side rendering code was also compiled with hydratable: true, which adds a marker to each element in the so that the component knows which elements it's responsible for removing during hydration. Whereas children of target are normally left alone, hydrate: true will cause any children to be removed. For that reason, the anchor option cannot be used alongside hydrate: true. The existing DOM doesn't need to match the component — Svelte will 'repair' the DOM as it goes. index.js import App from './App.svelte'; const app = new App({ target: document.querySelector('#server-rendered-html'), hydrate: true }); $set permalink component.$set(props); Programmatically sets props on an instance. component.$set({ x: 1 }) is equivalent to x = 1 inside the component's block. Calling this method schedules an update for the next microtask — the DOM is not updated synchronously. component.$set({ answer: 42 }); $on permalink component.$on(ev, callback); Causes the callback function to be called whenever the component dispatches an event. A function is returned that will remove the event listener when called. index.js const off = component.$on('selected', (event) => { console.log(event.detail.selection); }); off(); $destroy permalink component.$destroy(); Removes a component from the DOM and triggers any onDestroy handlers. Component props permalink component.prop; component.prop = value; If a component is compiled with accessors: true, each instance will have getters and setters corresponding to each of the component's props. Setting a value will cause a synchronous update, rather than the default async update caused by component.$set(...). By default, accessors is false, unless you're compiling as a custom element. index.js console.log(component.count); component.count += 1; PREVIOUS svelte/compiler NEXT Server-side component API"
  },
  {
    "title": "svelte/compiler • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-compiler",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript COMPILER AND API svelte/compiler Edit this page on GitHub ON THIS PAGE Typically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is vite-plugin-svelte. The SvelteKit framework provides a setup leveraging vite-plugin-svelte to build applications as well as a tool for packaging Svelte component libraries. Svelte Society maintains a list of other bundler plugins for additional tools like Rollup and Webpack. Nonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you. compile permalink function compile( source: string, options?: CompileOptions ): any; This is where the magic happens. svelte.compile takes your component source code, and turns it into a JavaScript module that exports a class. import { compile } from 'svelte/compiler'; const result = compile(source, { // options }); Refer to CompileOptions for all the available options. The returned result object contains the code for your component, along with useful bits of metadata. const { js, css, ast, warnings, vars, stats } = compile(source); Refer to CompileResult for a full description of the compile result. parse permalink function parse( template: string, options?: ParserOptions ): Ast; The parse function parses a component, returning only its abstract syntax tree. Unlike compiling with the generate: false option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time. import { parse } from 'svelte/compiler'; const ast = parse(source, { filename: 'App.svelte' }); preprocess permalink function preprocess( source: string, preprocessor: PreprocessorGroup | PreprocessorGroup\\\\\\\\\\\\\\[\\\\\\\\\\\\\\], options?: | { filename?: string | undefined; } | undefined ): Promise; A number of official and community-maintained preprocessing plugins are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less. You can write your own preprocessor using the svelte.preprocess API. The preprocess function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a block into vanilla CSS. The first argument is the component source code. The second is an array of preprocessors (or a single preprocessor, if you only have one), where a preprocessor is an object with a name which is required, and markup, script and style functions, each of which is optional. The markup function receives the entire component source text, along with the component's filename if it was specified in the third argument. The script and style functions receive the contents of and elements respectively (content) as well as the entire component source text (markup). In addition to filename, they get an object of the element's attributes. Each markup, script or style function must return an object (or a Promise that resolves to an object) with a code property, representing the transformed source code. Optionally they can return an array of dependencies which represents files to watch for changes, and a map object which is a sourcemap mapping back the transformation to the original code. script and style preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag. Preprocessor functions should return a map object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly. import { preprocess } from 'svelte/compiler'; import MagicString from 'magic-string'; const { code } = await preprocess( source, { markup: ({ content, filename }) => { const pos = content.indexOf('foo'); if (pos < 0) { return { code: content }; } const s = new MagicString(content, { filename }); s.overwrite(pos, pos + 3, 'bar', { storeName: true }); return { code: s.toString(), map: s.generateMap() }; } }, { filename: 'App.svelte' } ); If a dependencies array is returned, it will be included in the result object. This is used by packages like vite-plugin-svelte and rollup-plugin-svelte to watch additional files for changes, in the case where your <style> tag has an @import (for example). preprocess-sass.js import { preprocess } from 'svelte/compiler'; import MagicString from 'magic-string'; import sass from 'sass'; import { dirname } from 'path'; const { code } = await preprocess( source, { name: 'my-fancy-preprocessor', markup: ({ content, filename }) => { // Return code as is when no foo string present const pos = content.indexOf('foo'); if (pos < 0) { return; } // Replace foo with bar using MagicString which provides // a source map along with the changed code const s = new MagicString(content, { filename }); s.overwrite(pos, pos + 3, 'bar', { storeName: true }); return { code: s.toString(), map: s.generateMap({ hires: true, file: filename }) }; }, style: async ({ content, attributes, filename }) => { // only process <style lang=\"sass\"> if (attributes.lang !== 'sass') return; const { css, stats } = await new Promise((resolve, reject) => sass.render( { file: filename, data: content, includePaths: \\\\\\\\\\\\\\[dirname(filename)\\\\\\\\\\\\\\] }, (err, result) => { if (err) reject(err); else resolve(result); } ) ); // remove lang attribute from style tag delete attributes.lang; return { code: css.toString(), dependencies: stats.includedFiles, attributes }; } }, { filename: 'App.svelte' } ); Multiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, markup runs first, then script and style. In Svelte 3, all markup functions ran first, then all script and then all style preprocessors. This order was changed in Svelte 4. multiple-preprocessor.js import { preprocess } from 'svelte/compiler'; const { code } = await preprocess(source, \\\\\\\\\\\\\\[ { name: 'first preprocessor', markup: () => { console.log('this runs first'); }, script: () => { console.log('this runs second'); }, style: () => { console.log('this runs third'); } }, { name: 'second preprocessor', markup: () => { console.log('this runs fourth'); }, script: () => { console.log('this runs fifth'); }, style: () => { console.log('this runs sixth'); } } \\\\\\\\\\\\\\], { filename: 'App.svelte' }); walk permalink The walk function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of estree-walker. The walker takes an abstract syntax tree to walk and an object with two optional methods: enter and leave. For each node, enter is called (if present). Then, unless this.skip() is called during enter, each of the children are traversed, and then leave is called on the node. compiler-walk.js import { walk } from 'svelte/compiler'; walk(ast, { enter(node, parent, prop, index) { do\\\\\\\\\\\\\\_something(node); if (should\\\\\\\\\\\\\\_skip\\\\\\\\\\\\\\_children(node)) { this.skip(); } }, leave(node, parent, prop, index) { do\\\\\\\\\\\\\\_something\\\\\\\\\\\\\\_else(node); } }); VERSION permalink const VERSION: string; The current version, as set in package.json. import { VERSION } from 'svelte/compiler'; console.log(\\\\\\\\\\\\\\`running svelte version ${VERSION}\\\\\\\\\\\\\\`); Types permalink CompileOptions permalink interface CompileOptions {…} name?: string; DEFAULT 'Component' Sets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope). It will normally be inferred from filename filename?: string; DEFAULT null Used for debugging hints and sourcemaps. Your bundler plugin will set it automatically. generate?: 'dom' | 'ssr' | false; DEFAULT 'dom' If \"dom\", Svelte emits a JavaScript class for mounting to the DOM. If \"ssr\", Svelte emits an object with a render method suitable for server-side rendering. If false, no JavaScript or CSS is returned; just metadata. errorMode?: 'throw' | 'warn'; DEFAULT 'throw' If \"throw\", Svelte throws when a compilation error occurred. If \"warn\", Svelte will treat errors as warnings and add them to the warning report. varsReport?: 'full' | 'strict' | false; DEFAULT 'strict' If \"strict\", Svelte returns a variables report with only variables that are not globals nor internals. If \"full\", Svelte returns a variables report with all detected variables. If false, no variables report is returned. sourcemap?: object | string; DEFAULT null An initial sourcemap that will be merged into the final output sourcemap. This is usually the preprocessor sourcemap. enableSourcemap?: EnableSourcemap; DEFAULT true If true, Svelte generate sourcemaps for components. Use an object with js or css for more granular control of sourcemap generation. outputFilename?: string; DEFAULT null Used for your JavaScript sourcemap. cssOutputFilename?: string; DEFAULT null Used for your CSS sourcemap. sveltePath?: string; DEFAULT 'svelte' The location of the svelte package. Any imports from svelte or svelte/\\\\\\\\\\\\\\[module\\\\\\\\\\\\\\] will be modified accordingly. dev?: boolean; DEFAULT false If true, causes extra code to be added to components that will perform runtime checks and provide debugging information during development. accessors?: boolean; DEFAULT false If true, getters and setters will be created for the component's props. If false, they will only be created for readonly exported values (i.e. those declared with const, class and function). If compiling with customElement: true this option defaults to true. immutable?: boolean; DEFAULT false If true, tells the compiler that you promise not to mutate any objects. This allows it to be less conservative about checking whether values have changed. hydratable?: boolean; DEFAULT false If true when generating DOM code, enables the hydrate: true runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch. When generating SSR code, this adds markers to <head> elements so that hydration knows which to replace. legacy?: boolean; DEFAULT false If true, generates code that will work in IE9 and IE10, which don't support things like element.dataset. customElement?: boolean; DEFAULT false If true, tells the compiler to generate a custom element constructor instead of a regular Svelte component. tag?: string; DEFAULT null A string that tells Svelte what tag name to register the custom element with. It must be a lowercase alphanumeric string with at least one hyphen, e.g. \"my-element\". css?: 'injected' | 'external' | 'none' | boolean; 'injected' (formerly true), styles will be included in the JavaScript class and injected at runtime for the components actually rendered. 'external' (formerly false), the CSS will be returned in the css field of the compilation result. Most Svelte bundler plugins will set this to 'external' and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable .css files. 'none', styles are completely avoided and no CSS output is generated. loopGuardTimeout?: number; DEFAULT 0 A number that tells Svelte to break the loop if it blocks the thread for more than loopGuardTimeout ms. This is useful to prevent infinite loops. Only available when dev: true. namespace?: string; DEFAULT 'html' The namespace of the element; e.g., \"mathml\", \"svg\", \"foreign\". cssHash?: CssHashGetter; DEFAULT undefined A function that takes a { hash, css, name, filename } argument and returns the string that is used as a classname for scoped CSS. It defaults to returning svelte-${hash(css)}. preserveComments?: boolean; DEFAULT false If true, your HTML comments will be preserved during server-side rendering. By default, they are stripped out. preserveWhitespace?: boolean; DEFAULT false If true, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible. discloseVersion?: boolean; DEFAULT true If true, exposes the Svelte major version on the global window object in the browser. CompileResult permalink The returned shape of compile from svelte/compiler interface CompileResult {…} js: {…} The resulting JavaScript code from compling the component code: string; Code as a string map: any; A source map css: CssResult; The resulting CSS code from compling the component ast: Ast; The abstract syntax tree representing the structure of the component warnings: Warning\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; An array of warning objects that were generated during compilation. Each warning has several properties: code is a string identifying the category of warning message describes the issue in human-readable terms start and end, if the warning relates to a specific location, are objects with line, column and character properties frame, if applicable, is a string highlighting the offending code with line numbers vars: Var\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; An array of the component's declarations used by tooling in the ecosystem (like our ESLint plugin) to infer more information stats: { timings: { total: number; }; }; An object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same! CssHashGetter permalink type CssHashGetter = (args: { name: string; filename: string | undefined; css: string; hash: (input: string) => string; }) => string; EnableSourcemap permalink type EnableSourcemap = | boolean | { js: boolean; css: boolean }; MarkupPreprocessor permalink A markup preprocessor that takes a string of code and returns a processed version. type MarkupPreprocessor = (options: { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The whole Svelte file content \\\\\\\\\\\\\\*/ content: string; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The filename of the Svelte file \\\\\\\\\\\\\\*/ filename?: string; }) => Processed | void | Promise<Processed | void>; Preprocessor permalink A script/style preprocessor that takes a string of code and returns a processed version. type Preprocessor = (options: { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The script/style tag content \\\\\\\\\\\\\\*/ content: string; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The attributes on the script/style tag \\\\\\\\\\\\\\*/ attributes: Record<string, string | boolean>; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The whole Svelte file content \\\\\\\\\\\\\\*/ markup: string; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* The filename of the Svelte file \\\\\\\\\\\\\\*/ filename?: string; }) => Processed | void | Promise<Processed | void>; PreprocessorGroup permalink A preprocessor group is a set of preprocessors that are applied to a Svelte file. interface PreprocessorGroup {…} name?: string; Name of the preprocessor. Will be a required option in the next major version markup?: MarkupPreprocessor; style?: Preprocessor; script?: Preprocessor; Processed permalink The result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged. interface Processed {…} code: string; The new code map?: string | object; A source map mapping back to the original code dependencies?: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; A list of additional files to watch for changes attributes?: Record<string, string | boolean>; Only for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged. toString?: () => string; SveltePreprocessor permalink Utility type to extract the type of a preprocessor from a preprocessor group interface SveltePreprocessor< PreprocessorType extends keyof PreprocessorGroup, Options = any > {…} (options?: Options): Required<Pick<PreprocessorGroup, PreprocessorType>>; PREVIOUS svelte/action NEXT Client-side component API</x-turndown></x-turndown></x-turndown>"
  },
  {
    "title": "svelte/action • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-action",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/action Edit this page on GitHub ON THIS PAGE Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted: /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('svelte/action').Action} \\\\\\\\\\\\\\*/ function foo(node) { // the node has been mounted in the DOM return { destroy() { // the node has been removed from the DOM } }; } An action can have a parameter. If the returned value has an update method, it will be called immediately after Svelte has applied updates to the markup whenever that parameter changes. Don't worry that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition. /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {string} \\\\\\\\\\\\\\*/ export let bar; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('svelte/action').Action} \\\\\\\\\\\\\\*/ function foo(node, bar) { // the node has been mounted in the DOM return { update(bar) { // the value of \\\\\\\\\\\\\\`bar\\\\\\\\\\\\\\` has changed }, destroy() { // the node has been removed from the DOM } }; } Attributes permalink Sometimes actions emit custom events and apply custom attributes to the element they are applied to. To support this, actions typed with Action or ActionReturn type can have a last parameter, Attributes: /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* @type {import('svelte/action').Action) => void }>} \\\\\\\\\\\\\\*/ function foo(node, { prop }) { // the node has been mounted in the DOM //...LOGIC node.dispatchEvent(new CustomEvent('emit', { detail: 'hello' })); return { destroy() { // the node has been removed from the DOM } }; } Types permalink Action permalink Actions are functions that are called when an element is created. You can use this interface to type such actions. The following example defines an action that only works on elements and optionally accepts a parameter which it has a default value for: export const myAction: Action = (node, param = { someProperty: true }) => { // ... } Action and Action both signal that the action accepts no parameters. You can return an object with methods update and destroy from the function and type which additional attributes and events it has. See interface ActionReturn for more details. Docs: https://svelte.dev/docs/svelte-action interface Action< Element = HTMLElement, Parameter = undefined, Attributes extends Record = Record< never, any > > {…} ( ...args: undefined extends Parameter ? \\\\\\\\\\\\\\[node: Node, parameter?: Parameter\\\\\\\\\\\\\\] : \\\\\\\\\\\\\\[node: Node, parameter: Parameter\\\\\\\\\\\\\\] ): void | ActionReturn; ActionReturn permalink Actions can return an object containing the two properties defined in this interface. Both are optional. update: An action can have a parameter. This method will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup. ActionReturn and ActionReturn both mean that the action accepts no parameters. destroy: Method that is called after the element is unmounted Additionally, you can specify which additional attributes and events the action enables on the applied element. This applies to TypeScript typings only and has no effect at runtime. Example usage: interface Attributes { newprop?: string; 'on:event': (e: CustomEvent) => void; } export function myAction(node: HTMLElement, parameter: Parameter): ActionReturn { // ... return { update: (updatedParameter) => {...}, destroy: () => {...} }; } Docs: https://svelte.dev/docs/svelte-action interface ActionReturn< Parameter = undefined, Attributes extends Record = Record< never, any > > {…} update?: (parameter: Parameter) => void; destroy?: () => void; PREVIOUS svelte/easing NEXT svelte/compiler"
  },
  {
    "title": "svelte/easing • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-easing",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/easing Edit this page on GitHub ON THIS PAGE Easing functions specify the rate of change over time and are useful when working with Svelte's built-in transitions and animations as well as the tweened and spring utilities. svelte/easing contains 31 named exports, a linear ease and 3 variants of 10 different easing functions: in, out and inOut. You can explore the various eases using the ease visualiser in the examples section. ease in out inOut back backIn backOut backInOut bounce bounceIn bounceOut bounceInOut circ circIn circOut circInOut cubic cubicIn cubicOut cubicInOut elastic elasticIn elasticOut elasticInOut expo expoIn expoOut expoInOut quad quadIn quadOut quadInOut quart quartIn quartOut quartInOut quint quintIn quintOut quintInOut sine sineIn sineOut sineInOut PREVIOUS svelte/animate NEXT svelte/action"
  },
  {
    "title": "svelte/animate • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-animate",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/animate Edit this page on GitHub ON THIS PAGE svelte/animate flip Types The svelte/animate module exports one function for use with Svelte animations. flip permalink function flip( node: Element, { from, to }: { from: DOMRect; to: DOMRect; }, params?: FlipParams ): AnimationConfig; animate:flip={params} The flip function calculates the start and end position of an element and animates between them, translating the x and y values. flip stands for First, Last, Invert, Play. flip accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number | function, default d => Math.sqrt(d) \\\\\\\\\\\\\\* 120) — see below easing (function, default cubicOut) — an easing function duration can be provided as either: a number, in milliseconds. a function, distance: number => duration: number, receiving the distance the element will travel in pixels and returning the duration in milliseconds. This allows you to assign a duration that is relative to the distance travelled by each element. You can see a full example on the animations tutorial. import { flip } from 'svelte/animate'; import { quintOut } from 'svelte/easing'; let list = \\\\\\\\\\\\\\[1, 2, 3\\\\\\\\\\\\\\]; {#each list as n (n)} {n} {/each} Types permalink AnimationConfig permalink interface AnimationConfig {…} delay?: number; duration?: number; easing?: (t: number) => number; css?: (t: number, u: number) => string; tick?: (t: number, u: number) => void; FlipParams permalink interface FlipParams {…} delay?: number; duration?: number | ((len: number) => number); easing?: (t: number) => number; PREVIOUS svelte/transition NEXT svelte/easing"
  },
  {
    "title": "svelte/transition • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-transition",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/transition Edit this page on GitHub ON THIS PAGE The svelte/transition module exports seven functions: fade, blur, fly, slide, scale, draw and crossfade. They are for use with Svelte transitions. fade permalink function fade( node: Element, { delay, duration, easing }?: FadeParams | undefined ): TransitionConfig; transition:fade={params} in:fade={params} out:fade={params} Animates the opacity of an element from 0 to the current opacity for in transitions and from the current opacity to 0 for out transitions. fade accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number, default 400) — milliseconds the transition lasts easing (function, default linear) — an easing function You can see the fade transition in action in the transition tutorial. import { fade } from 'svelte/transition'; {#if condition} fades in and out {/if} blur permalink function blur( node: Element, { delay, duration, easing, amount, opacity }?: BlurParams | undefined ): TransitionConfig; transition:blur={params} in:blur={params} out:blur={params} Animates a blur filter alongside an element's opacity. blur accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number, default 400) — milliseconds the transition lasts easing (function, default cubicInOut) — an easing function opacity (number, default 0) - the opacity value to animate out to and in from amount (number | string, default 5) - the size of the blur. Supports css units (for example: \"4rem\"). The default unit is px import { blur } from 'svelte/transition'; {#if condition} fades in and out {/if} fly permalink function fly( node: Element, { delay, duration, easing, x, y, opacity }?: FlyParams | undefined ): TransitionConfig; transition:fly={params} in:fly={params} out:fly={params} Animates the x and y positions and the opacity of an element. in transitions animate from the provided values, passed as parameters to the element's default values. out transitions animate from the element's default values to the provided values. fly accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number, default 400) — milliseconds the transition lasts easing (function, default cubicOut) — an easing function x (number | string, default 0) - the x offset to animate out to and in from y (number | string, default 0) - the y offset to animate out to and in from opacity (number, default 0) - the opacity value to animate out to and in from x and y use px by default but support css units, for example x: '100vw' or y: '50%'. You can see the fly transition in action in the transition tutorial. import { fly } from 'svelte/transition'; import { quintOut } from 'svelte/easing'; {#if condition} flies in and out {/if} slide permalink function slide( node: Element, { delay, duration, easing, axis }?: SlideParams | undefined ): TransitionConfig; transition:slide={params} in:slide={params} out:slide={params} Slides an element in and out. slide accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number, default 400) — milliseconds the transition lasts easing (function, default cubicOut) — an easing function axis (x | y, default y) — the axis of motion along which the transition occurs import { slide } from 'svelte/transition'; import { quintOut } from 'svelte/easing'; {#if condition} slides in and out horizontally {/if} scale permalink function scale( node: Element, { delay, duration, easing, start, opacity }?: ScaleParams | undefined ): TransitionConfig; transition:scale={params} in:scale={params} out:scale={params} Animates the opacity and scale of an element. in transitions animate from an element's current (default) values to the provided values, passed as parameters. out transitions animate from the provided values to an element's default values. scale accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number, default 400) — milliseconds the transition lasts easing (function, default cubicOut) — an easing function start (number, default 0) - the scale value to animate out to and in from opacity (number, default 0) - the opacity value to animate out to and in from import { scale } from 'svelte/transition'; import { quintOut } from 'svelte/easing'; {#if condition} scales in and out {/if} draw permalink function draw( node: SVGElement & { getTotalLength(): number; }, { delay, speed, duration, easing }?: DrawParams | undefined ): TransitionConfig; transition:draw={params} in:draw={params} out:draw={params} Animates the stroke of an SVG element, like a snake in a tube. in transitions begin with the path invisible and draw the path to the screen over time. out transitions start in a visible state and gradually erase the path. draw only works with elements that have a getTotalLength method, like and . draw accepts the following parameters: delay (number, default 0) — milliseconds before starting speed (number, default undefined) - the speed of the animation, see below. duration (number | function, default 800) — milliseconds the transition lasts easing (function, default cubicInOut) — an easing function The speed parameter is a means of setting the duration of the transition relative to the path's length. It is a modifier that is applied to the length of the path: duration = length / speed. A path that is 1000 pixels with a speed of 1 will have a duration of 1000ms, setting the speed to 0.5 will double that duration and setting it to 2 will halve it. import { draw } from 'svelte/transition'; import { quintOut } from 'svelte/easing'; {#if condition} {/if} crossfade permalink function crossfade({ fallback, ...defaults }: CrossfadeParams & { fallback?: | (( node: Element, params: CrossfadeParams, intro: boolean ) => TransitionConfig) | undefined; }): \\\\\\\\\\\\\\[ ( node: any, params: CrossfadeParams & { key: any; } ) => () => TransitionConfig, ( node: any, params: CrossfadeParams & { key: any; } ) => () => TransitionConfig \\\\\\\\\\\\\\]; The crossfade function creates a pair of transitions called send and receive. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the fallback transition is used. crossfade accepts the following parameters: delay (number, default 0) — milliseconds before starting duration (number | function, default 800) — milliseconds the transition lasts easing (function, default cubicOut) — an easing function fallback (function) — A fallback transition to use for send when there is no matching element being received, and for receive when there is no element being sent. import { crossfade } from 'svelte/transition'; import { quintOut } from 'svelte/easing'; const \\\\\\\\\\\\\\[send, receive\\\\\\\\\\\\\\] = crossfade({ duration: 1500, easing: quintOut }); {#if condition} BIG ELEM ======== {:else} small elem {/if} Types permalink BlurParams permalink interface BlurParams {…} delay?: number; duration?: number; easing?: EasingFunction; amount?: number | string; opacity?: number; CrossfadeParams permalink interface CrossfadeParams {…} delay?: number; duration?: number | ((len: number) => number); easing?: EasingFunction; DrawParams permalink interface DrawParams {…} delay?: number; speed?: number; duration?: number | ((len: number) => number); easing?: EasingFunction; EasingFunction permalink type EasingFunction = (t: number) => number; FadeParams permalink interface FadeParams {…} delay?: number; duration?: number; easing?: EasingFunction; FlyParams permalink interface FlyParams {…} delay?: number; duration?: number; easing?: EasingFunction; x?: number | string; y?: number | string; opacity?: number; ScaleParams permalink interface ScaleParams {…} delay?: number; duration?: number; easing?: EasingFunction; start?: number; opacity?: number; SlideParams permalink interface SlideParams {…} delay?: number; duration?: number; easing?: EasingFunction; axis?: 'x' | 'y'; TransitionConfig permalink interface TransitionConfig {…} delay?: number; duration?: number; easing?: EasingFunction; css?: (t: number, u: number) => string; tick?: (t: number, u: number) => void; PREVIOUS svelte/motion NEXT svelte/animate"
  },
  {
    "title": "svelte/motion • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-motion",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/motion Edit this page on GitHub ON THIS PAGE svelte/motion tweened spring Types The svelte/motion module exports two functions, tweened and spring, for creating writable stores whose values change over time after set and update, rather than immediately. tweened permalink function tweened( value?: T | undefined, defaults?: TweenedOptions | undefined ): Tweened; Tweened stores update their values over a fixed duration. The following options are available: delay (number, default 0) — milliseconds before starting duration (number | function, default 400) — milliseconds the tween lasts easing (function, default t => t) — an easing function interpolate (function) — see below store.set and store.update can accept a second options argument that will override the options passed in upon instantiation. Both functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve. Out of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same 'shape', and their 'leaf' properties are also numbers). import { tweened } from 'svelte/motion'; import { cubicOut } from 'svelte/easing'; const size = tweened(1, { duration: 300, easing: cubicOut }); function handleClick() { // this is equivalent to size.update(n => n + 1) $size += 1; } embiggen If the initial value is undefined or null, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don't want any motion when the component first renders. import { tweened } from 'svelte/motion'; import { cubicOut } from 'svelte/easing'; const size = tweened(undefined, { duration: 300, easing: cubicOut }); $: $size = big ? 100 : 10; The interpolate option allows you to tween between any arbitrary values. It must be an (a, b) => t => value function, where a is the starting value, b is the target value, t is a number between 0 and 1, and value is the result. For example, we can use the d3-interpolate package to smoothly interpolate between two colours. import { interpolateLab } from 'd3-interpolate'; import { tweened } from 'svelte/motion'; const colors = \\\\\\\\\\\\\\['rgb(255, 62, 0)', 'rgb(64, 179, 255)', 'rgb(103, 103, 120)'\\\\\\\\\\\\\\]; const color = tweened(colors\\\\\\\\\\\\\\[0\\\\\\\\\\\\\\], { duration: 800, interpolate: interpolateLab }); {#each colors as c} color.set(c)}> {c} {/each} {$color} ======== spring permalink function spring( value?: T | undefined, opts?: SpringOpts | undefined ): Spring; A spring store gradually changes to its target value based on its stiffness and damping parameters. Whereas tweened stores change their values over a fixed duration, spring stores change over a duration that is determined by their existing velocity, allowing for more natural-seeming motion in many situations. The following options are available: stiffness (number, default 0.15) — a value between 0 and 1 where higher means a 'tighter' spring damping (number, default 0.8) — a value between 0 and 1 where lower means a 'springier' spring precision (number, default 0.01) — determines the threshold at which the spring is considered to have 'settled', where lower means more precise All of the options above can be changed while the spring is in motion, and will take immediate effect. import { spring } from 'svelte/motion'; const size = spring(100); size.stiffness = 0.3; size.damping = 0.4; size.precision = 0.005; As with tweened stores, set and update return a Promise that resolves if the spring settles. Both set and update can take a second argument — an object with hard or soft properties. { hard: true } sets the target value immediately; { soft: n } preserves existing momentum for n seconds before settling. { soft: true } is equivalent to { soft: 0.5 }. import { spring } from 'svelte/motion'; const coords = spring({ x: 50, y: 50 }); // updates the value immediately coords.set({ x: 100, y: 200 }, { hard: true }); // preserves existing momentum for 1s coords.update( (target\\\\\\\\\\\\\\_coords, coords) => { return { x: target\\\\\\\\\\\\\\_coords.x, y: coords.y }; }, { soft: 1 } ); See a full example on the spring tutorial. import { spring } from 'svelte/motion'; const coords = spring( { x: 50, y: 50 }, { stiffness: 0.1, damping: 0.25 } ); If the initial value is undefined or null, the first value change will take effect immediately, just as with tweened values (see above). import { spring } from 'svelte/motion'; const size = spring(); $: $size = big ? 100 : 10; Types permalink Spring permalink interface Spring extends Readable {…} set: (new\\\\\\\\\\\\\\_value: T, opts?: SpringUpdateOpts) => Promise; update: (fn: Updater, opts?: SpringUpdateOpts) => Promise; precision: number; damping: number; stiffness: number; Tweened permalink interface Tweened extends Readable {…} set(value: T, opts?: TweenedOptions): Promise; update(updater: Updater, opts?: TweenedOptions): Promise; PREVIOUS svelte/store NEXT svelte/transition"
  },
  {
    "title": "svelte/store • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-store",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte/store Edit this page on GitHub ON THIS PAGE The svelte/store module exports functions for creating readable, writable and derived stores. Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores. This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like. writable permalink function writable( value?: T | undefined, start?: StartStopNotifier | undefined ): Writable; Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods. set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it. update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store. store.js import { writable } from 'svelte/store'; const count = writable(0); count.subscribe((value) => { console.log(value); }); // logs '0' count.set(1); // logs '1' count.update((n) => n + 1); // logs '2' If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero. store.js import { writable } from 'svelte/store'; const count = writable(0, () => { console.log('got a subscriber'); return () => console.log('no more subscribers'); }); count.set(1); // does nothing const unsubscribe = count.subscribe((value) => { console.log(value); }); // logs 'got a subscriber', then '1' unsubscribe(); // logs 'no more subscribers' Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage. readable permalink function readable( value?: T | undefined, start?: StartStopNotifier | undefined ): Readable; Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable. import { readable } from 'svelte/store'; const time = readable(new Date(), (set) => { set(new Date()); const interval = setInterval(() => { set(new Date()); }, 1000); return () => clearInterval(interval); }); const ticktock = readable('tick', (set, update) => { const interval = setInterval(() => { update((sound) => (sound === 'tick' ? 'tock' : 'tick')); }, 1000); return () => clearInterval(interval); }); derived permalink function derived( stores: S, fn: ( values: StoresValues, set: (value: T) => void, update: (fn: Updater) => void ) => Unsubscriber | void, initial\\\\\\\\\\\\\\_value?: T | undefined ): Readable; function derived( stores: S, fn: (values: StoresValues) => T, initial\\\\\\\\\\\\\\_value?: T | undefined ): Readable; Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change. In the simplest version, derived takes a single store, and the callback returns a derived value. import { derived } from 'svelte/store'; const doubled = derived(a, ($a) => $a \\\\\\\\\\\\\\* 2); The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate. In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined. import { derived } from 'svelte/store'; const delayed = derived( a, ($a, set) => { setTimeout(() => set($a), 1000); }, 2000 ); const delayedIncrement = derived(a, ($a, set, update) => { set($a); setTimeout(() => update((x) => x + 1), 1000); // every time $a produces a value, this produces two // values, $a immediately and then $a + 1 a second later }); If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes. import { derived } from 'svelte/store'; const tick = derived( frequency, ($frequency, set) => { const interval = setInterval(() => { set(Date.now()); }, 1000 / $frequency); return () => { clearInterval(interval); }; }, 2000 ); In both cases, an array of arguments can be passed as the first argument instead of a single store. import { derived } from 'svelte/store'; const summed = derived(\\\\\\\\\\\\\\[a, b\\\\\\\\\\\\\\], (\\\\\\\\\\\\\\[$a, $b\\\\\\\\\\\\\\]) => $a + $b); const delayed = derived(\\\\\\\\\\\\\\[a, b\\\\\\\\\\\\\\], (\\\\\\\\\\\\\\[$a, $b\\\\\\\\\\\\\\], set) => { setTimeout(() => set($a + $b), 1000); }); readonly permalink function readonly(store: Readable): Readable; This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store. import { readonly, writable } from 'svelte/store'; const writableStore = writable(1); const readableStore = readonly(writableStore); readableStore.subscribe(console.log); writableStore.set(2); // console: 2 readableStore.set(2); // ERROR get permalink function get(store: Readable): T; Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so. This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths. import { get } from 'svelte/store'; const value = get(store); Types permalink Readable permalink Readable interface for subscribing. interface Readable {…} subscribe(this: void, run: Subscriber, invalidate?: Invalidator): Unsubscriber; run subscription callback invalidate cleanup callback Subscribe on value changes. StartStopNotifier permalink Start and stop notification callbacks. This function is called when the first subscriber subscribes. type StartStopNotifier = ( set: (value: T) => void, update: (fn: Updater) => void ) => void | (() => void); Subscriber permalink Callback to inform of a value updates. type Subscriber = (value: T) => void; Unsubscriber permalink Unsubscribes from value updates. type Unsubscriber = () => void; Updater permalink Callback to update a value. type Updater = (value: T) => T; Writable permalink Writable interface for both updating and subscribing. interface Writable extends Readable {…} set(this: void, value: T): void; value to set Set value and inform subscribers. update(this: void, updater: Updater): void; updater callback Update value using callback and inform subscribers. PREVIOUS svelte NEXT svelte/motion"
  },
  {
    "title": "svelte • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript RUNTIME svelte Edit this page on GitHub ON THIS PAGE svelte onMount beforeUpdate afterUpdate onDestroy tick setContext getContext hasContext getAllContexts createEventDispatcher Types The svelte package exposes lifecycle functions and the context API. onMount permalink function onMount( fn: () => | NotFunction | Promise\\\\\\\\> | (() => any) ): void; The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module). onMount does not run inside a server-side component. import { onMount } from 'svelte'; onMount(() => { console.log('the component has mounted'); }); If a function is returned from onMount, it will be called when the component is unmounted. import { onMount } from 'svelte'; onMount(() => { const interval = setInterval(() => { console.log('beep'); }, 1000); return () => clearInterval(interval); }); This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function. beforeUpdate permalink function beforeUpdate(fn: () => any): void; Schedules a callback to run immediately before the component is updated after any state change. The first time the callback runs will be before the initial onMount import { beforeUpdate } from 'svelte'; beforeUpdate(() => { console.log('the component is about to update'); }); afterUpdate permalink function afterUpdate(fn: () => any): void; Schedules a callback to run immediately after the component has been updated. The first time the callback runs will be after the initial onMount import { afterUpdate } from 'svelte'; afterUpdate(() => { console.log('the component just updated'); }); onDestroy permalink function onDestroy(fn: () => any): void; Schedules a callback to run immediately before the component is unmounted. Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component. import { onDestroy } from 'svelte'; onDestroy(() => { console.log('the component is being destroyed'); }); tick permalink function tick(): Promise; Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none. import { beforeUpdate, tick } from 'svelte'; beforeUpdate(async () => { console.log('the component is about to update'); await tick(); console.log('the component just updated'); }); setContext permalink function setContext(key: any, context: T): T; Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext. Like lifecycle functions, this must be called during component initialisation. import { setContext } from 'svelte'; setContext('answer', 42); Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive. getContext permalink function getContext(key: any): T; Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation. import { getContext } from 'svelte'; const answer = getContext('answer'); hasContext permalink function hasContext(key: any): boolean; Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation. import { hasContext } from 'svelte'; if (hasContext('answer')) { // do something } getAllContexts permalink function getAllContexts< T extends Map = Map >(): T; Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it. import { getAllContexts } from 'svelte'; const contexts = getAllContexts(); createEventDispatcher permalink function createEventDispatcher< EventMap extends Record = any >(): EventDispatcher; Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail. Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data. import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher(); dispatch('notify', 'detail value')}>Fire Event Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object. function callbackFunction(event) { console.log(\\\\\\\\\\\\\\`Notify fired! Detail: ${event.detail}\\\\\\\\\\\\\\`); } Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true. import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher(); function notify() { const shouldContinue = dispatch('notify', 'detail value', { cancelable: true }); if (shouldContinue) { // no one called preventDefault } else { // a listener called preventDefault } } You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it. Types permalink ComponentConstructorOptions permalink interface ComponentConstructorOptions< Props extends Record = Record > {…} target: Element | Document | ShadowRoot; anchor?: Element; props?: Props; context?: Map; hydrate?: boolean; intro?: boolean; $$inline?: boolean; ComponentEvents permalink Convenience type to get the events the given component expects. Example: import type { ComponentEvents } from 'svelte'; import Component from './Component.svelte'; function handleCloseEvent(event: ComponentEvents\\\\\\\\\\\\\\['close'\\\\\\\\\\\\\\]) { console.log(event.detail); } type ComponentEvents = Component extends SvelteComponent ? Events : never; ComponentProps permalink Convenience type to get the props the given component expects. Example: import type { ComponentProps } from 'svelte'; import Component from './Component.svelte'; const props: ComponentProps = { foo: 'bar' }; // Errors if these aren't the correct props type ComponentProps = Component extends SvelteComponent ? Props : never; ComponentType permalink Convenience type to get the type of a Svelte component. Useful for example in combination with dynamic components using . Example: import type { ComponentType, SvelteComponent } from 'svelte'; import Component1 from './Component1.svelte'; import Component2 from './Component2.svelte'; const component: ComponentType = someLogic() ? Component1 : Component2; const componentOfCertainSubType: ComponentType\\\\> = someLogic() ? Component1 : Component2; type ComponentType< Component extends SvelteComponent = SvelteComponent > = (new ( options: ComponentConstructorOptions< Component extends SvelteComponent ? Props : Record > ) => Component) & { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* The custom element version of the component. Only present if compiled with the \\\\\\\\\\\\\\`customElement\\\\\\\\\\\\\\` compiler option \\\\\\\\\\\\\\*/ element?: typeof HTMLElement; }; SvelteComponent permalink Base class for Svelte components with some minor dev-enhancements. Used when dev=true. Can be used to create strongly typed Svelte components. Example: permalink You have component library on npm called component-library, from which you export a component called MyComponent. For Svelte+TypeScript users, you want to provide typings. Therefore you create a index.d.ts: import { SvelteComponent } from \"svelte\"; export class MyComponent extends SvelteComponent<{foo: string}> {} Typing this makes it possible for IDEs like VS Code with the Svelte extension to provide intellisense and to use the component like this in a Svelte file with TypeScript: import { MyComponent } from \"component-library\"; class SvelteComponent< Props extends Record = any, Events extends Record = any, Slots extends Record = any > {…} \\\\\\\\\\\\\\[prop: string\\\\\\\\\\\\\\]: any; constructor(options: ComponentConstructorOptions); $destroy(): void; $capture\\\\\\\\\\\\\\_state(): void; $inject\\\\\\\\\\\\\\_state(): void; SvelteComponentTyped permalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512 class SvelteComponentTyped< Props extends Record = any, Events extends Record = any, Slots extends Record = any > extends SvelteComponent {} PREVIOUS Special elements NEXT svelte/store"
  },
  {
    "title": "Special elements • Docs • Svelte",
    "url": "https://svelte.dev/docs/special-elements",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Special elements Edit this page on GitHub ON THIS PAGE Special elements permalink Components can have child content, in the same way that elements can. The content is exposed in the child component using the element, which can contain fallback content that is rendered if no children are provided. this fallback content will be rendered when no content is provided, like in the first example this is some child content that will overwrite the default slot content Note: If you want to render regular element, You can use . permalink Named slots allow consumers to target specific areas. They can also have fallback content. No header was provided Some content between header and footer Hello ===== Copyright (c) 2019 Svelte Industries Components can be placed in a named slot using the syntax . In order to place content in a slot without using a wrapper element, you can use the special element . No header was provided Some content between header and footer All rights reserved. Copyright (c) 2019 Svelte Industries $$slots permalink $$slots is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in $$slots. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it. Note that explicitly passing in an empty named slot will add that slot's name to $$slots. For example, if a parent passes to a child component, $$slots.title will be truthy within the child. {#if $$slots.description} \\\\\\* \\\\\\* \\\\\\* {/if} Blog Post Title =============== permalink Slots can be rendered zero or more times and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive. The usual shorthand rules apply — let:item is equivalent to let:item={item}, and is equivalent to . {#each items as item} {/each} {thing.text} Named slots can also expose values. The let: directive goes on the element with the slot attribute. {#each items as item} {/each} {item.text} Copyright (c) 2019 Svelte Industries permalink The element allows a component to include itself, recursively. It cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop. /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {number} \\\\\\\\\\\\\\*/ export let count; {#if count > 0} counting down... {count} {:else} lift-off! {/if} permalink The element renders a component dynamically, using the component constructor specified as the this property. When the property changes, the component is destroyed and recreated. If this is falsy, no component is rendered. permalink The element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element. The only supported binding is bind:this, since the element type-specific bindings that Svelte does at build time (e.g. bind:value for input elements) do not work with a dynamic tag type. If this has a nullish value, the element and its children will not be rendered. If this is the name of a void element (e.g., br) and has child elements, a runtime error will be thrown in development mode. let tag = 'div'; export let handler; Foo permalink The element allows you to add event listeners to the window object without worrying about removing them when the component is destroyed, or checking for the existence of window when server-side rendering. Unlike , this element may only appear at the top level of your component and must never be inside a block or element. /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {KeyboardEvent} event \\\\\\\\\\\\\\*/ function handleKeydown(event) { alert(\\\\\\\\\\\\\\`pressed the ${event.key} key\\\\\\\\\\\\\\`); } You can also bind to the following properties: innerWidth innerHeight outerWidth outerHeight scrollX scrollY online — an alias for window.navigator.onLine devicePixelRatio All except scrollX and scrollY are readonly. Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of scrollX and scrollY will cause scrolling. However, if the scrolling behaviour is desired, call scrollTo() in onMount(). permalink Similarly to , this element allows you to add listeners to events on document, such as visibilitychange, which don't fire on window. It also lets you use actions on document. As with , this element may only appear the top level of your component and must never be inside a block or element. You can also bind to the following properties: fullscreenElement visibilityState All are readonly. permalink Similarly to , this element allows you to add listeners to events on document.body, such as mouseenter and mouseleave, which don't fire on window. It also lets you use actions on the element. As with and , this element may only appear the top level of your component and must never be inside a block or element. permalink ... This element makes it possible to insert elements into document.head. During server-side rendering, head content is exposed separately to the main html content. As with , and , this element may only appear at the top level of your component and must never be inside a block or element. Hello world! permalink The element provides a place to specify per-component compiler options, which are detailed in the compiler section. The possible options are: immutable={true} — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed immutable={false} — the default. Svelte will be more conservative about whether or not mutable objects have changed accessors={true} — adds getters and setters for the component's props accessors={false} — the default namespace=\"...\" — the namespace where this component will be used, most commonly \"svg\"; use the \"foreign\" namespace to opt out of case-insensitive attribute names and HTML-specific warnings customElement=\"...\" — the name to use when compiling this component as a custom element permalink The element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact. No header was provided Some content between header and footer Hello ===== All rights reserved. Copyright (c) 2019 Svelte Industries PREVIOUS Component directives NEXT svelte"
  },
  {
    "title": "Element directives • Docs • Svelte",
    "url": "https://svelte.dev/docs/element-directives",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Element directives Edit this page on GitHub ON THIS PAGE As well as attributes, elements can have directives, which control the element's behaviour in some way. on:eventname permalink on:eventname={handler} on:eventname|modifiers={handler} Use the on: directive to listen to DOM events. App.svelte let count = 0; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {MouseEvent} event \\\\\\\\\\\\\\*/ function handleClick(event) { count += 1; } count: {count} Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters. (count += 1)}> count: {count} Add modifiers to DOM events with the | character. The following modifiers are available: preventDefault — calls event.preventDefault() before running the handler stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired. passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so) nonpassive — explicitly set passive: false capture — fires the handler during the capture phase instead of the bubbling phase once — remove the handler after the first time it runs self — only trigger handler if event.target is the element itself trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action. Modifiers can be chained together, e.g. on:click|once|capture={...}. If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it. The component itself will emit the click event It's possible to have multiple event listeners for the same event: let counter = 0; function increment() { counter = counter + 1; } /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {MouseEvent} event \\\\\\\\\\\\\\*/ function track(event) { trackEvent(event); } Click me! bind:property permalink bind:property={variable} Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements. The simplest bindings reflect the value of a property, such as input.value. If the name matches the value, you can use a shorthand. Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type=\"number\"), the value is undefined. On elements with type=\"file\", you can use bind:files to get the FileList of selected files. It is readonly. Upload a picture: If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called. let value = 'Hello World'; console.log('Old value:', value)} bind:value on:input={() => console.log('New value:', value)} /> Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change. Binding value permalink A value binding corresponds to the value property on the selected , which can be any value (not just strings, as is normally the case in the DOM). a b c A element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected . Rice Beans Cheese Guac (extra) When the value of an matches its text content, the attribute can be omitted. Rice Beans Cheese Guac (extra) Elements with the contenteditable attribute support the following bindings: innerHTML innerText textContent There are slight differences between each of these, read more about them here. elements support binding to the open property. Details Something small enough to escape casual notice. Media element bindings permalink Media elements ( and ) have their own set of bindings — seven readonly ones... duration (readonly) — the total duration of the video, in seconds buffered (readonly) — an array of {start, end} objects played (readonly) — ditto seekable (readonly) — ditto seeking (readonly) — boolean ended (readonly) — boolean readyState (readonly) — number between (and including) 0 and 4 ...and five two-way bindings: currentTime — the current playback time in the video, in seconds playbackRate — how fast or slow to play the video, where 1 is 'normal' paused — this one should be self-explanatory volume — a value between 0 and 1 muted — a boolean value indicating whether the player is muted Videos additionally have readonly videoWidth and videoHeight bindings. Image element bindings permalink Image elements () have two readonly bindings: naturalWidth (readonly) — the original width of the image, available after the image has loaded naturalHeight (readonly) — the original height of the image, available after the image has loaded Block-level element bindings permalink Block-level elements have 4 read-only bindings, measured using a technique similar to this one: clientWidth clientHeight offsetWidth offsetHeight bind:group permalink bind:group={variable} Inputs that work together can use bind:group. let tortilla = 'Plain'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {Array} \\\\\\\\\\\\\\*/ let fillings = \\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; bind:group only works if the inputs are in the same Svelte component. bind:this permalink bind:this={dom\\\\\\\\\\\\\\_node} To get a reference to a DOM node, use bind:this. import { onMount } from 'svelte'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {HTMLCanvasElement} \\\\\\\\\\\\\\*/ let canvasElement; onMount(() => { const ctx = canvasElement.getContext('2d'); drawStuff(ctx); }); class:name permalink class:name={value} class:name A class: directive provides a shorter way of toggling a class on an element. ... ... ... ... style:property permalink style:property={value} style:property=\"value\" style:property The style: directive provides a shorthand for setting multiple styles on an element. ... ... ... ... ... ... When style: directives are combined with style attributes, the directives will take precedence: This will be red use:action permalink use:action use:action={parameters} action = (node: HTMLElement, parameters: any) => { update?: (parameters: any) => void, destroy?: () => void } Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted: /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('svelte/action').Action} \\\\\\\\\\\\\\*/ function foo(node) { // the node has been mounted in the DOM return { destroy() { // the node has been removed from the DOM } }; } An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup. Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition. export let bar; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('svelte/action').Action} \\\\\\\\\\\\\\*/ function foo(node, bar) { // the node has been mounted in the DOM return { update(bar) { // the value of \\\\\\\\\\\\\\`bar\\\\\\\\\\\\\\` has changed }, destroy() { // the node has been removed from the DOM } }; } Read more in the svelte/action page. transition:fn permalink transition:fn transition:fn={params} transition:fn|global transition:fn|global={params} transition:fn|local transition:fn|local={params} transition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => { delay?: number, duration?: number, easing?: (t: number) => number, css?: (t: number, u: number) => string, tick?: (t: number, u: number) => void } A transition is triggered by an element entering or leaving the DOM as a result of a state change. When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed. The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress. {#if visible} fades in and out {/if} Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed. {#if x} {#if y} fades in and out only when y changes fades in and out when x or y change {/if} {/if} By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global. Transition parameters permalink Like actions, transitions can have parameters. (The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.) {#if visible} fades in and out over two seconds {/if} Custom transition functions permalink Transitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element. The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t. The function is called repeatedly before the transition begins, with different t and u arguments. import { elasticOut } from 'svelte/easing'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {boolean} \\\\\\\\\\\\\\*/ export let visible; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* @param {HTMLElement} node \\\\\\\\\\\\\\* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params \\\\\\\\\\\\\\*/ function whoosh(node, params) { const existingTransform = getComputedStyle(node).transform.replace('none', ''); return { delay: params.delay || 0, duration: params.duration || 400, easing: params.easing || elasticOut, css: (t, u) => \\\\\\\\\\\\\\`transform: ${existingTransform} scale(${t})\\\\\\\\\\\\\\` }; } {#if visible} whooshes in {/if} A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments. If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices. App.svelte export let visible = false; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* @param {HTMLElement} node \\\\\\\\\\\\\\* @param {{ speed?: number }} params \\\\\\\\\\\\\\*/ function typewriter(node, { speed = 1 }) { const valid = node.childNodes.length === 1 && node.childNodes\\\\\\\\\\\\\\[0\\\\\\\\\\\\\\].nodeType === Node.TEXT\\\\\\\\\\\\\\_NODE; if (!valid) { throw new Error(\\\\\\\\\\\\\\`This transition only works on elements with a single text node child\\\\\\\\\\\\\\`); } const text = node.textContent; const duration = text.length / (speed \\\\\\\\\\\\\\* 0.01); return { duration, tick: (t) => { const i = ~~(text.length \\\\\\\\\\\\\\* t); node.textContent = text.slice(0, i); } }; } {#if visible} The quick brown fox jumps over the lazy dog {/if} If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible. Transition functions also receive a third argument, options, which contains information about the transition. Available values in the options object are: direction - one of in, out, or both depending on the type of transition Transition events permalink An element with transitions will dispatch the following events in addition to any standard DOM events: introstart introend outrostart outroend {#if visible} (status = 'intro started')} on:outrostart={() => (status = 'outro started')} on:introend={() => (status = 'intro ended')} on:outroend={() => (status = 'outro ended')} > Flies in and out {/if} in:fn/out:fn permalink in:fn in:fn={params} in:fn|global in:fn|global={params} in:fn|local in:fn|local={params} out:fn out:fn={params} out:fn|global out:fn|global={params} out:fn|local out:fn|local={params} Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM. Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch. {#if visible} flies in, fades out {/if} animate:fn permalink animate:name animate:name={params} animation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => { delay?: number, duration?: number, easing?: (t: number) => number, css?: (t: number, u: number) => string, tick?: (t: number, u: number) => void } DOMRect { bottom: number, height: number, ​​left: number, right: number, ​top: number, width: number, x: number, y: number } An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block. Animations can be used with Svelte's built-in animation functions or custom animation functions. {#each list as item, index (item)}\\* {item} {/each} Animation Parameters permalink As with actions and transitions, animations can have parameters. (The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.) {#each list as item, index (item)}\\* {item} {/each} Custom animation functions permalink Animations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated. If the returned object has a css method, Svelte will create a CSS animation that plays on the element. The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t. The function is called repeatedly before the animation begins, with different t and u arguments. import { cubicOut } from 'svelte/easing'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* @param {HTMLElement} node \\\\\\\\\\\\\\* @param {{ from: DOMRect; to: DOMRect }} states \\\\\\\\\\\\\\* @param {any} params \\\\\\\\\\\\\\*/ function whizz(node, { from, to }, params) { const dx = from.left - to.left; const dy = from.top - to.top; const d = Math.sqrt(dx \\\\\\\\\\\\\\* dx + dy \\\\\\\\\\\\\\* dy); return { delay: 0, duration: Math.sqrt(d) \\\\\\\\\\\\\\* 120, easing: cubicOut, css: (t, u) => \\\\\\\\\\\\\\`transform: translate(${u \\\\\\\\\\\\\\* dx}px, ${u \\\\\\\\\\\\\\* dy}px) rotate(${t \\\\\\\\\\\\\\* 360}deg);\\\\\\\\\\\\\\` }; } {#each list as item, index (item)} {item} {/each} A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments. If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices. import { cubicOut } from 'svelte/easing'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* @param {HTMLElement} node \\\\\\\\\\\\\\* @param {{ from: DOMRect; to: DOMRect }} states \\\\\\\\\\\\\\* @param {any} params \\\\\\\\\\\\\\*/ function whizz(node, { from, to }, params) { const dx = from.left - to.left; const dy = from.top - to.top; const d = Math.sqrt(dx \\\\\\\\\\\\\\* dx + dy \\\\\\\\\\\\\\* dy); return { delay: 0, duration: Math.sqrt(d) \\\\\\\\\\\\\\* 120, easing: cubicOut, tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' }) }; } {#each list as item, index (item)} {item} {/each} PREVIOUS Special tags NEXT Component directives"
  },
  {
    "title": "Component directives • Docs • Svelte",
    "url": "https://svelte.dev/docs/component-directives",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Component directives Edit this page on GitHub ON THIS PAGE on:eventname permalink on:eventname={handler} Components can emit events using createEventDispatcher or by forwarding DOM events. import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher(); dispatch('hello')}> one two Listening for component events looks the same as listening for DOM events: As with DOM events, if the on: directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it. \\\\\\\\--style-props permalink --style-props=\"anycssvalue\" You can also pass styles as props to components for the purposes of theming, using CSS custom properties. Svelte's implementation is essentially syntactic sugar for adding a wrapper element. This example: Desugars to this: Note: Since this is an extra , beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature. For SVG namespace, the example above desugars into using instead: Note: Since this is an extra , beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature. Svelte's CSS Variables support allows for easily themeable components: .potato-slider-rail { background-color: var(--rail-color, var(--theme-color, 'purple')); } So you can set a high-level theme color: /\\\\\\\\\\\\\\* global.css \\\\\\\\\\\\\\*/ html { --theme-color: black; } Or override it at the consumer level: bind:property permalink bind:property={variable} You can bind to component props using the same syntax as for elements. While Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using bind:property allows changes to the property from within the component to flow back up out of the component. bind:this permalink bind:this={component\\\\\\\\\\\\\\_instance} Components also support bind:this, allowing you to interact with component instances programmatically. cart.empty()}> Empty shopping cart Note that we can't do {cart.empty} since cart is undefined when the button is first rendered and throws an error. PREVIOUS Element directives NEXT Special elements"
  },
  {
    "title": "Logic blocks • Docs • Svelte",
    "url": "https://svelte.dev/docs/logic-blocks",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Logic blocks Edit this page on GitHub ON THIS PAGE {#if ...} permalink {#if expression}...{/if} {#if expression}...{:else if expression}...{/if} {#if expression}...{:else}...{/if} Content that is conditionally rendered can be wrapped in an if block. {#if answer === 42} what was the question? {/if} Additional conditions can be added with {:else if expression}, optionally ending in an {:else} clause. {#if porridge.temperature > 100} too hot! {:else if 80 > porridge.temperature} too cold! {:else} just right! {/if} (Blocks don't have to wrap elements, they can also wrap text within elements!) {#each ...} permalink {#each expression as name}...{/each} {#each expression as name, index}...{/each} {#each expression as name (key)}...{/each} {#each expression as name, index (key)}...{/each} {#each expression as name}...{:else}...{/each} Iterating over lists of values can be done with an each block. Shopping list ============= {#each items as item}\\\\\\* {item.name} x {item.qty} {/each} You can use each blocks to iterate over any array or array-like value — that is, any object with a length property. An each block can also specify an index, equivalent to the second argument in an array.map(...) callback: {#each items as item, i}\\\\\\* {i + 1}: {item.name} x {item.qty} {/each} If a key expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change. {#each items as item (item.id)}\\\\\\* {item.name} x {item.qty} {/each} {#each items as item, i (item.id)}\\\\\\* {i + 1}: {item.name} x {item.qty} {/each} You can freely use destructuring and rest patterns in each blocks. {#each items as { id, name, qty }, i (id)}\\\\\\* {i + 1}: {name} x {qty} {/each} {#each objects as { id, ...rest }}\\\\\\* {id} {/each} {#each items as \\\\\\\\\\\\\\[id, ...rest\\\\\\\\\\\\\\]}\\\\\\* {id} {/each} An each block can also have an {:else} clause, which is rendered if the list is empty. {#each todos as todo} {todo.text} {:else} No tasks today! {/each} Since Svelte 4 it is possible to iterate over iterables like Map or Set. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using Array.from before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant. {#await ...} permalink {#await expression}...{:then name}...{:catch name}...{/await} {#await expression}...{:then name}...{/await} {#await expression then name}...{/await} {#await expression catch name}...{/await} Await blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected. In SSR mode, only the pending branch will be rendered on the server. If the provided expression is not a Promise only the fulfilled branch will be rendered, including in SSR mode. {#await promise} waiting for the promise to resolve... {:then value} The value is {value} {:catch error} Something went wrong: {error.message} {/await} The catch block can be omitted if you don't need to render anything when the promise rejects (or no error is possible). {#await promise} waiting for the promise to resolve... {:then value} The value is {value} {/await} If you don't care about the pending state, you can also omit the initial block. {#await promise then value} The value is {value} {/await} Similarly, if you only want to show the error state, you can omit the then block. {#await promise catch error} The error is {error} {/await} {#key ...} permalink {#key expression}...{/key} Key blocks destroy and recreate their contents when the value of an expression changes. This is useful if you want an element to play its transition whenever a value changes. {#key value} {value} {/key} When used around components, this will cause them to be reinstantiated and reinitialised. {#key value} {/key} PREVIOUS Basic markup NEXT Special tags"
  },
  {
    "title": "Special tags • Docs • Svelte",
    "url": "https://svelte.dev/docs/special-tags",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Special tags Edit this page on GitHub ON THIS PAGE {@html ...} permalink {@html expression} In a text expression, characters like < and > are escaped; however, with HTML expressions, they're not. The expression should be valid standalone HTML — {@html \" \"}content{@html \" \"} will not work, because is not valid HTML. It also will not compile Svelte code. Svelte does not sanitize expressions before injecting HTML. If the data comes from an untrusted source, you must sanitize it, or you are exposing your users to an XSS vulnerability. {post.title} ============ {@html post.content} {@debug ...} permalink {@debug} {@debug var1, var2, ..., varN} The {@debug ...} tag offers an alternative to console.log(...). It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open. let user = { firstname: 'Ada', lastname: 'Lovelace' }; {@debug user} Hello {user.firstname}! ======================= {@debug ...} accepts a comma-separated list of variable names (not arbitrary expressions). {@debug user} {@debug user1, user2, user3} {@debug user.firstname} {@debug myArray\\\\\\\\\\\\\\[0\\\\\\\\\\\\\\]} {@debug !isReady} {@debug typeof user === 'object'} The {@debug} tag without any arguments will insert a debugger statement that gets triggered when any state changes, as opposed to the specified variables. {@const ...} permalink {@const assignment} The {@const ...} tag defines a local constant. export let boxes; {#each boxes as box} {@const area = box.width \\\\\\\\\\\\\\* box.height} {box.width} \\\\\\\\\\\\\\* {box.height} = {area} {/each} {@const} is only allowed as direct child of {#if}, {:else if}, {:else}, {#each}, {:then}, {:catch}, or . PREVIOUS Logic blocks NEXT Element directives"
  },
  {
    "title": "Svelte components • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-components",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Svelte components Edit this page on GitHub ON THIS PAGE Svelte components Components are the building blocks of Svelte applications. They are written into .svelte files, using a superset of HTML. All three sections — script, styles and markup — are optional. <script> // logic goes here /\\\\\\\\\\\\\\* styles go here \\\\\\\\\\\\\\*/ permalink A <script> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules: 1. export creates a component prop permalink Svelte uses the export keyword to mark a variable declaration as a property or prop, which means it becomes accessible to consumers of the component (see the section on attributes and props for more information). <script> export let foo; // Values that are passed in as props // are immediately available console.log({ foo }); You can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is undefined) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to undefined (rather than its initial value). In development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined. export let bar = 'optional default initial value'; export let baz = undefined; If you export a const, class or function, it is readonly from outside the component. Functions are valid prop values, however, as shown below. App.svelte // these are readonly export const thisIs = 'readonly'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {string} name \\\\\\\\\\\\\\*/ export function greet(name) { alert(\\\\\\\\\\\\\\`hello ${name}!\\\\\\\\\\\\\\`); } // this is a prop export let format = (n) => n.toFixed(2); Readonly props can be accessed as properties on the element, tied to the component using bind:this syntax. You can use reserved words as prop names. App.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {string} \\\\\\\\\\\\\\*/ let className; // creates a \\\\\\\\\\\\\\`class\\\\\\\\\\\\\\` property, even // though it is a reserved word export { className as class }; 2\\\\\\\\. Assignments are 'reactive' permalink To change component state and trigger a re-render, just assign to a locally declared variable. Update expressions (count += 1) and property assignments (obj.x = y) have the same effect. let count = 0; function handleClick() { // calling this function will trigger an // update if the markup references \\\\\\\\\\\\\\`count\\\\\\\\\\\\\\` count = count + 1; } Because Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the tutorial. let arr = \\\\\\\\\\\\\\[0, 1\\\\\\\\\\\\\\]; function handleClick() { // this method call does not trigger an update arr.push(2); // this assignment will trigger an update // if the markup references \\\\\\\\\\\\\\`arr\\\\\\\\\\\\\\` arr = arr; } Svelte's blocks are run only when the component is created, so assignments within a <script> block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section. <script> export let person; // this will only set \\\\\\\\\\\\\\`name\\\\\\\\\\\\\\` on component creation // it will not update when \\\\\\\\\\\\\\`person\\\\\\\\\\\\\\` does let { name } = person; 3\\\\\\\\. $: marks a statement as reactive permalink Any top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the $: JS label syntax. Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed. export let title; export let person; // this will update \\\\\\\\\\\\\\`document.title\\\\\\\\\\\\\\` whenever // the \\\\\\\\\\\\\\`title\\\\\\\\\\\\\\` prop changes $: document.title = title; $: { console.log(\\\\\\\\\\\\\\`multiple statements can be combined\\\\\\\\\\\\\\`); console.log(\\\\\\\\\\\\\\`the current title is ${title}\\\\\\\\\\\\\\`); } // this will update \\\\\\\\\\\\\\`name\\\\\\\\\\\\\\` when 'person' changes $: ({ name } = person); // don't do this. it will run before the previous line let name2 = name; Only values which directly appear within the $: block will become dependencies of the reactive statement. For example, in the code below total will only update when x changes, but not y. App.svelte let x = 0; let y = 0; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {number} value \\\\\\\\\\\\\\*/ function yPlusAValue(value) { return value + y; } $: total = yPlusAValue(x); Total: {total} x++}> Increment X y++}> Increment Y It is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that yDependent will not be updated when x is updated in the following example: let x = 0; let y = 0; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {number} value \\\\\\\\\\\\\\*/ function setY(value) { y = value; } $: yDependent = y; $: setY(x); Moving the line $: yDependent = y below $: setY(x) will cause yDependent to be updated when x is updated. If a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a let declaration on your behalf. App.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {number} \\\\\\\\\\\\\\*/ export let num; // we don't need to declare \\\\\\\\\\\\\\`squared\\\\\\\\\\\\\\` and \\\\\\\\\\\\\\`cubed\\\\\\\\\\\\\\` // — Svelte does it for us $: squared = num \\\\\\\\\\\\\\* num; $: cubed = squared \\\\\\\\\\\\\\* num; 4\\\\\\\\. Prefix stores with $ to access their values permalink A store is an object that allows reactive access to a value via a simple store contract. The svelte/store module contains minimal store implementations which fulfil this contract. Any time you have a reference to a store, you can access its value inside a component by prefixing it with the $ character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate. Assignments to $-prefixed variables require that the variable be a writable store, and will result in a call to the store's .set method. Note that the store must be declared at the top level of the component — not inside an if block or a function, for example. Local variables (that do not represent store values) must not have a $ prefix. import { writable } from 'svelte/store'; const count = writable(0); console.log($count); // logs 0 count.set(1); console.log($count); // logs 1 $count = 2; console.log($count); // logs 2 Store contract permalink store = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void } You can create your own stores without relying on svelte/store, by implementing the store contract: A store must contain a .subscribe method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling .subscribe. All of a store's active subscription functions must later be synchronously called whenever the store's value changes. The .subscribe method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store. A store may optionally contain a .set method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a writable store. For interoperability with RxJS Observables, the .subscribe method is also allowed to return an object with an .unsubscribe method, rather than return the unsubscription function directly. Note however that unless .subscribe synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as undefined until it does. permalink A <script> tag with a context=\"module\" attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <script> (and the component markup) but not vice versa. You can export bindings from this block, and they will become exports of the compiled module. You cannot export default, since the default export is the component itself. Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a store. <script context=\"module\"> let totalComponents = 0; // the export keyword allows this function to imported with e.g. // \\\\\\\\\\\\\\`import Example, { alertTotal } from './Example.svelte'\\\\\\\\\\\\\\` export function alertTotal() { alert(totalComponents); } totalComponents += 1; console.log(\\\\\\\\\\\\\\`total number of times this component has been created: ${totalComponents}\\\\\\\\\\\\\\`); permalink CSS inside a <style> block will be scoped to that component. This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. svelte-123xyz). <style> p { /\\\\\\\\\\\\\\* this will only affect <p> elements in this component \\\\\\\\\\\\\\*/ color: burlywood; } To apply styles to a selector globally, use the :global(...) modifier. :global(body) { /\\\\\\\\\\\\\\* this will apply to <body> \\\\\\\\\\\\\\*/ margin: 0; } div :global(strong) { /\\\\\\\\\\\\\\* this will apply to all <strong> elements, in any component, that are inside <div> elements belonging to this component \\\\\\\\\\\\\\*/ color: goldenrod; } p:global(.red) { /\\\\\\\\\\\\\\* this will apply to all <p> elements belonging to this component with a class of red, even if class=\"red\" does not initially appear in the markup, and is instead added at runtime. This is useful when the class of the element is dynamically applied, for instance when updating the element's classList property directly. \\\\\\\\\\\\\\*/ } If you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with -global-. The -global- part will be removed when compiled, and the keyframe then be referenced using just my-animation-name elsewhere in your code. @keyframes -global-my-animation-name { /\\\\\\\\\\\\\\* code goes here \\\\\\\\\\\\\\*/ } There should only be 1 top-level tag per component. However, it is possible to have <style> tag nested inside other elements or logic blocks. In that case, the <style> tag will be inserted as-is into the DOM, no scoping or processing will be done on the <style> tag. <div> <style> /\\\\\\\\\\\\\\* this style tag will be inserted as-is \\\\\\\\\\\\\\*/ div { /\\\\\\\\\\\\\\* this will apply to all \\\\\\\\\\\\\\`<div>\\\\\\\\\\\\\\` elements in the DOM \\\\\\\\\\\\\\*/ color: red; } PREVIOUS Introduction NEXT Basic markup</x-turndown></x-turndown>"
  },
  {
    "title": "Basic markup • Docs • Svelte",
    "url": "https://svelte.dev/docs/basic-markup",
    "html": "Skip to main content SVELTE.DEV Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript TEMPLATE SYNTAX Basic markup Edit this page on GitHub ON THIS PAGE Tags permalink A lowercase tag, like , denotes a regular HTML element. A capitalised tag, such as or , indicates a component. import Widget from './Widget.svelte'; Attributes and props permalink By default, attributes work exactly like their HTML counterparts. can't touch this As in HTML, values may be unquoted. Attribute values can contain JavaScript expressions. \\\\\\[page {p}\\\\\\](page/{p}) Or they can be JavaScript expressions. ... Boolean attributes are included on the element if their value is truthy and excluded if it's falsy. All other attributes are included unless their value is nullish (null or undefined). This div has no title attribute An expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed: ... When the attribute name and value match (name={name}), they can be replaced with {name}. ... By convention, values passed to components are referred to as properties or props rather than attributes, which are a feature of the DOM. As with elements, name={name} can be replaced with the {name} shorthand. Spread attributes allow many attributes or properties to be passed to an element or component at once. An element or component can have multiple spread attributes, interspersed with regular ones. $$props references all props that are passed to a component, including ones that are not declared with export. Using $$props will not perform as well as references to a specific prop because changes to any prop will cause Svelte to recheck all usages of $$props. But it can be useful in some cases – for example, when you don't know at compile time what props might be passed to a component. $$restProps contains only the props which are not declared with export. It can be used to pass down other unknown attributes to an element in a component. It shares the same performance characteristics compared to specific property access as $$props. The value attribute of an input element or its children option elements must not be set with spread attributes when using bind:group or bind:checked. Svelte needs to be able to see the element's value directly in the markup in these cases so that it can link it to the bound variable. Sometimes, the attribute order matters as Svelte sets attributes sequentially in JavaScript. For example, , Svelte will attempt to set the value to 1 (rounding up from 0.5 as the step by default is 1), and then set the step to 0.1. To fix this, change it to . Another example is !\\\\\\[\\\\\\](...). Svelte will set the img src before making the img element loading=\"lazy\", which is probably too late. Change this to !\\\\\\[\\\\\\](...) to make the image lazily loaded. Text expressions permalink A JavaScript expression can be included as text by surrounding it with curly braces. {expression} Curly braces can be included in a Svelte template by using their HTML entity strings: {, {, or { for { and }, }, or } for }. If you're using a regular expression (RegExp) literal notation, you'll need to wrap it in parentheses. Hello {name}! ============= {a} + {b} = {a + b}. {(/^\\\\\\\\\\\\\\[A-Za-z \\\\\\\\\\\\\\]+$/).test(value) ? x : y} Comments permalink You can use HTML comments inside components. Hello world =========== Comments beginning with svelte-ignore disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason. PREVIOUS Svelte components NEXT Logic blocks"
  },
  {
    "title": "Introduction • Docs • Svelte",
    "url": "https://svelte.dev/docs/introduction",
    "html": "Skip to main content SVELTE.DEV ⌘ K Docs Examples REPL Blog Tutorial SvelteKit GETTING STARTED Introduction TEMPLATE SYNTAX Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements RUNTIME svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action COMPILER AND API svelte/compiler Client-side component API Server-side component API Custom elements API MISC Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide LEGACY svelte/register JavaScript TypeScript GETTING STARTED Introduction Edit this page on GitHub ON THIS PAGE Introduction Start a new project Editor tooling Getting help Welcome to the Svelte reference documentation! This is intended as a resource for people who already have some familiarity with Svelte and want to learn more about using it. If that's not you (yet), you may prefer to visit the interactive tutorial or the examples before consulting this reference. You can try Svelte online using the REPL. Alternatively, if you'd like a more fully-featured environment, you can try Svelte on StackBlitz. Start a new project permalink We recommend using SvelteKit, the official application framework from the Svelte team: npm create svelte@latest myapp cd myapp npm install npm run dev SvelteKit will handle calling the Svelte compiler to convert your .svelte files into .js files that create the DOM and .css files that style it. It also provides all the other pieces you need to build a web application such as a development server, routing, deployment, and SSR support. SvelteKit uses Vite to build your code. Alternatives to SvelteKit permalink If you don't want to use SvelteKit for some reason, you can also use Svelte with Vite (but without SvelteKit) by running npm create vite@latest and selecting the svelte option. With this, npm run build will generate HTML, JS and CSS files inside the dist directory. In most cases, you will probably need to choose a routing library as well. Alternatively, there are plugins for all the major web bundlers to handle Svelte compilation — which will output .js and .css that you can insert into your HTML — but most others won't handle SSR. Editor tooling permalink The Svelte team maintains a VS Code extension and there are integrations with various other editors and tools as well. Getting help permalink Don't be shy about asking for help in the Discord chatroom! You can also find answers on Stack Overflow. PREVIOUS NEXT Svelte components"
  },
  {
    "title": "",
    "url": "https://svelte.dev/docs",
    "html": ""
  }
]