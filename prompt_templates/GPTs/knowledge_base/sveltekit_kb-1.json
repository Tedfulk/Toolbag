[
  {
    "title": "Additional resources • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/additional-resources",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte APPENDIX Additional resources Edit this page on GitHub ON THIS PAGE FAQs permalink Please see the SvelteKit FAQ for solutions to common issues and helpful tips and tricks. The Svelte FAQ and vite-plugin-svelte FAQ may also be helpful for questions deriving from those libraries. Examples permalink We've written and published a few different SvelteKit sites as examples: sveltejs/realworld contains an example blog site A HackerNews clone kit.svelte.dev svelte.dev SvelteKit users have also published plenty of examples on GitHub, under the #sveltekit and #sveltekit-template topics, as well as on the Svelte Society site. Note that these have not been vetted by the maintainers and may not be up to date. Support permalink You can ask for help on Discord and StackOverflow. Please first search for information related to your issue in the FAQ, Google or another search engine, issue tracker, and Discord chat history in order to be respectful of others' time. There are many more people asking questions than answering them, so this will help in allowing the community to grow in a scalable fashion. PREVIOUS Migrating from Sapper NEXT Glossary GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Migrating from Sapper • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/migrating",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte APPENDIX Migrating from Sapper Edit this page on GitHub ON THIS PAGE Migrating from Sapper package.json Project files Pages and layouts Endpoints Integrations SvelteKit is the successor to Sapper and shares many elements of its design. If you have an existing Sapper app that you plan to migrate to SvelteKit, there are a number of changes you will need to make. You may find it helpful to view some examples while migrating. package.json permalink type: \"module\" permalink Add \"type\": \"module\" to your package.json. You can do this step separately from the rest as part of an incremental migration if you are using Sapper 0.29.3 or newer. dependencies permalink Remove polka or express, if you're using one of those, and any middleware such as sirv or compression. devDependencies permalink Remove sapper from your devDependencies and replace it with @sveltejs/kit and whichever adapter you plan to use (see next section). scripts permalink Any scripts that reference sapper should be updated: sapper build should become vite build using the Node adapter sapper export should become vite build using the static adapter sapper dev should become vite dev node \\\\\\\\\\\\\\_\\\\\\\\\\\\\\_sapper\\\\\\\\\\\\\\_\\\\\\\\\\\\\\_/build should become node build Project files permalink The bulk of your app, in src/routes, can be left where it is, but several project files will need to be moved or updated. Configuration permalink Your webpack.config.js or rollup.config.js should be replaced with a svelte.config.js, as documented here. Svelte preprocessor options should be moved to config.preprocess. You will need to add an adapter. sapper build is roughly equivalent to adapter-node while sapper export is roughly equivalent to adapter-static, though you might prefer to use an adapter designed for the platform you're deploying to. If you were using plugins for filetypes that are not automatically handled by Vite, you will need to find Vite equivalents and add them to the Vite config. src/client.js permalink This file has no equivalent in SvelteKit. Any custom logic (beyond sapper.start(...)) should be expressed in your +layout.svelte file, inside an onMount callback. src/server.js permalink When using adapter-node the equivalent is a custom server. Otherwise, this file has no direct equivalent, since SvelteKit apps can run in serverless environments. src/service-worker.js permalink Most imports from @sapper/service-worker have equivalents in $service-worker: files is unchanged routes has been removed shell is now build timestamp is now version src/template.html permalink The src/template.html file should be renamed src/app.html. Remove %sapper.base%, %sapper.scripts% and %sapper.styles%. Replace %sapper.head% with %sveltekit.head% and %sapper.html% with %sveltekit.body%. The is no longer necessary. src/node\\\\\\\\\\\\\\_modules permalink A common pattern in Sapper apps is to put your internal library in a directory inside src/node\\\\\\\\\\\\\\_modules. This doesn't work with Vite, so we use src/lib instead. Pages and layouts permalink Renamed files permalink Routes now are made up of the folder name exclusively to remove ambiguity, the folder names leading up to a +page.svelte correspond to the route. See the routing docs for an overview. The following shows a old/new comparison: Old New routes/about/index.svelte routes/about/+page.svelte routes/about.svelte routes/about/+page.svelte Your custom error page component should be renamed from \\\\\\\\\\\\\\_error.svelte to +error.svelte. Any \\\\\\\\\\\\\\_layout.svelte files should likewise be renamed +layout.svelte. Any other files are ignored. Imports permalink The goto, prefetch and prefetchRoutes imports from @sapper/app should be replaced with goto, preloadData and preloadCode imports respectively from $app/navigation. The stores import from @sapper/app should be replaced — see the Stores section below. Any files you previously imported from directories in src/node\\\\\\\\\\\\\\_modules will need to be replaced with $lib imports. Preload permalink As before, pages and layouts can export a function that allows data to be loaded before rendering takes place. This function has been renamed from preload to load, it now lives in a +page.js (or +layout.js) next to its +page.svelte (or +layout.svelte), and its API has changed. Instead of two arguments — page and session — there is a single event argument. There is no more this object, and consequently no this.fetch, this.error or this.redirect. Instead, you can get fetch from the input methods, and both error and redirect are now thrown. Stores permalink In Sapper, you would get references to provided stores like so: import { stores } from '@sapper/app'; const { preloading, page, session } = stores(); The page store still exists; preloading has been replaced with a navigating store that contains from and to properties. page now has url and params properties, but no path or query. You access them differently in SvelteKit. stores is now getStores, but in most cases it is unnecessary since you can import navigating, and page directly from $app/stores. Routing permalink Regex routes are no longer supported. Instead, use advanced route matching. Segments permalink Previously, layout components received a segment prop indicating the child segment. This has been removed; you should use the more flexible $page.url.pathname value to derive the segment you're interested in. URLs permalink In Sapper, all relative URLs were resolved against the base URL — usually /, unless the basepath option was used — rather than against the current page. This caused problems and is no longer the case in SvelteKit. Instead, relative URLs are resolved against the current page (or the destination page, for fetch URLs in load functions) instead. In most cases, it's easier to use root-relative (i.e. starts with /) URLs, since their meaning is not context-dependent. attributes permalink sapper:prefetch is now data-sveltekit-preload-data sapper:noscroll is now data-sveltekit-noscroll Endpoints permalink In Sapper, server routes received the req and res objects exposed by Node's http module (or the augmented versions provided by frameworks like Polka and Express). SvelteKit is designed to be agnostic as to where the app is running — it could be running on a Node server, but could equally be running on a serverless platform or in a Cloudflare Worker. For that reason, you no longer interact directly with req and res. Your endpoints will need to be updated to match the new signature. To support this environment-agnostic behavior, fetch is now available in the global context, so you don't need to import node-fetch, cross-fetch, or similar server-side fetch implementations in order to use it. Integrations permalink See integrations for detailed information about integrations. HTML minifier permalink Sapper includes html-minifier by default. SvelteKit does not include this, but you can add it as a prod dependency and then use it through a hook: import { minify } from 'html-minifier'; import { building } from '$app/environment'; const minification\\\\\\\\\\\\\\_options = { collapseBooleanAttributes: true, collapseWhitespace: true, conservativeCollapse: true, decodeEntities: true, html5: true, ignoreCustomComments: \\\\\\\\\\\\\\[/^#/\\\\\\\\\\\\\\], minifyCSS: true, minifyJS: false, removeAttributeQuotes: true, removeComments: false, // some hydration code needs comments, so leave them in removeOptionalTags: true, removeRedundantAttributes: true, removeScriptTypeAttributes: true, removeStyleLinkTypeAttributes: true, sortAttributes: true, sortClassName: true }; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { let page = ''; return resolve(event, { transformPageChunk: ({ html, done }) => { page += html; if (done) { return building ? minify(page, minification\\\\\\\\\\\\\\_options) : page; } } }); } Note that prerendering is false when using vite preview to test the production build of the site, so to verify the results of minifying, you'll need to inspect the built HTML files directly. PREVIOUS Migrating to SvelteKit v2 NEXT Additional resources GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Migrating to SvelteKit v2 • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/migrating-to-sveltekit-2",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte APPENDIX Migrating to SvelteKit v2 Edit this page on GitHub ON THIS PAGE Upgrading from SvelteKit version 1 to version 2 should be mostly seamless. There are a few breaking changes to note, which are listed here. You can use npx svelte-migrate@latest sveltekit-2 to migrate some of these changes automatically. We highly recommend upgrading to the most recent 1.x version before upgrading to 2.0, so that you can take advantage of targeted deprecation warnings. We also recommend updating to Svelte 4 first: Later versions of SvelteKit 1.x support it, and SvelteKit 2.0 requires it. redirect and error are no longer thrown by you permalink Previously, you had to throw the values returned from error(...) and redirect(...) yourself. In SvelteKit 2 this is no longer the case — calling the functions is sufficient. import { error } from '@sveltejs/kit' ... throw error(500, 'something went wrong'); error(500, 'something went wrong'); svelte-migrate will do these changes automatically for you. If the error or redirect is thrown inside a try {...} block (hint: don't do this!), you can distinguish them from unexpected errors using isHttpError and isRedirect imported from @sveltejs/kit. path is required when setting cookies permalink When receiving a Set-Cookie header that doesn't specify a path, browsers will set the cookie path to the parent of the resource in question. This behaviour isn't particularly helpful or intuitive, and frequently results in bugs because the developer expected the cookie to apply to the domain as a whole. As of SvelteKit 2.0, you need to set a path when calling cookies.set(...), cookies.delete(...) or cookies.serialize(...) so that there's no ambiguity. Most of the time, you probably want to use path: '/', but you can set it to whatever you like, including relative paths — '' means 'the current path', '.' means 'the current directory'. export function load({ cookies }) { cookies.set(name, value); cookies.set(name, value, { path: '/' }); return { response } } svelte-migrate will add comments highlighting the locations that need to be adjusted. Top-level promises are no longer awaited permalink In SvelteKit version 1, if the top-level properties of the object returned from a load function were promises, they were automatically awaited. With the introduction of streaming this behavior became a bit awkward as it forces you to nest your streamed data one level deep. As of version 2, SvelteKit no longer differentiates between top-level and non-top-level promises. To get back the blocking behavior, use await (with Promise.all to prevent waterfalls, where appropriate): // If you have a single promise export function load({ fetch }) { const response = fetch(...).then(r => r.json()); const response = await fetch(...).then(r => r.json()); return { response } } // If you have multiple promises export function load({ fetch }) { const a = fetch(...).then(r => r.json()); const b = fetch(...).then(r => r.json()); const \\\\\\\\\\\\\\[a, b\\\\\\\\\\\\\\] = await Promise.all(\\\\\\\\\\\\\\[ fetch(...).then(r => r.json()), fetch(...).then(r => r.json()), \\\\\\\\\\\\\\]); return { a, b }; } goto(...) changes permalink goto(...) no longer accepts external URLs. To navigate to an external URL, use window.location = url. The state object now determines $page.state and must adhere to the App. PageState interface, if declared. See shallow routing for more details. paths are now relative by default permalink In SvelteKit 1, %sveltekit.assets% in your app.html was replaced with a relative path by default (i.e. . or .. or ../.. etc, depending on the path being rendered) during server-side rendering unless the paths.relative config option was explicitly set to false. The same was true for base and assets imported from $app/paths, but only if the paths.relative option was explicitly set to true. This inconsistency is fixed in version 2. Paths are either always relative or always absolute, depending on the value of paths.relative. It defaults to true as this results in more portable apps: if the base is something other than the app expected (as is the case when viewed on the Internet Archive, for example) or unknown at build time (as is the case when deploying to IPFS and so on), fewer things are likely to break. Server fetches are not trackable anymore permalink Previously it was possible to track URLs from fetches on the server in order to rerun load functions. This poses a possible security risk (private URLs leaking), and as such it was behind the dangerZone.trackServerFetches setting, which is now removed. preloadCode arguments must be prefixed with base permalink SvelteKit exposes two functions, preloadCode and preloadData, for programmatically loading the code and data associated with a particular path. In version 1, there was a subtle inconsistency — the path passed to preloadCode did not need to be prefixed with the base path (if set), while the path passed to preloadData did. This is fixed in SvelteKit 2 — in both cases, the path should be prefixed with base if it is set. Additionally, preloadCode now takes a single argument rather than n arguments. resolvePath has been removed permalink SvelteKit 1 included a function called resolvePath which allows you to resolve a route ID (like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]) and a set of parameters (like { slug: 'hello' }) to a pathname. Unfortunately the return value didn't include the base path, limiting its usefulness in cases where base was set. As such, SvelteKit 2 replaces resolvePath with a (slightly better named) function called resolveRoute, which is imported from $app/paths and which takes base into account. import { resolvePath } from '@sveltejs/kit'; import { base } from '$app/paths'; import { resolveRoute } from '$app/paths'; const path = base + resolvePath('/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]', { slug }); const path = resolveRoute('/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]', { slug }); svelte-migrate will do the method replacement for you, though if you later prepend the result with base, you need to remove that yourself. Improved error handling permalink Errors are handled inconsistently in SvelteKit 1. Some errors trigger the handleError hook but there is no good way to discern their status (for example, the only way to tell a 404 from a 500 is by seeing if event.route.id is null), while others (such as 405 errors for POST requests to pages without actions) don't trigger handleError at all, but should. In the latter case, the resulting $page.error will deviate from the App. Error type, if it is specified. SvelteKit 2 cleans this up by calling handleError hooks with two new properties: status and message. For errors thrown from your code (or library code called by your code) the status will be 500 and the message will be Internal Error . While error.message may contain sensitive information that should not be exposed to users, message is safe. Dynamic environment variables cannot be used during prerendering permalink The $env/dynamic/public and $env/dynamic/private modules provide access to run time environment variables, as opposed to the build time environment variables exposed by $env/static/public and $env/static/private. During prerendering in SvelteKit 1, they are one and the same. As such, prerendered pages that make use of 'dynamic' environment variables are really 'baking in' build time values, which is incorrect. Worse, $env/dynamic/public is populated in the browser with these stale values if the user happens to land on a prerendered page before navigating to dynamically-rendered pages. Because of this, dynamic environment variables can no longer be read during prerendering in SvelteKit 2 — you should use the static modules instead. If the user lands on a prerendered page, SvelteKit will request up-to-date values for $env/dynamic/public from the server (by default from a module called \\\\\\\\\\\\\\_env.js — this can be configured with config.kit.env.publicModule) instead of reading them from the server-rendered HTML. form and data have been removed from use:enhance callbacks permalink If you provide a callback to use:enhance, it will be called with an object containing various useful properties. In SvelteKit 1, those properties included form and data. These were deprecated some time ago in favour of formElement and formData, and have been removed altogether in SvelteKit 2. Forms containing file inputs must use multipart/form-data permalink If a form contains an but does not have an enctype=\"multipart/form-data\" attribute, non-JS submissions will omit the file. SvelteKit 2 will throw an error if it encounters a form like this during a use:enhance submission to ensure that your forms work correctly when JavaScript is not present. Generated tsconfig.json is more strict permalink Previously, the generated tsconfig.json was trying its best to still produce a somewhat valid config when your tsconfig.json included paths or baseUrl. In SvelteKit 2, the validation is more strict and will warn when you use either paths or baseUrl in your tsconfig.json. These settings are used to generate path aliases and you should use the alias config option in your svelte.config.js instead, to also create a corresponding alias for the bundler. getRequest no longer throws errors permalink The @sveltejs/kit/node module exports helper functions for use in Node environments, including getRequest which turns a Node ClientRequest into a standard Request object. In SvelteKit 1, getRequest could throw if the Content-Length header exceeded the specified size limit. In SvelteKit 2, the error will not be thrown until later, when the request body (if any) is being read. This enables better diagnostics and simpler code. vitePreprocess is no longer exported from @sveltejs/kit/vite permalink Since @sveltejs/vite-plugin-svelte is now a peer dependency, SvelteKit 2 no longer re-exports vitePreprocess. You should import it directly from @sveltejs/vite-plugin-svelte. Updated dependency requirements permalink SvelteKit 2 requires Node 18.13 or higher, and the following minimum dependency versions: svelte@4 vite@5 typescript@5 @sveltejs/vite-plugin-svelte@3 (this is now required as a peerDependency of SvelteKit — previously it was directly depended upon) @sveltejs/adapter-cloudflare@3 (if you're using these adapters) @sveltejs/adapter-cloudflare-workers@2 @sveltejs/adapter-netlify@3 @sveltejs/adapter-node@2 @sveltejs/adapter-static@3 @sveltejs/adapter-vercel@4 svelte-migrate will update your package.json for you. As part of the TypeScript upgrade, the generated tsconfig.json (the one your tsconfig.json extends from) now uses \"moduleResolution\": \"bundler\" (which is recommended by the TypeScript team, as it properly resolves types from packages with an exports map in package.json) and verbatimModuleSyntax (which replaces the existing importsNotUsedAsValues and preserveValueImports flags — if you have those in your tsconfig.json, remove them. svelte-migrate will do this for you). SvelteKit 2 uses ES2022 features, which are supported in all modern browsers. PREVIOUS Integrations NEXT Migrating from Sapper GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Integrations • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/integrations",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte APPENDIX Integrations Edit this page on GitHub ON THIS PAGE Integrations Preprocessors Adders Vite plugins Integration FAQs Preprocessors permalink Preprocessors transform your .svelte files before passing them to the compiler. For example, if your .svelte file uses TypeScript and PostCSS, it must first be transformed into JavaScript and CSS so that the Svelte compiler can handle it. There are many available preprocessors. The Svelte team maintains two official ones discussed below. vitePreprocess permalink vite-plugin-svelte offers a vitePreprocess feature which utilizes Vite for preprocessing. It is capable of handling the language flavors Vite handles: TypeScript, PostCSS, SCSS, Less, Stylus, and SugarSS. If you set your project up with TypeScript it will be included by default: // svelte.config.js import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'; export default { preprocess: \\\\\\\\\\\\\\[vitePreprocess()\\\\\\\\\\\\\\] }; svelte-preprocess permalink svelte-preprocess has some additional functionality not found in vitePreprocess such as support for Pug, Babel, and global styles. However, vitePreprocess may be faster and require less configuration, so it is used by default. Note that CoffeeScript is not supported by SvelteKit. You will need to install svelte-preprocess with npm install --save-dev svelte-preprocess and add it to your svelte.config.js. After that, you will often need to install the corresponding library such as npm install -D sass or npm install -D less. Adders permalink Svelte Adders allow you to setup many different complex integrations like Tailwind, PostCSS, Storybook, Firebase, GraphQL, mdsvex, and more with a single command. Please see sveltesociety.dev for a full listing of templates, components, and tools available for use with Svelte and SvelteKit. Vite plugins permalink Since SvelteKit projects are built with Vite, you can use Vite plugins to enhance your project. See a list of available plugins at vitejs/awesome-vite. Integration FAQs permalink The SvelteKit FAQ has a how to do X with SvelteKit, which may be helpful if you still have questions. PREVIOUS Frequently asked questions NEXT Migrating to SvelteKit v2 GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Types • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/types",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte REFERENCE Types Edit this page on GitHub ON THIS PAGE Public types permalink The following types can be imported from @sveltejs/kit: Action permalink Shape of a form action method that is part of export const actions = {..} in +page.server.js. See form actions for more information. type Action< Params extends Partial\\\\\\\\> = Partial< Record >, OutputData extends Record | void = Record< string, any > | void, RouteId extends string | null = string | null > = ( event: RequestEvent ) => MaybePromise; ActionFailure permalink interface ActionFailure< T extends Record | undefined = undefined > {…} status: number; data: T; \\\\\\\\\\\\\\[uniqueSymbol\\\\\\\\\\\\\\]: true; ActionResult permalink When calling a form action via fetch, the response will be one of these shapes. { return ({ result }) => { // result is of type ActionResult }; }} type ActionResult< Success extends | Record | undefined = Record, Failure extends | Record | undefined = Record > = | { type: 'success'; status: number; data?: Success } | { type: 'failure'; status: number; data?: Failure } | { type: 'redirect'; status: number; location: string } | { type: 'error'; status?: number; error: any }; Actions permalink Shape of the export const actions = {..} object in +page.server.js. See form actions for more information. type Actions< Params extends Partial\\\\\\\\> = Partial< Record >, OutputData extends Record | void = Record< string, any > | void, RouteId extends string | null = string | null > = Record\\\\\\\\>; Adapter permalink Adapters are responsible for taking the production build and turning it into something that can be deployed to a platform of your choosing. interface Adapter {…} name: string; The name of the adapter, using for logging. Will typically correspond to the package name. adapt(builder: Builder): MaybePromise; builder An object provided by SvelteKit that contains methods for adapting the app This function is called after SvelteKit has built your app. AfterNavigate permalink The argument passed to afterNavigate callbacks. interface AfterNavigate extends Omit {…} type: Exclude; The type of navigation: enter: The app has hydrated form: The user submitted a link: Navigation was triggered by a link click goto: Navigation was triggered by a goto(...) call or a redirect popstate: Navigation was triggered by back/forward navigation willUnload: false; Since afterNavigate callbacks are called after a navigation completes, they will never be called with a navigation that unloads the page. AwaitedActions permalink type AwaitedActions< T extends Record any> > = OptionalUnion< { \\\\\\\\\\\\\\[Key in keyof T\\\\\\\\\\\\\\]: UnpackValidationError< Awaited\\\\\\\\> >; }\\\\\\\\\\\\\\[keyof T\\\\\\\\\\\\\\] >; BeforeNavigate permalink The argument passed to beforeNavigate callbacks. interface BeforeNavigate extends Navigation {…} cancel(): void; Call this to prevent the navigation from starting. Builder permalink This object is passed to the adapt function of adapters. It contains various methods and properties that are useful for adapting the app. interface Builder {…} log: Logger; Print messages to the console. log.info and log.minor are silent unless Vite's logLevel is info. rimraf(dir: string): void; Remove dir and all its contents. mkdirp(dir: string): void; Create dir and any required parent directories. config: ValidatedConfig; The fully resolved svelte.config.js. prerendered: Prerendered; Information about prerendered pages and assets, if any. routes: RouteDefinition\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; An array of all routes (including prerendered) createEntries(fn: (route: RouteDefinition) => AdapterEntry): Promise; fn A function that groups a set of routes into an entry point DEPRECATED Use builder.routes instead Create separate functions that map to one or more routes of your app. generateFallback(dest: string): Promise; Generate a fallback page for a static webserver to use when no route is matched. Useful for single-page apps. generateEnvModule(): void; Generate a module exposing build-time environment variables as $env/dynamic/public. generateManifest(opts: { relativePath: string; routes?: RouteDefinition\\\\\\\\\\\\\\[\\\\\\\\\\\\\\] }): string; opts a relative path to the base directory of the app and optionally in which format (esm or cjs) the manifest should be generated Generate a server-side manifest to initialise the SvelteKit server with. getBuildDirectory(name: string): string; name path to the file, relative to the build directory Resolve a path to the name directory inside outDir, e.g. /path/to/.svelte-kit/my-adapter. getClientDirectory(): string; Get the fully resolved path to the directory containing client-side assets, including the contents of your static directory. getServerDirectory(): string; Get the fully resolved path to the directory containing server-side code. getAppPath(): string; Get the application path including any configured base path, e.g. my-base-path/\\\\\\\\\\\\\\_app. writeClient(dest: string): string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; dest the destination folder RETURNS an array of files written to dest Write client assets to dest. writePrerendered(dest: string): string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; dest the destination folder RETURNS an array of files written to dest Write prerendered files to dest. writeServer(dest: string): string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; dest the destination folder RETURNS an array of files written to dest Write server-side code to dest. copy( from: string, to: string, opts?: { filter?(basename: string): boolean; replace?: Record; } ): string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; from the source file or directory to the destination file or directory opts.filter a function to determine whether a file or directory should be copied opts.replace a map of strings to replace RETURNS an array of files that were copied Copy a file or directory. compress(directory: string): Promise; directory The directory containing the files to be compressed Compress files in directory with gzip and brotli, where appropriate. Generates .gz and .br files alongside the originals. Config permalink interface Config {…} See the configuration reference for details. Cookies permalink interface Cookies {…} get(name: string, opts?: import('cookie').CookieParseOptions): string | undefined; name the name of the cookie opts the options, passed directly to cookie.parse. See documentation here Gets a cookie that was previously set with cookies.set, or from the request headers. getAll(opts?: import('cookie').CookieParseOptions): Array<{ name: string; value: string }>; opts the options, passed directly to cookie.parse. See documentation here Gets all cookies that were previously set with cookies.set, or from the request headers. set( name: string, value: string, opts: import('cookie').CookieSerializeOptions & { path: string } ): void; name the name of the cookie value the cookie value opts the options, passed directly to cookie.serialize. See documentation here Sets a cookie. This will add a set-cookie header to the response, but also make the cookie available via cookies.get or cookies.getAll during the current request. The httpOnly and secure options are true by default (except on http://localhost, where secure is false), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The sameSite option defaults to lax. You must specify a path for the cookie. In most cases you should explicitly set path: '/' to make the cookie available throughout your app. You can use relative paths, or set path: '' to make the cookie only available on the current path and its children delete(name: string, opts: import('cookie').CookieSerializeOptions & { path: string }): void; name the name of the cookie opts the options, passed directly to cookie.serialize. The path must match the path of the cookie you want to delete. See documentation here Deletes a cookie by setting its value to an empty string and setting the expiry date in the past. You must specify a path for the cookie. In most cases you should explicitly set path: '/' to make the cookie available throughout your app. You can use relative paths, or set path: '' to make the cookie only available on the current path and its children serialize( name: string, value: string, opts: import('cookie').CookieSerializeOptions & { path: string } ): string; name the name of the cookie value the cookie value opts the options, passed directly to cookie.serialize. See documentation here Serialize a cookie name-value pair into a Set-Cookie header string, but don't apply it to the response. The httpOnly and secure options are true by default (except on http://localhost, where secure is false), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The sameSite option defaults to lax. You must specify a path for the cookie. In most cases you should explicitly set path: '/' to make the cookie available throughout your app. You can use relative paths, or set path: '' to make the cookie only available on the current path and its children Handle permalink The handle hook runs every time the SvelteKit server receives a request and determines the response. It receives an event object representing the request and a function called resolve, which renders the route and generates a Response. This allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example). type Handle = (input: { event: RequestEvent; resolve( event: RequestEvent, opts?: ResolveOptions ): MaybePromise; }) => MaybePromise; HandleClientError permalink The client-side handleError hook runs when an unexpected error is thrown while navigating. If an unexpected error is thrown during loading or the following render, this function will be called with the error and the event. Make sure that this function never throws an error. type HandleClientError = (input: { error: unknown; event: NavigationEvent; status: number; message: string; }) => MaybePromise; HandleFetch permalink The handleFetch hook allows you to modify (or replace) a fetch request that happens inside a load function that runs on the server (or during pre-rendering) type HandleFetch = (input: { event: RequestEvent; request: Request; fetch: typeof fetch; }) => MaybePromise; HandleServerError permalink The server-side handleError hook runs when an unexpected error is thrown while responding to a request. If an unexpected error is thrown during loading or rendering, this function will be called with the error and the event. Make sure that this function never throws an error. type HandleServerError = (input: { error: unknown; event: RequestEvent; status: number; message: string; }) => MaybePromise; HttpError permalink The object returned by the error function. interface HttpError {…} status: number; The HTTP status code, in the range 400-599. body: App.Error; The content of the error. KitConfig permalink interface KitConfig {…} See the configuration reference for details. LessThan permalink type LessThan< TNumber extends number, TArray extends any\\\\\\\\\\\\\\[\\\\\\\\\\\\\\] = \\\\\\\\\\\\\\[\\\\\\\\\\\\\\] > = TNumber extends TArray\\\\\\\\\\\\\\['length'\\\\\\\\\\\\\\] ? TArray\\\\\\\\\\\\\\[number\\\\\\\\\\\\\\] : LessThan; Load permalink The generic form of PageLoad and LayoutLoad. You should import those from ./$types (see generated types) rather than using Load directly. type Load< Params extends Partial\\\\\\\\> = Partial< Record >, InputData extends Record | null = Record< string, any > | null, ParentData extends Record = Record< string, any >, OutputData extends Record< string, unknown > | void = Record | void, RouteId extends string | null = string | null > = ( event: LoadEvent ) => MaybePromise; LoadEvent permalink The generic form of PageLoadEvent and LayoutLoadEvent. You should import those from ./$types (see generated types) rather than using LoadEvent directly. interface LoadEvent< Params extends Partial\\\\\\\\> = Partial< Record >, Data extends Record | null = Record< string, any > | null, ParentData extends Record = Record< string, any >, RouteId extends string | null = string | null > extends NavigationEvent {…} fetch: typeof fetch; fetch is equivalent to the native fetch web API, with a few additional features: It can be used to make credentialed requests on the server, as it inherits the cookie and authorization headers for the page request. It can make relative requests on the server (ordinarily, fetch requires a URL with an origin when used in a server context). Internal requests (e.g. for +server.js routes) go directly to the handler function when running on the server, without the overhead of an HTTP call. During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the text and json methods of the Response object. Note that headers will not be serialized, unless explicitly included via filterSerializedResponseHeaders During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request. You can learn more about making credentialed requests with cookies here data: Data; Contains the data returned by the route's server load function (in +layout.server.js or +page.server.js), if any. setHeaders(headers: Record): void; If you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example: src/routes/blog/+page.js export async function load({ fetch, setHeaders }) { const url = \\\\\\\\\\\\\\`https://cms.example.com/articles.json\\\\\\\\\\\\\\`; const response = await fetch(url); setHeaders({ age: response.headers.get('age'), 'cache-control': response.headers.get('cache-control') }); return response.json(); } Setting the same header multiple times (even in separate load functions) is an error — you can only set a given header once. You cannot add a set-cookie header with setHeaders — use the cookies API in a server-only load function instead. setHeaders has no effect when a load function runs in the browser. parent(): Promise; await parent() returns data from parent +layout.js load functions. Implicitly, a missing +layout.js is treated as a ({ data }) => data function, meaning that it will return and forward data from parent +layout.server.js files. Be careful not to introduce accidental waterfalls when using await parent(). If for example you only want to merge parent data into the returned output, call it after fetching your other data. depends(...deps: Array<\\\\\\\\\\\\\\`${string}:${string}\\\\\\\\\\\\\\`>): void; This function declares that the load function has a dependency on one or more URLs or custom identifiers, which can subsequently be used with invalidate() to cause load to rerun. Most of the time you won't need this, as fetch calls depends on your behalf — it's only necessary if you're using a custom API client that bypasses fetch. URLs can be absolute or relative to the page being loaded, and must be encoded. Custom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the URI specification. The following example shows how to use depends to register a dependency on a custom identifier, which is invalidated after a button click, making the load function rerun. src/routes/+page.js let count = 0; export async function load({ depends }) { depends('increase:count'); return { count: count++ }; } src/routes/+page.svelte import { invalidate } from '$app/navigation'; export let data; const increase = async () => { await invalidate('increase:count'); } {data.count} Increase Count untrack(fn: () => T): T; Use this function to opt out of dependency tracking for everything that is synchronously called within the callback. Example: src/routes/+page.server.js export async function load({ untrack, url }) { // Untrack url.pathname so that path changes don't trigger a rerun if (untrack(() => url.pathname === '/')) { return { message: 'Welcome!' }; } } LoadProperties permalink type LoadProperties< input extends Record | void > = input extends void ? undefined // needs to be undefined, because void will break intellisense : input extends Record ? input : unknown; Navigation permalink interface Navigation {…} from: NavigationTarget | null; Where navigation was triggered from to: NavigationTarget | null; Where navigation is going to/has gone to type: Exclude; The type of navigation: form: The user submitted a leave: The app is being left either because the tab is being closed or a navigation to a different document is occurring link: Navigation was triggered by a link click goto: Navigation was triggered by a goto(...) call or a redirect popstate: Navigation was triggered by back/forward navigation willUnload: boolean; Whether or not the navigation will result in the page being unloaded (i.e. not a client-side navigation) delta?: number; In case of a history back/forward navigation, the number of steps to go back/forward complete: Promise; A promise that resolves once the navigation is complete, and rejects if the navigation fails or is aborted. In the case of a willUnload navigation, the promise will never resolve NavigationEvent permalink interface NavigationEvent< Params extends Partial\\\\\\\\> = Partial< Record >, RouteId extends string | null = string | null > {…} params: Params; The parameters of the current page - e.g. for a route like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], a { slug: string } object route: {…} Info about the current route id: RouteId; The ID of the current route - e.g. for src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], it would be /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] url: URL; The URL of the current page NavigationTarget permalink Information about the target of a specific navigation. interface NavigationTarget {…} params: Record | null; Parameters of the target page - e.g. for a route like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], a { slug: string } object. Is null if the target is not part of the SvelteKit app (could not be resolved to a route). route: { id: string | null }; Info about the target route url: URL; The URL that is navigated to NavigationType permalink enter: The app has hydrated form: The user submitted a with a GET method leave: The user is leaving the app by closing the tab or using the back/forward buttons to go to a different document link: Navigation was triggered by a link click goto: Navigation was triggered by a goto(...) call or a redirect popstate: Navigation was triggered by back/forward navigation type NavigationType = | 'enter' | 'form' | 'leave' | 'link' | 'goto' | 'popstate'; NumericRange permalink type NumericRange< TStart extends number, TEnd extends number > = Exclude, LessThan\\\\\\\\>; OnNavigate permalink The argument passed to onNavigate callbacks. interface OnNavigate extends Navigation {…} type: Exclude; The type of navigation: form: The user submitted a link: Navigation was triggered by a link click goto: Navigation was triggered by a goto(...) call or a redirect popstate: Navigation was triggered by back/forward navigation willUnload: false; Since onNavigate callbacks are called immediately before a client-side navigation, they will never be called with a navigation that unloads the page. Page permalink The shape of the $page store interface Page< Params extends Record = Record< string, string >, RouteId extends string | null = string | null > {…} url: URL; The URL of the current page params: Params; The parameters of the current page - e.g. for a route like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], a { slug: string } object route: {…} Info about the current route id: RouteId; The ID of the current route - e.g. for src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], it would be /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] status: number; Http status code of the current page error: App.Error | null; The error object of the current page, if any. Filled from the handleError hooks. data: App.PageData & Record; The merged result of all data from all load functions on the current page. You can type a common denominator through App. PageData . state: App.PageState; The page state, which can be manipulated using the pushState and replaceState functions from $app/navigation. form: any; Filled only after a form submission. See form actions for more info. ParamMatcher permalink The shape of a param matcher. See matching for more info. type ParamMatcher = (param: string) => boolean; PrerenderOption permalink type PrerenderOption = boolean | 'auto'; Redirect permalink The object returned by the redirect function interface Redirect {…} status: 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308; The HTTP status code, in the range 300-308. location: string; The location to redirect to. RequestEvent permalink interface RequestEvent< Params extends Partial\\\\\\\\> = Partial< Record >, RouteId extends string | null = string | null > {…} cookies: Cookies; Get or set cookies related to the current request fetch: typeof fetch; fetch is equivalent to the native fetch web API, with a few additional features: It can be used to make credentialed requests on the server, as it inherits the cookie and authorization headers for the page request. It can make relative requests on the server (ordinarily, fetch requires a URL with an origin when used in a server context). Internal requests (e.g. for +server.js routes) go directly to the handler function when running on the server, without the overhead of an HTTP call. During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the text and json methods of the Response object. Note that headers will not be serialized, unless explicitly included via filterSerializedResponseHeaders During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request. You can learn more about making credentialed requests with cookies here getClientAddress(): string; The client's IP address, set by the adapter. locals: App.Locals; Contains custom data that was added to the request within the handle hook. params: Params; The parameters of the current route - e.g. for a route like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], a { slug: string } object platform: Readonly | undefined; Additional data made available through the adapter. request: Request; The original request object route: {…} Info about the current route id: RouteId; The ID of the current route - e.g. for src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\], it would be /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] setHeaders(headers: Record): void; If you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example: src/routes/blog/+page.js export async function load({ fetch, setHeaders }) { const url = \\\\\\\\\\\\\\`https://cms.example.com/articles.json\\\\\\\\\\\\\\`; const response = await fetch(url); setHeaders({ age: response.headers.get('age'), 'cache-control': response.headers.get('cache-control') }); return response.json(); } Setting the same header multiple times (even in separate load functions) is an error — you can only set a given header once. You cannot add a set-cookie header with setHeaders — use the cookies API instead. url: URL; The requested URL. isDataRequest: boolean; true if the request comes from the client asking for +page/layout.server.js data. The url property will be stripped of the internal information related to the data request in this case. Use this property instead if the distinction is important to you. isSubRequest: boolean; true for +server.js calls coming from SvelteKit without the overhead of actually making an HTTP request. This happens when you make same-origin fetch requests on the server. RequestHandler permalink A (event: RequestEvent ) => Response function exported from a +server.js file that corresponds to an HTTP verb (GET, PUT, PATCH, etc) and handles requests with that method. It receives Params as the first generic argument, which you can skip by using generated types instead. type RequestHandler< Params extends Partial\\\\\\\\> = Partial< Record >, RouteId extends string | null = string | null > = ( event: RequestEvent ) => MaybePromise; ResolveOptions permalink interface ResolveOptions {…} transformPageChunk?(input: { html: string; done: boolean }): MaybePromise; input the html chunk and the info if this is the last chunk Applies custom transforms to HTML. If done is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML (they could include an element's opening tag but not its closing tag, for example) but they will always be split at sensible boundaries such as %sveltekit.head% or layout/page components. filterSerializedResponseHeaders?(name: string, value: string): boolean; name header name value header value Determines which headers should be included in serialized responses when a load function loads a resource with fetch. By default, none will be included. preload?(input: { type: 'font' | 'css' | 'js' | 'asset'; path: string }): boolean; input the type of the file and its path Determines what should be added to the tag to preload it. By default, js and css files will be preloaded. RouteDefinition permalink interface RouteDefinition {…} id: string; api: { methods: Array; }; page: { methods: Array\\\\\\\\>; }; pattern: RegExp; prerender: PrerenderOption; segments: RouteSegment\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; methods: Array; config: Config; SSRManifest permalink interface SSRManifest {…} appDir: string; appPath: string; assets: Set; mimeTypes: Record; \\\\\\\\\\\\\\_: { client: NonNullable; nodes: SSRNodeLoader\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; routes: SSRRoute\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; matchers(): Promise\\\\\\\\>; }; private fields Server permalink class Server {…} constructor(manifest: SSRManifest); init(options: ServerInitOptions): Promise; respond(request: Request, options: RequestOptions): Promise; ServerInitOptions permalink interface ServerInitOptions {…} env: Record; ServerLoad permalink The generic form of PageServerLoad and LayoutServerLoad. You should import those from ./$types (see generated types) rather than using ServerLoad directly. type ServerLoad< Params extends Partial\\\\\\\\> = Partial< Record >, ParentData extends Record = Record< string, any >, OutputData extends Record | void = Record< string, any > | void, RouteId extends string | null = string | null > = ( event: ServerLoadEvent ) => MaybePromise; ServerLoadEvent permalink interface ServerLoadEvent< Params extends Partial\\\\\\\\> = Partial< Record >, ParentData extends Record = Record< string, any >, RouteId extends string | null = string | null > extends RequestEvent {…} parent(): Promise; await parent() returns data from parent +layout.server.js load functions. Be careful not to introduce accidental waterfalls when using await parent(). If for example you only want to merge parent data into the returned output, call it after fetching your other data. depends(...deps: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]): void; This function declares that the load function has a dependency on one or more URLs or custom identifiers, which can subsequently be used with invalidate() to cause load to rerun. Most of the time you won't need this, as fetch calls depends on your behalf — it's only necessary if you're using a custom API client that bypasses fetch. URLs can be absolute or relative to the page being loaded, and must be encoded. Custom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the URI specification. The following example shows how to use depends to register a dependency on a custom identifier, which is invalidated after a button click, making the load function rerun. src/routes/+page.js let count = 0; export async function load({ depends }) { depends('increase:count'); return { count: count++ }; } src/routes/+page.svelte import { invalidate } from '$app/navigation'; export let data; const increase = async () => { await invalidate('increase:count'); } {data.count} Increase Count untrack(fn: () => T): T; Use this function to opt out of dependency tracking for everything that is synchronously called within the callback. Example: src/routes/+page.js export async function load({ untrack, url }) { // Untrack url.pathname so that path changes don't trigger a rerun if (untrack(() => url.pathname === '/')) { return { message: 'Welcome!' }; } } Snapshot permalink The type of export const snapshot exported from a page or layout component. interface Snapshot {…} capture: () => T; restore: (snapshot: T) => void; SubmitFunction permalink type SubmitFunction< Success extends | Record | undefined = Record, Failure extends | Record | undefined = Record > = (input: { action: URL; formData: FormData; formElement: HTMLFormElement; controller: AbortController; submitter: HTMLElement | null; cancel(): void; }) => MaybePromise< | void | ((opts: { formData: FormData; formElement: HTMLFormElement; action: URL; result: ActionResult; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* \\\\\\\\\\\\\\* Call this to get the default behavior of a form submission response. \\\\\\\\\\\\\\* @param options Set \\\\\\\\\\\\\\`reset: false\\\\\\\\\\\\\\` if you don't want the \\\\\\\\\\\\\\`\\\\\\\\\\\\\\` values to be reset after a successful submission. \\\\\\\\\\\\\\* @param invalidateAll Set \\\\\\\\\\\\\\`invalidateAll: false\\\\\\\\\\\\\\` if you don't want the action to call \\\\\\\\\\\\\\`invalidateAll\\\\\\\\\\\\\\` after submission. \\\\\\\\\\\\\\*/ update(options?: { reset?: boolean; invalidateAll?: boolean; }): Promise; }) => void) >; Private types permalink The following are referenced by the public types documented above, but cannot be imported directly: AdapterEntry permalink interface AdapterEntry {…} id: string; A string that uniquely identifies an HTTP service (e.g. serverless function) and is used for deduplication. For example, /foo/a-\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\] and /foo/\\\\\\\\\\\\\\[c\\\\\\\\\\\\\\] are different routes, but would both be represented in a Netlify \\\\\\\\\\\\\\_redirects file as /foo/:param, so they share an ID filter(route: RouteDefinition): boolean; A function that compares the candidate route with the current route to determine if it should be grouped with the current route. Use cases: Fallback pages: /foo/\\\\\\\\\\\\\\[c\\\\\\\\\\\\\\] is a fallback for /foo/a-\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\], and /\\\\\\\\\\\\\\[...catchall\\\\\\\\\\\\\\] is a fallback for all routes Grouping routes that share a common config: /foo should be deployed to the edge, /bar and /baz should be deployed to a serverless function complete(entry: { generateManifest(opts: { relativePath: string }): string }): MaybePromise; A function that is invoked once the entry has been created. This is where you should write the function to the filesystem and generate redirect manifests. Csp permalink namespace Csp { type ActionSource = 'strict-dynamic' | 'report-sample'; type BaseSource = | 'self' | 'unsafe-eval' | 'unsafe-hashes' | 'unsafe-inline' | 'wasm-unsafe-eval' | 'none'; type CryptoSource = \\\\\\\\\\\\\\`${ | 'nonce' | 'sha256' | 'sha384' | 'sha512'}-${string}\\\\\\\\\\\\\\`; type FrameSource = | HostSource | SchemeSource | 'self' | 'none'; type HostNameScheme = \\\\\\\\\\\\\\`${string}.${string}\\\\\\\\\\\\\\` | 'localhost'; type HostSource = \\\\\\\\\\\\\\`${HostProtocolSchemes}${HostNameScheme}${PortScheme}\\\\\\\\\\\\\\`; type HostProtocolSchemes = \\\\\\\\\\\\\\`${string}://\\\\\\\\\\\\\\` | ''; type HttpDelineator = '/' | '?' | '#' | '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'; type PortScheme = \\\\\\\\\\\\\\`:${number}\\\\\\\\\\\\\\` | '' | ':\\\\\\\\\\\\\\*'; type SchemeSource = | 'http:' | 'https:' | 'data:' | 'mediastream:' | 'blob:' | 'filesystem:'; type Source = | HostSource | SchemeSource | CryptoSource | BaseSource; type Sources = Source\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; type UriPath = \\\\\\\\\\\\\\`${HttpDelineator}${string}\\\\\\\\\\\\\\`; } CspDirectives permalink interface CspDirectives {…} 'child-src'?: Csp.Sources; 'default-src'?: Array; 'frame-src'?: Csp.Sources; 'worker-src'?: Csp.Sources; 'connect-src'?: Csp.Sources; 'font-src'?: Csp.Sources; 'img-src'?: Csp.Sources; 'manifest-src'?: Csp.Sources; 'media-src'?: Csp.Sources; 'object-src'?: Csp.Sources; 'prefetch-src'?: Csp.Sources; 'script-src'?: Array; 'script-src-elem'?: Csp.Sources; 'script-src-attr'?: Csp.Sources; 'style-src'?: Array; 'style-src-elem'?: Csp.Sources; 'style-src-attr'?: Csp.Sources; 'base-uri'?: Array; sandbox?: Array< | 'allow-downloads-without-user-activation' | 'allow-forms' | 'allow-modals' | 'allow-orientation-lock' | 'allow-pointer-lock' | 'allow-popups' | 'allow-popups-to-escape-sandbox' | 'allow-presentation' | 'allow-same-origin' | 'allow-scripts' | 'allow-storage-access-by-user-activation' | 'allow-top-navigation' | 'allow-top-navigation-by-user-activation' >; 'form-action'?: Array; 'frame-ancestors'?: Array; 'navigate-to'?: Array; 'report-uri'?: Csp.UriPath\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; 'report-to'?: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; 'require-trusted-types-for'?: Array<'script'>; 'trusted-types'?: Array<'none' | 'allow-duplicates' | '\\\\\\\\\\\\\\*' | string>; 'upgrade-insecure-requests'?: boolean; 'require-sri-for'?: Array<'script' | 'style' | 'script style'>; DEPRECATED undefined 'block-all-mixed-content'?: boolean; DEPRECATED undefined 'plugin-types'?: Array<\\\\\\\\\\\\\\`${string}/${string}\\\\\\\\\\\\\\` | 'none'>; DEPRECATED undefined referrer?: Array< | 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url' | 'none' >; DEPRECATED undefined HttpMethod permalink type HttpMethod = | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'OPTIONS'; Logger permalink interface Logger {…} (msg: string): void; success(msg: string): void; error(msg: string): void; warn(msg: string): void; minor(msg: string): void; info(msg: string): void; MaybePromise permalink type MaybePromise = T | Promise; PrerenderEntryGeneratorMismatchHandler permalink interface PrerenderEntryGeneratorMismatchHandler {…} (details: { generatedFromId: string; entry: string; matchedId: string; message: string }): void; PrerenderEntryGeneratorMismatchHandlerValue permalink type PrerenderEntryGeneratorMismatchHandlerValue = | 'fail' | 'warn' | 'ignore' | PrerenderEntryGeneratorMismatchHandler; PrerenderHttpErrorHandler permalink interface PrerenderHttpErrorHandler {…} (details: { status: number; path: string; referrer: string | null; referenceType: 'linked' | 'fetched'; message: string; }): void; PrerenderHttpErrorHandlerValue permalink type PrerenderHttpErrorHandlerValue = | 'fail' | 'warn' | 'ignore' | PrerenderHttpErrorHandler; PrerenderMap permalink type PrerenderMap = Map; PrerenderMissingIdHandler permalink interface PrerenderMissingIdHandler {…} (details: { path: string; id: string; referrers: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; message: string }): void; PrerenderMissingIdHandlerValue permalink type PrerenderMissingIdHandlerValue = | 'fail' | 'warn' | 'ignore' | PrerenderMissingIdHandler; PrerenderOption permalink type PrerenderOption = boolean | 'auto'; Prerendered permalink interface Prerendered {…} pages: Map< string, { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* The location of the .html file relative to the output directory \\\\\\\\\\\\\\*/ file: string; } >; A map of path to { file } objects, where a path like /foo corresponds to foo.html and a path like /bar/ corresponds to bar/index.html. assets: Map< string, { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* The MIME type of the asset \\\\\\\\\\\\\\*/ type: string; } >; A map of path to { type } objects. redirects: Map< string, { status: number; location: string; } >; A map of redirects encountered during prerendering. paths: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; An array of prerendered paths (without trailing slashes, regardless of the trailingSlash config) RequestOptions permalink interface RequestOptions {…} getClientAddress(): string; platform?: App.Platform; RouteSegment permalink interface RouteSegment {…} content: string; dynamic: boolean; rest: boolean; TrailingSlash permalink type TrailingSlash = 'never' | 'always' | 'ignore'; Generated types permalink The RequestHandler and Load types both accept a Params argument allowing you to type the params object. For example this endpoint expects foo, bar and baz params: src/routes/\\\\\\\\\\\\\\[foo\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[bar\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[baz\\\\\\\\\\\\\\]/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').RequestHandler<{ foo: string; bar: string; baz: string }>} \\\\\\\\\\\\\\*/ export async function GET({ params }) { // ... } Needless to say, this is cumbersome to write out, and less portable (if you were to rename the \\\\\\\\\\\\\\[foo\\\\\\\\\\\\\\] directory to \\\\\\\\\\\\\\[qux\\\\\\\\\\\\\\], the type would no longer reflect reality). To solve this problem, SvelteKit generates .d.ts files for each of your endpoints and pages: .svelte-kit/types/src/routes/\\\\\\\\\\\\\\[foo\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[bar\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[baz\\\\\\\\\\\\\\]/$types.d.ts import type \\\\\\\\\\\\\\* as Kit from '@sveltejs/kit'; type RouteParams = { foo: string; bar: string; baz: string; } export type PageServerLoad = Kit.ServerLoad; export type PageLoad = Kit.Load; These files can be imported into your endpoints and pages as siblings, thanks to the rootDirs option in your TypeScript configuration: src/routes/\\\\\\\\\\\\\\[foo\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[bar\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[baz\\\\\\\\\\\\\\]/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function GET({ params }) { // ... } src/routes/\\\\\\\\\\\\\\[foo\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[bar\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[baz\\\\\\\\\\\\\\]/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ params, fetch }) { // ... } For this to work, your own tsconfig.json or jsconfig.json should extend from the generated .svelte-kit/tsconfig.json (where .svelte-kit is your outDir): { \"extends\": \"./.svelte-kit/tsconfig.json\" } Default tsconfig.json permalink The generated .svelte-kit/tsconfig.json file contains a mixture of options. Some are generated programmatically based on your project configuration, and should generally not be overridden without good reason: .svelte-kit/tsconfig.json { \"compilerOptions\": { \"baseUrl\": \"..\", \"paths\": { \"$lib\": \"src/lib\", \"$lib/\\\\\\\\\\\\\\*\": \"src/lib/\\\\\\\\\\\\\\*\" }, \"rootDirs\": \\\\\\\\\\\\\\[\"..\", \"./types\"\\\\\\\\\\\\\\] }, \"include\": \\\\\\\\\\\\\\[\"../src/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*/\\\\\\\\\\\\\\*.js\", \"../src/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*/\\\\\\\\\\\\\\*.ts\", \"../src/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*/\\\\\\\\\\\\\\*.svelte\"\\\\\\\\\\\\\\], \"exclude\": \\\\\\\\\\\\\\[\"../node\\\\\\\\\\\\\\_modules/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*\", \"./\\\\\\\\\\\\\\*\\\\\\\\\\\\\\*\"\\\\\\\\\\\\\\] } Others are required for SvelteKit to work properly, and should also be left untouched unless you know what you're doing: .svelte-kit/tsconfig.json { \"compilerOptions\": { // this ensures that types are explicitly // imported with \\\\\\\\\\\\\\`import type\\\\\\\\\\\\\\`, which is // necessary as svelte-preprocess cannot // otherwise compile components correctly \"importsNotUsedAsValues\": \"error\", // Vite compiles one TypeScript module // at a time, rather than compiling // the entire module graph \"isolatedModules\": true, // TypeScript cannot 'see' when you // use an imported value in your // markup, so we need this \"preserveValueImports\": true, // This ensures both \\\\\\\\\\\\\\`vite build\\\\\\\\\\\\\\` // and \\\\\\\\\\\\\\`svelte-package\\\\\\\\\\\\\\` work correctly \"lib\": \\\\\\\\\\\\\\[\"esnext\", \"DOM\", \"DOM.Iterable\"\\\\\\\\\\\\\\], \"moduleResolution\": \"node\", \"module\": \"esnext\", \"target\": \"esnext\" } } App permalink Error permalink Defines the common shape of expected and unexpected errors. Expected errors are thrown using the error function. Unexpected errors are handled by the handleError hooks which should return this shape. interface Error {…} message: string; Locals permalink The interface that defines event.locals, which can be accessed in hooks (handle, and handleError), server-only load functions, and +server.js files. interface Locals {} PageData permalink Defines the common shape of the $page.data store - that is, the data that is shared between all pages. The Load and ServerLoad functions in ./$types will be narrowed accordingly. Use optional properties for data that is only present on specific pages. Do not add an index signature (\\\\\\\\\\\\\\[key: string\\\\\\\\\\\\\\]: any). interface PageData {} PageState permalink The shape of the $page.state object, which can be manipulated using the pushState and replaceState functions from $app/navigation. interface PageState {} Platform permalink If your adapter provides platform-specific context via event.platform, you can specify it here. interface Platform {} PREVIOUS Modules NEXT Frequently asked questions GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Modules • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/modules",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte REFERENCE Modules Edit this page on GitHub ON THIS PAGE SvelteKit makes a number of modules available to your application. $app/environment permalink import { browser, dev, building, version } from '$app/environment'; browser permalink true if the app is running in the browser. const browser: boolean; dev permalink Whether the dev server is running. This is not guaranteed to correspond to NODE\\\\\\\\\\\\\\_ENV or MODE. const dev: boolean; building permalink SvelteKit analyses your app during the build step by running it. During this process, building is true. This also applies during prerendering. const building: boolean; version permalink The value of config.kit.version.name. const version: string; $app/forms permalink import { applyAction, deserialize, enhance } from '$app/forms'; applyAction permalink This action updates the form property of the current page with the given data and updates $page.status. In case of an error, it redirects to the nearest error page. function applyAction< Success extends Record | undefined, Failure extends Record | undefined >( result: import('@sveltejs/kit').ActionResult< Success, Failure > ): Promise; deserialize permalink Use this function to deserialize the response from a form submission. Usage: import { deserialize } from '$app/forms'; async function handleSubmit(event) { const response = await fetch('/form?/action', { method: 'POST', body: new FormData(event.target) }); const result = deserialize(await response.text()); // ... } function deserialize< Success extends Record | undefined, Failure extends Record | undefined >( result: string ): import('@sveltejs/kit').ActionResult; enhance permalink This action enhances a element that otherwise would work without JavaScript. The submit function is called upon submission with the given FormData and the action that should be triggered. If cancel is called, the form will not be submitted. You can use the abort controller to cancel the submission in case another one starts. If a function is returned, that function is called with the response from the server. If nothing is returned, the fallback will be used. If this function or its return value isn't set, it falls back to updating the form prop with the returned data if the action is one same page as the form updates $page.status resets the element and invalidates all data in case of successful submission with no redirect response redirects in case of a redirect response redirects to the nearest error page in case of an unexpected error If you provide a custom function with a callback and want to use the default behavior, invoke update in your callback. function enhance< Success extends Record | undefined, Failure extends Record | undefined >( form\\\\\\\\\\\\\\_element: HTMLFormElement, submit?: import('@sveltejs/kit').SubmitFunction< Success, Failure > ): { destroy(): void; }; $app/navigation permalink import { afterNavigate, beforeNavigate, disableScrollHandling, goto, invalidate, invalidateAll, onNavigate, preloadCode, preloadData, pushState, replaceState } from '$app/navigation'; afterNavigate permalink A lifecycle function that runs the supplied callback when the current component mounts, and also whenever we navigate to a new URL. afterNavigate must be called during a component initialization. It remains active as long as the component is mounted. const afterNavigate: ( callback: ( navigation: import('@sveltejs/kit').AfterNavigate ) => void ) => void; beforeNavigate permalink A navigation interceptor that triggers before we navigate to a new URL, whether by clicking a link, calling goto(...), or using the browser back/forward controls. Calling cancel() will prevent the navigation from completing. If navigation.type === 'leave' — meaning the user is navigating away from the app (or closing the tab) — calling cancel will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response. When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), navigation.to.route.id will be null. If the navigation will (if not cancelled) cause the document to unload — in other words 'leave' navigations and 'link' navigations where navigation.to.route === null — navigation.willUnload is true. beforeNavigate must be called during a component initialization. It remains active as long as the component is mounted. const beforeNavigate: ( callback: ( navigation: import('@sveltejs/kit').BeforeNavigate ) => void ) => void; disableScrollHandling permalink If called when the page is being updated following a navigation (in onMount or afterNavigate or an action, for example), this disables SvelteKit's built-in scroll handling. This is generally discouraged, since it breaks user expectations. const disableScrollHandling: () => void; goto permalink Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified url. For external URLs, use window.location = url instead of calling goto(url). const goto: ( url: string | URL, opts?: { replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; state?: App.PageState; } ) => Promise; invalidate permalink Causes any load functions belonging to the currently active page to re-run if they depend on the url in question, via fetch or depends. Returns a Promise that resolves when the page is subsequently updated. If the argument is given as a string or URL, it must resolve to the same URL that was passed to fetch or depends (including query parameters). To create a custom identifier, use a string beginning with \\\\\\\\\\\\\\[a-z\\\\\\\\\\\\\\]+: (e.g. custom:state) — this is a valid URL. The function argument can be used define a custom predicate. It receives the full URL and causes load to rerun if true is returned. This can be useful if you want to invalidate based on a pattern instead of a exact match. // Example: Match '/path' regardless of the query parameters import { invalidate } from '$app/navigation'; invalidate((url) => url.pathname === '/path'); const invalidate: ( url: string | URL | ((url: URL) => boolean) ) => Promise; invalidateAll permalink Causes all load functions belonging to the currently active page to re-run. Returns a Promise that resolves when the page is subsequently updated. const invalidateAll: () => Promise; onNavigate permalink A lifecycle function that runs the supplied callback immediately before we navigate to a new URL except during full-page navigations. If you return a Promise, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use document.startViewTransition. Avoid promises that are slow to resolve, since navigation will appear stalled to the user. If a function (or a Promise that resolves to a function) is returned from the callback, it will be called once the DOM has updated. onNavigate must be called during a component initialization. It remains active as long as the component is mounted. const onNavigate: ( callback: ( navigation: import('@sveltejs/kit').OnNavigate ) => MaybePromise<(() => void) | void> ) => void; preloadCode permalink Programmatically imports the code for routes that haven't yet been fetched. Typically, you might call this to speed up subsequent navigation. You can specify routes by any matching pathname such as /about (to match src/routes/about/+page.svelte) or /blog/\\\\\\\\\\\\\\* (to match src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte). Unlike preloadData, this won't call load functions. Returns a Promise that resolves when the modules have been imported. const preloadCode: (url: string) => Promise; preloadData permalink Programmatically preloads the given page, which means ensuring that the code for the page is loaded, and calling the page's load function with the appropriate options. This is the same behaviour that SvelteKit triggers when the user taps or mouses over an element with data-sveltekit-preload-data. If the next navigation is to href, the values returned from load will be used, making navigation instantaneous. Returns a Promise that resolves with the result of running the new route's load functions once the preload is complete. const preloadData: ( href: string ) => Promise\\\\\\\\>; pushState permalink Programmatically create a new history entry with the given $page.state. To use the current URL, you can pass '' as the first argument. Used for shallow routing. const pushState: ( url: string | URL, state: App.PageState ) => void; replaceState permalink Programmatically replace the current history entry with the given $page.state. To use the current URL, you can pass '' as the first argument. Used for shallow routing. const replaceState: ( url: string | URL, state: App.PageState ) => void; $app/paths permalink import { resolveRoute, assets, base } from '$app/paths'; resolveRoute permalink Populate a route ID with params to resolve a pathname. function resolveRoute( id: string, params: Record ): string; assets permalink An absolute path that matches config.kit.paths.assets. If a value for config.kit.paths.assets is specified, it will be replaced with '/\\\\\\\\\\\\\\_svelte\\\\\\\\\\\\\\_kit\\\\\\\\\\\\\\_assets' during vite dev or vite preview, since the assets don't yet live at their eventual URL. let assets: | '' | \\\\\\\\\\\\\\`https://${string}\\\\\\\\\\\\\\` | \\\\\\\\\\\\\\`http://${string}\\\\\\\\\\\\\\` | '/\\\\\\\\\\\\\\_svelte\\\\\\\\\\\\\\_kit\\\\\\\\\\\\\\_assets'; base permalink A string that matches config.kit.paths.base. Example usage: \\\\\\[Link\\\\\\]({base}/your-page) let base: '' | \\\\\\\\\\\\\\`/${string}\\\\\\\\\\\\\\`; $app/stores permalink import { getStores, navigating, page, updated } from '$app/stores'; getStores permalink function getStores(): { page: typeof page; navigating: typeof navigating; updated: typeof updated; }; navigating permalink A readable store. When navigating starts, its value is a Navigation object with from, to, type and (if type === 'popstate') delta properties. When navigating finishes, its value reverts to null. On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time. const navigating: import('svelte/store').Readable< import('@sveltejs/kit').Navigation | null >; page permalink A readable store whose value contains page data. On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time. const page: import('svelte/store').Readable< import('@sveltejs/kit').Page >; updated permalink A readable store whose initial value is false. If version.pollInterval is a non-zero value, SvelteKit will poll for new versions of the app and update the store value to true when it detects one. updated.check() will force an immediate check, regardless of polling. On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time. const updated: import('svelte/store').Readable & { check(): Promise; }; $env/dynamic/private permalink This module provides access to runtime environment variables, as defined by the platform you're running on. For example if you're using adapter-node (or running vite preview), this is equivalent to process.env. This module only includes variables that do not begin with config.kit.env.publicPrefix and do start with config.kit.env.privatePrefix (if configured). This module cannot be imported into client-side code. Dynamic environment variables cannot be used during prerendering. import { env } from '$env/dynamic/private'; console.log(env.DEPLOYMENT\\\\\\\\\\\\\\_SPECIFIC\\\\\\\\\\\\\\_VARIABLE); In dev, $env/dynamic always includes environment variables from .env. In prod, this behavior will depend on your adapter. $env/dynamic/public permalink Similar to $env/dynamic/private, but only includes variables that begin with config.kit.env.publicPrefix (which defaults to PUBLIC\\\\\\\\\\\\\\_), and can therefore safely be exposed to client-side code. Note that public dynamic environment variables must all be sent from the server to the client, causing larger network requests — when possible, use $env/static/public instead. Dynamic environment variables cannot be used during prerendering. import { env } from '$env/dynamic/public'; console.log(env.PUBLIC\\\\\\\\\\\\\\_DEPLOYMENT\\\\\\\\\\\\\\_SPECIFIC\\\\\\\\\\\\\\_VARIABLE); $env/static/private permalink Environment variables loaded by Vite from .env files and process.env. Like $env/dynamic/private, this module cannot be imported into client-side code. This module only includes variables that do not begin with config.kit.env.publicPrefix and do start with config.kit.env.privatePrefix (if configured). Unlike $env/dynamic/private, the values exported from this module are statically injected into your bundle at build time, enabling optimisations like dead code elimination. import { API\\\\\\\\\\\\\\_KEY } from '$env/static/private'; Note that all environment variables referenced in your code should be declared (for example in an .env file), even if they don't have a value until the app is deployed: MY\\\\\\\\\\\\\\_FEATURE\\\\\\\\\\\\\\_FLAG=\"\" You can override .env values from the command line like so: MY\\\\\\\\\\\\\\_FEATURE\\\\\\\\\\\\\\_FLAG=\"enabled\" npm run dev $env/static/public permalink Similar to $env/static/private, except that it only includes environment variables that begin with config.kit.env.publicPrefix (which defaults to PUBLIC\\\\\\\\\\\\\\_), and can therefore safely be exposed to client-side code. Values are replaced statically at build time. import { PUBLIC\\\\\\\\\\\\\\_BASE\\\\\\\\\\\\\\_URL } from '$env/static/public'; $lib permalink This is a simple alias to src/lib, or whatever directory is specified as config.kit.files.lib. It allows you to access common components and utility modules without ../../../../ nonsense. $lib/server permalink A subdirectory of $lib. SvelteKit will prevent you from importing any modules in $lib/server into client-side code. See server-only modules. $service-worker permalink import { base, build, files, prerendered, version } from '$service-worker'; This module is only available to service workers. base permalink The base path of the deployment. Typically this is equivalent to config.kit.paths.base, but it is calculated from location.pathname meaning that it will continue to work correctly if the site is deployed to a subdirectory. Note that there is a base but no assets, since service workers cannot be used if config.kit.paths.assets is specified. const base: string; build permalink An array of URL strings representing the files generated by Vite, suitable for caching with cache.addAll(build). During development, this is an empty array. const build: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; files permalink An array of URL strings representing the files in your static directory, or whatever directory is specified by config.kit.files.assets. You can customize which files are included from static directory using config.kit.serviceWorker.files const files: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; prerendered permalink An array of pathnames corresponding to prerendered pages and endpoints. During development, this is an empty array. const prerendered: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; version permalink See config.kit.version. It's useful for generating unique cache names inside your service worker, so that a later deployment of your app can invalidate old caches. const version: string; @sveltejs/kit permalink import { VERSION, error, fail, isHttpError, isRedirect, json, redirect, text } from '@sveltejs/kit'; VERSION permalink const VERSION: string; error permalink Throws an error with a HTTP status code and an optional message. When called during request handling, this will cause SvelteKit to return an error response without invoking handleError. Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it. function error( status: NumericRange<400, 599>, body: App.Error ): never; error permalink Throws an error with a HTTP status code and an optional message. When called during request handling, this will cause SvelteKit to return an error response without invoking handleError. Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it. function error( status: NumericRange<400, 599>, body?: { message: string; } extends App.Error ? App.Error | string | undefined : never ): never; fail permalink Create an ActionFailure object. function fail(status: number): ActionFailure; fail permalink Create an ActionFailure object. function fail< T extends Record | undefined = undefined >(status: number, data: T): ActionFailure; isHttpError permalink Checks whether this is an error thrown by error. function isHttpError( e: unknown, status?: T | undefined ): e is HttpError\\\\\\\\\\\\\\_1 & { status: T extends undefined ? never : T; }; isRedirect permalink Checks whether this is a redirect thrown by redirect. function isRedirect(e: unknown): e is Redirect\\\\\\\\\\\\\\_1; json permalink Create a JSON Response object from the supplied data. function json( data: any, init?: ResponseInit | undefined ): Response; redirect permalink Redirect a request. When called during request handling, SvelteKit will return a redirect response. Make sure you're not catching the thrown redirect, which would prevent SvelteKit from handling it. function redirect( status: NumericRange<300, 308>, location: string | URL ): never; text permalink Create a Response object from the supplied body. function text( body: string, init?: ResponseInit | undefined ): Response; @sveltejs/kit/hooks permalink import { sequence } from '@sveltejs/kit/hooks'; sequence permalink A helper function for sequencing multiple handle calls in a middleware-like manner. The behavior for the handle options is as follows: transformPageChunk is applied in reverse order and merged preload is applied in forward order, the first option \"wins\" and no preload options after it are called filterSerializedResponseHeaders behaves the same as preload src/hooks.server.js import { sequence } from '@sveltejs/kit/hooks'; /// type: import('@sveltejs/kit').Handle async function first({ event, resolve }) { console.log('first pre-processing'); const result = await resolve(event, { transformPageChunk: ({ html }) => { // transforms are applied in reverse order console.log('first transform'); return html; }, preload: () => { // this one wins as it's the first defined in the chain console.log('first preload'); } }); console.log('first post-processing'); return result; } /// type: import('@sveltejs/kit').Handle async function second({ event, resolve }) { console.log('second pre-processing'); const result = await resolve(event, { transformPageChunk: ({ html }) => { console.log('second transform'); return html; }, preload: () => { console.log('second preload'); }, filterSerializedResponseHeaders: () => { // this one wins as it's the first defined in the chain console.log('second filterSerializedResponseHeaders'); } }); console.log('second post-processing'); return result; } export const handle = sequence(first, second); The example above would print: first pre-processing first preload second pre-processing second filterSerializedResponseHeaders second transform first transform second post-processing first post-processing function sequence( ...handlers: import('@sveltejs/kit').Handle\\\\\\\\\\\\\\[\\\\\\\\\\\\\\] ): import('@sveltejs/kit').Handle; @sveltejs/kit/node permalink import { getRequest, setResponse } from '@sveltejs/kit/node'; getRequest permalink function getRequest({ request, base, bodySizeLimit }: { request: import('http').IncomingMessage; base: string; bodySizeLimit?: number; }): Promise; setResponse permalink function setResponse( res: import('http').ServerResponse, response: Response ): Promise; @sveltejs/kit/node/polyfills permalink import { installPolyfills } from '@sveltejs/kit/node/polyfills'; installPolyfills permalink Make various web APIs available as globals: crypto File function installPolyfills(): void; @sveltejs/kit/vite permalink import { sveltekit } from '@sveltejs/kit/vite'; sveltekit permalink Returns the SvelteKit Vite plugins. function sveltekit(): Promise; PREVIOUS Command Line Interface NEXT Types GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Command Line Interface • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/cli",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte REFERENCE Command Line Interface Edit this page on GitHub ON THIS PAGE Command Line Interface svelte-kit sync SvelteKit projects use Vite, meaning you'll mostly use its CLI (albeit via npm run dev/build/preview scripts): vite dev — start a development server vite build — build a production version of your app vite preview — run the production version locally However SvelteKit includes its own CLI for initialising your project: svelte-kit sync permalink svelte-kit sync creates the tsconfig.json and all generated types (which you can import as ./$types inside routing files) for your project. When you create a new project, it is listed as the prepare script and will be run automatically as part of the npm lifecycle, so you should not ordinarily have to run this command. PREVIOUS Configuration NEXT Modules GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Configuration • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/configuration",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte REFERENCE Configuration Edit this page on GitHub ON THIS PAGE Your project's configuration lives in a svelte.config.js file at the root of your project. As well as SvelteKit, this config object is used by other tooling that integrates with Svelte such as editor extensions. svelte.config.js import adapter from '@sveltejs/adapter-auto'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { adapter: adapter() } }; export default config; interface Config {…} compilerOptions?: CompileOptions; DEFAULT {} Options passed to svelte.compile. extensions?: string\\\\\\\\\\\\\\[\\\\\\\\\\\\\\]; DEFAULT \\\\\\\\\\\\\\[\".svelte\"\\\\\\\\\\\\\\] List of file extensions that should be treated as Svelte files. kit?: KitConfig; SvelteKit options package?: { source?: string; dir?: string; emitTypes?: boolean; exports?(filepath: string): boolean; files?(filepath: string): boolean; }; @sveltejs/package options. preprocess?: any; Preprocessor options, if any. Preprocessing can alternatively also be done through Vite's preprocessor capabilities. vitePlugin?: PluginOptions; vite-plugin-svelte plugin options. \\\\\\\\\\\\\\[key: string\\\\\\\\\\\\\\]: any; Any additional options required by tooling that integrates with Svelte. The kit property configures SvelteKit, and can have the following properties: adapter permalink DEFAULT undefined Your adapter is run when executing vite build. It determines how the output is converted for different platforms. alias permalink DEFAULT {} An object containing zero or more aliases used to replace values in import statements. These aliases are automatically passed to Vite and TypeScript. svelte.config.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { alias: { // this will match a file 'my-file': 'path/to/my-file.js', // this will match a directory and its contents // (\\\\\\\\\\\\\\`my-directory/x\\\\\\\\\\\\\\` resolves to \\\\\\\\\\\\\\`path/to/my-directory/x\\\\\\\\\\\\\\`) 'my-directory': 'path/to/my-directory', // an alias ending /\\\\\\\\\\\\\\* will only match // the contents of a directory, not the directory itself 'my-directory/\\\\\\\\\\\\\\*': 'path/to/my-directory/\\\\\\\\\\\\\\*' } } }; The built-in $lib alias is controlled by config.kit.files.lib as it is used for packaging. You will need to run npm run dev to have SvelteKit automatically generate the required alias configuration in jsconfig.json or tsconfig.json. appDir permalink DEFAULT \"\\\\\\\\\\\\\\_app\" The directory where SvelteKit keeps its stuff, including static assets (such as JS and CSS) and internally-used routes. If paths.assets is specified, there will be two app directories — ${paths.assets}/${appDir} and ${paths.base}/${appDir}. csp permalink Content Security Policy configuration. CSP helps to protect your users against cross-site scripting (XSS) attacks, by limiting the places resources can be loaded from. For example, a configuration like this... svelte.config.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { csp: { directives: { 'script-src': \\\\\\\\\\\\\\['self'\\\\\\\\\\\\\\] }, reportOnly: { 'script-src': \\\\\\\\\\\\\\['self'\\\\\\\\\\\\\\] } } } }; export default config; ...would prevent scripts loading from external sites. SvelteKit will augment the specified directives with nonces or hashes (depending on mode) for any inline styles and scripts it generates. To add a nonce for scripts and links manually included in src/app.html, you may use the placeholder %sveltekit.nonce% (for example ). When pages are prerendered, the CSP header is added via a tag (note that in this case, frame-ancestors, report-uri and sandbox directives will be ignored). When mode is 'auto', SvelteKit will use nonces for dynamically rendered pages and hashes for prerendered pages. Using nonces with prerendered pages is insecure and therefore forbidden. Note that most Svelte transitions work by creating an inline element. If you use these in your app, you must either leave the style-src directive unspecified or add unsafe-inline. If this level of configuration is insufficient and you have more dynamic requirements, you can use the handle hook to roll your own CSP. mode?: 'hash' | 'nonce' | 'auto'; Whether to use hashes or nonces to restrict and <style> elements. 'auto' will use hashes for prerendered pages, and nonces for dynamically rendered pages. directives?: CspDirectives; Directives that will be added to Content-Security-Policy headers. reportOnly?: CspDirectives; Directives that will be added to Content-Security-Policy-Report-Only headers. csrf permalink Protection against cross-site request forgery (CSRF) attacks. checkOrigin?: boolean; DEFAULT true Whether to check the incoming origin header for POST, PUT, PATCH, or DELETE form submissions and verify that it matches the server's origin. To allow people to make POST, PUT, PATCH, or DELETE requests with a Content-Type of application/x-www-form-urlencoded, multipart/form-data, or text/plain to your app from other origins, you will need to disable this option. Be careful! embedded permalink DEFAULT false Whether or not the app is embedded inside a larger app. If true, SvelteKit will add its event listeners related to navigation etc on the parent of %sveltekit.body% instead of window, and will pass params from the server rather than inferring them from location.pathname. env permalink Environment variable configuration dir?: string; DEFAULT \".\" The directory to search for .env files. publicPrefix?: string; DEFAULT \"PUBLIC\\\\\\\\\\\\\\_\" A prefix that signals that an environment variable is safe to expose to client-side code. See $env/static/public and $env/dynamic/public. Note that Vite's envPrefix must be set separately if you are using Vite's environment variable handling - though use of that feature should generally be unnecessary. privatePrefix?: string; DEFAULT \"\" A prefix that signals that an environment variable is unsafe to expose to client-side code. Environment variables matching neither the public nor the private prefix will be discarded completely. See $env/static/private and $env/dynamic/private. files permalink Where to find various files within your project. assets?: string; DEFAULT \"static\" a place to put static files that should have stable URLs and undergo no processing, such as favicon.ico or manifest.json hooks?: {…} client?: string; DEFAULT \"src/hooks.client\" The location of your client hooks. server?: string; DEFAULT \"src/hooks.server\" The location of your server hooks. lib?: string; DEFAULT \"src/lib\" your app's internal library, accessible throughout the codebase as $lib params?: string; DEFAULT \"src/params\" a directory containing parameter matchers routes?: string; DEFAULT \"src/routes\" the files that define the structure of your app (see Routing) serviceWorker?: string; DEFAULT \"src/service-worker\" the location of your service worker's entry point (see Service workers) appTemplate?: string; DEFAULT \"src/app.html\" the location of the template for HTML responses errorTemplate?: string; DEFAULT \"src/error.html\" the location of the template for fallback error responses inlineStyleThreshold permalink DEFAULT 0 Inline CSS inside a <style> block at the head of the HTML. This option is a number that specifies the maximum length of a CSS file in UTF-16 code units, as specified by the String.length property, to be inlined. All CSS files needed for the page and smaller than this value are merged and inlined in a <style> block. This results in fewer initial requests and can improve your First Contentful Paint score. However, it generates larger HTML output and reduces the effectiveness of browser caches. Use it advisedly. moduleExtensions permalink DEFAULT \\\\\\\\\\\\\\[\".js\", \".ts\"\\\\\\\\\\\\\\] An array of file extensions that SvelteKit will treat as modules. Files with extensions that match neither config.extensions nor config.kit.moduleExtensions will be ignored by the router. outDir permalink DEFAULT \".svelte-kit\" The directory that SvelteKit writes files to during dev and build. You should exclude this directory from version control. output permalink Options related to the build output format preloadStrategy?: 'modulepreload' | 'preload-js' | 'preload-mjs'; DEFAULT \"modulepreload\" SvelteKit will preload the JavaScript modules needed for the initial page to avoid import 'waterfalls', resulting in faster application startup. There are three strategies with different trade-offs: modulepreload - uses <link rel=\"modulepreload\">. This delivers the best results in Chromium-based browsers, in Firefox 115+, and Safari 17+. It is ignored in older browsers. preload-js - uses <link rel=\"preload\">. Prevents waterfalls in Chromium and Safari, but Chromium will parse each module twice (once as a script, once as a module). Causes modules to be requested twice in Firefox. This is a good setting if you want to maximise performance for users on iOS devices at the cost of a very slight degradation for Chromium users. preload-mjs - uses <link rel=\"preload\"> but with the .mjs extension which prevents double-parsing in Chromium. Some static webservers will fail to serve .mjs files with a Content-Type: application/javascript header, which will cause your application to break. If that doesn't apply to you, this is the option that will deliver the best performance for the largest number of users, until modulepreload is more widely supported. paths permalink assets?: '' | \\\\\\\\\\\\\\`http://${string}\\\\\\\\\\\\\\` | \\\\\\\\\\\\\\`https://${string}\\\\\\\\\\\\\\`; DEFAULT \"\" An absolute path that your app's files are served from. This is useful if your files are served from a storage bucket of some kind. base?: '' | \\\\\\\\\\\\\\`/${string}\\\\\\\\\\\\\\`; DEFAULT \"\" A root-relative path that must start, but not end with / (e.g. /base-path), unless it is the empty string. This specifies where your app is served from and allows the app to live on a non-root path. Note that you need to prepend all your root-relative links with the base value or they will point to the root of your domain, not your base (this is how the browser works). You can use base from $app/paths for that: <a href=\"{base}/your-page\">Link</a>. If you find yourself writing this often, it may make sense to extract this into a reusable component. relative?: boolean; DEFAULT true Whether to use relative asset paths. If true, base and assets imported from $app/paths will be replaced with relative asset paths during server-side rendering, resulting in more portable HTML. If false, %sveltekit.assets% and references to build artifacts will always be root-relative paths, unless paths.assets is an external URL Single-page app fallback pages will always use absolute paths, regardless of this setting. If your app uses a <base> element, you should set this to false, otherwise asset URLs will incorrectly be resolved against the <base> URL rather than the current page. In 1.0, undefined was a valid value, which was set by default. In that case, if paths.assets was not external, SvelteKit would replace %sveltekit.assets% with a relative path and use relative paths to reference build artifacts, but base and assets imported from $app/paths would be as specified in your config. prerender permalink See Prerendering. concurrency?: number; DEFAULT 1 How many pages can be prerendered simultaneously. JS is single-threaded, but in cases where prerendering performance is network-bound (for example loading content from a remote CMS) this can speed things up by processing other tasks while waiting on the network response. crawl?: boolean; DEFAULT true Whether SvelteKit should find pages to prerender by following links from entries. entries?: Array<'\\\\\\\\\\\\\\*' | \\\\\\\\\\\\\\`/${string}\\\\\\\\\\\\\\`>; DEFAULT \\\\\\\\\\\\\\[\"\\\\\\\\\\\\\\*\"\\\\\\\\\\\\\\] An array of pages to prerender, or start crawling from (if crawl: true). The \\\\\\\\\\\\\\* string includes all routes containing no required \\\\\\\\\\\\\\[parameters\\\\\\\\\\\\\\] with optional parameters included as being empty (since SvelteKit doesn't know what value any parameters should have). handleHttpError?: PrerenderHttpErrorHandlerValue; DEFAULT \"fail\" How to respond to HTTP errors encountered while prerendering the app. 'fail' — fail the build 'ignore' - silently ignore the failure and continue 'warn' — continue, but print a warning (details) => void — a custom error handler that takes a details object with status, path, referrer, referenceType and message properties. If you throw from this function, the build will fail svelte.config.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { prerender: { handleHttpError: ({ path, referrer, message }) => { // ignore deliberate link to shiny 404 page if (path === '/not-found' && referrer === '/blog/how-we-built-our-404-page') { return; } // otherwise fail the build throw new Error(message); } } } }; handleMissingId?: PrerenderMissingIdHandlerValue; DEFAULT \"fail\" How to respond when hash links from one prerendered page to another don't correspond to an id on the destination page. 'fail' — fail the build 'ignore' - silently ignore the failure and continue 'warn' — continue, but print a warning (details) => void — a custom error handler that takes a details object with path, id, referrers and message properties. If you throw from this function, the build will fail handleEntryGeneratorMismatch?: PrerenderEntryGeneratorMismatchHandlerValue; DEFAULT \"fail\" How to respond when an entry generated by the entries export doesn't match the route it was generated from. 'fail' — fail the build 'ignore' - silently ignore the failure and continue 'warn' — continue, but print a warning (details) => void — a custom error handler that takes a details object with generatedFromId, entry, matchedId and message properties. If you throw from this function, the build will fail origin?: string; DEFAULT \"http://sveltekit-prerender\" The value of url.origin during prerendering; useful if it is included in rendered content. serviceWorker permalink register?: boolean; DEFAULT true Whether to automatically register the service worker, if it exists. files?(filepath: string): boolean; DEFAULT (filename) => !/\\\\\\\\\\\\\\\\.DS\\\\\\\\\\\\\\_Store/.test(filename) Determine which files in your static directory will be available in $service-worker.files. typescript permalink config?: (config: Record<string, any>) => Record<string, any> | void; DEFAULT (config) => config A function that allows you to edit the generated tsconfig.json. You can mutate the config (recommended) or return a new one. This is useful for extending a shared tsconfig.json in a monorepo root, for example. version permalink Client-side navigation can be buggy if you deploy a new version of your app while people are using it. If the code for the new page is already loaded, it may have stale content; if it isn't, the app's route manifest may point to a JavaScript file that no longer exists. SvelteKit helps you solve this problem through version management. If SvelteKit encounters an error while loading the page and detects that a new version has been deployed (using the name specified here, which defaults to a timestamp of the build) it will fall back to traditional full-page navigation. Not all navigations will result in an error though, for example if the JavaScript for the next page is already loaded. If you still want to force a full-page navigation in these cases, use techniques such as setting the pollInterval and then using beforeNavigate: +layout.svelte <script> import { beforeNavigate } from '$app/navigation'; import { updated } from '$app/stores'; beforeNavigate(({ willUnload, to }) => { if ($updated && !willUnload && to?.url) { location.href = to.url.href; } }); If you set pollInterval to a non-zero value, SvelteKit will poll for new versions in the background and set the value of the updated store to true when it detects one. name?: string; The current app version string. If specified, this must be deterministic (e.g. a commit ref rather than Math.random() or Date.now().toString()), otherwise defaults to a timestamp of the build. For example, to use the current commit hash, you could do use git rev-parse HEAD: svelte.config.js import \\\\\\\\\\\\\\* as child\\\\\\\\\\\\\\_process from 'node:child\\\\\\\\\\\\\\_process'; export default { kit: { version: { name: child\\\\\\\\\\\\\\_process.execSync('git rev-parse HEAD').toString().trim() } } }; pollInterval?: number; DEFAULT 0 The interval in milliseconds to poll for version changes. If this is 0, no polling occurs. PREVIOUS SEO NEXT Command Line Interface GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript</x-turndown></x-turndown>"
  },
  {
    "title": "Accessibility • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/accessibility",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BEST PRACTICES Accessibility Edit this page on GitHub ON THIS PAGE Accessibility Route announcements Focus management The \"lang\" attribute Further reading SvelteKit strives to provide an accessible platform for your app by default. Svelte's compile-time accessibility checks will also apply to any SvelteKit application you build. Here's how SvelteKit's built-in accessibility features work and what you need to do to help these features to work as well as possible. Keep in mind that while SvelteKit provides an accessible foundation, you are still responsible for making sure your application code is accessible. If you're new to accessibility, see the \"further reading\" section of this guide for additional resources. We recognize that accessibility can be hard to get right. If you want to suggest improvements to how SvelteKit handles accessibility, please open a GitHub issue. Route announcements permalink In traditional server-rendered applications, every navigation (e.g. clicking on an tag) triggers a full page reload. When this happens, screen readers and other assistive technology will read out the new page's title so that users understand that the page has changed. Since navigation between pages in SvelteKit happens without reloading the page (known as client-side routing), SvelteKit injects a live region onto the page that will read out the new page name after each navigation. This determines the page name to announce by inspecting the element. Because of this behavior, every page in your app should have a unique, descriptive title. In SvelteKit, you can do this by placing a element on each page: src/routes/+page.svelte Todo List This will allow screen readers and other assistive technology to identify the new page after a navigation occurs. Providing a descriptive title is also important for SEO. Focus management permalink In traditional server-rendered applications, every navigation will reset focus to the top of the page. This ensures that people browsing the web with a keyboard or screen reader will start interacting with the page from the beginning. To simulate this behavior during client-side routing, SvelteKit focuses the element after each navigation and enhanced form submission. There is one exception - if an element with the autofocus attribute is present, SvelteKit will focus that element instead. Make sure to consider the implications for assistive technology when using that attribute. If you want to customize SvelteKit's focus management, you can use the afterNavigate hook: import { afterNavigate } from '$app/navigation'; afterNavigate(() => { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {HTMLElement | null} \\\\\\\\\\\\\\*/ const to\\\\\\\\\\\\\\_focus = document.querySelector('.focus-me'); to\\\\\\\\\\\\\\_focus?.focus(); }); You can also programmatically navigate to a different page using the goto function. By default, this will have the same client-side routing behavior as clicking on a link. However, goto also accepts a keepFocus option that will preserve the currently-focused element instead of resetting focus. If you enable this option, make sure the currently-focused element still exists on the page after navigation. If the element no longer exists, the user's focus will be lost, making for a confusing experience for assistive technology users. The \"lang\" attribute permalink By default, SvelteKit's page template sets the default language of the document to English. If your content is not in English, you should update the element in src/app.html to have the correct lang attribute. This will ensure that any assistive technology reading the document uses the correct pronunciation. For example, if your content is in German, you should update app.html to the following: src/app.html If your content is available in multiple languages, you should set the lang attribute based on the language of the current page. You can do this with SvelteKit's handle hook: src/app.html src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export function handle({ event, resolve }) { return resolve(event, { transformPageChunk: ({ html }) => html.replace('%lang%', get\\\\\\\\\\\\\\_lang(event)) }); } Further reading permalink For the most part, building an accessible SvelteKit app is the same as building an accessible web app. You should be able to apply information from the following general accessibility resources to any web experience you build: MDN Web Docs: Accessibility The A11y Project How to Meet WCAG (Quick Reference) PREVIOUS Images NEXT SEO GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "SEO • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/seo",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BEST PRACTICES SEO Edit this page on GitHub ON THIS PAGE The most important aspect of SEO is to create high-quality content that is widely linked to from around the web. However, there are a few technical considerations for building sites that rank well. Out of the box permalink SSR permalink While search engines have got better in recent years at indexing content that was rendered with client-side JavaScript, server-side rendered content is indexed more frequently and reliably. SvelteKit employs SSR by default, and while you can disable it in handle, you should leave it on unless you have a good reason not to. SvelteKit's rendering is highly configurable and you can implement dynamic rendering if necessary. It's not generally recommended, since SSR has other benefits beyond SEO. Performance permalink Signals such as Core Web Vitals impact search engine ranking. Because Svelte and SvelteKit introduce minimal overhead, it's easier to build high performance sites. You can test your site's performance using Google's PageSpeed Insights or Lighthouse. Normalized URLs permalink SvelteKit redirects pathnames with trailing slashes to ones without (or vice versa depending on your configuration), as duplicate URLs are bad for SEO. Manual setup permalink and permalink Every page should have well-written and unique and  elements inside a . Guidance on how to write descriptive titles and descriptions, along with other suggestions on making content understandable by search engines, can be found on Google's Lighthouse SEO audits documentation. A common pattern is to return SEO-related data from page load functions, then use it (as $page.data) in a in your root layout. Structured data permalink Structured data helps search engines understand the content of a page. If you're using structured data alongside svelte-preprocess, you will need to explicitly preserve ld+json data (this may change in future): svelte.config.js import preprocess from 'svelte-preprocess'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { preprocess: preprocess({ preserve: \\\\\\\\\\\\\\['ld+json'\\\\\\\\\\\\\\] // ... }) }; export default config; Sitemaps permalink Sitemaps help search engines prioritize pages within your site, particularly when you have a large amount of content. You can create a sitemap dynamically using an endpoint: src/routes/sitemap.xml/+server.js export async function GET() { return new Response( \\\\\\\\\\\\\\` \\\\\\\\\\\\\\`.trim(), { headers: { 'Content-Type': 'application/xml' } } ); } AMP permalink An unfortunate reality of modern web development is that it is sometimes necessary to create an Accelerated Mobile Pages (AMP) version of your site. In SvelteKit this can be done by setting the inlineStyleThreshold option... svelte.config.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { // since  isn't // allowed, inline all styles inlineStyleThreshold: Infinity } }; export default config; ...disabling csr in your root +layout.js/+layout.server.js... src/routes/+layout.server.js export const csr = false; ...adding amp to your app.html ... ...and transforming the HTML using transformPageChunk along with transform imported from @sveltejs/amp: src/hooks.server.js import \\\\\\\\\\\\\\* as amp from '@sveltejs/amp'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { let buffer = ''; return await resolve(event, { transformPageChunk: ({ html, done }) => { buffer += html; if (done) return amp.transform(buffer); } }); } To prevent shipping any unused CSS as a result of transforming the page to amp, we can use dropcss: src/hooks.server.js import \\\\\\\\\\\\\\* as amp from '@sveltejs/amp'; import dropcss from 'dropcss'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { let buffer = ''; return await resolve(event, { transformPageChunk: ({ html, done }) => { buffer += html; if (done) { let css = ''; const markup = amp .transform(buffer) .replace('⚡', 'amp') // dropcss can't handle this character .replace(/\\\\\\\\\\\\\\]\\\\\\\\\\\\\\*?)>(\\\\\\\\\\\\\\[^\\\\\\\\\\\\\\]+?)<\\\\\\\\\\\\\\\\/style>/, (match, attributes, contents) => { css = contents; return \\\\\\\\\\\\\\`<style amp-custom${attributes}>\\\\\\\\\\\\\\`; }); css = dropcss({ css, html: markup }).css; return markup.replace('', \\\\\\\\\\\\\\`${css}\\\\\\\\\\\\\\`); } } }); } It's a good idea to use the handle hook to validate the transformed HTML using amphtml-validator, but only if you're prerendering pages since it's very slow. PREVIOUS Accessibility NEXT Configuration GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Performance • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/performance",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BEST PRACTICES Performance Edit this page on GitHub ON THIS PAGE Out of the box, SvelteKit does a lot of work to make your applications as performant as possible: Code-splitting, so that only the code you need for the current page is loaded Asset preloading, so that 'waterfalls' (of files requesting other files) are prevented File hashing, so that your assets can be cached forever Request coalescing, so that data fetched from separate server load functions is grouped into a single HTTP request Parallel loading, so that separate universal load functions fetch data simultaneously Data inlining, so that requests made with fetch during server rendering can be replayed in the browser without issuing a new request Conservative invalidation, so that load functions are only re-run when necessary Prerendering (configurable on a per-route basis, if necessary) so that pages without dynamic data can be served instantaneously Link preloading, so that data and code requirements for a client-side navigation are eagerly anticipated Nevertheless, we can't (yet) eliminate all sources of slowness. To eke out maximum performance, you should be mindful of the following tips. Diagnosing issues permalink Google's PageSpeed Insights and (for more advanced analysis) WebPageTest are excellent ways to understand the performance characteristics of a site that is already deployed to the internet. Your browser also includes useful developer tools for analysing your site, whether deployed or running locally: Chrome - Lighthouse, Network, and Performance devtools Edge - Lighthouse, Network, and Performance devtools Firefox - Network and Performance devtools Safari - enhancing the performance of your webpage Note that your site running locally in dev mode will exhibit different behaviour than your production app, so you should do performance testing in preview mode after building. Instrumenting permalink If you see in the network tab of your browser that an API call is taking a long time and you'd like to understand why, you may consider instrumenting your backend with a tool like OpenTelemetry or Server-Timing headers. Optimizing assets permalink Images permalink Reducing the size of image files is often one of the most impactful changes you can make to a site's performance. Svelte provides the @sveltejs/enhanced-image package, detailed on the images page, for making this easier. Additionally, Lighthouse is useful for identifying the worst offenders. Videos permalink Video files can be very large, so extra care should be taken to ensure that they're optimized: Compress videos with tools such as Handbrake. Consider converting the videos to web-friendly formats such as .webm or .mp4. You can lazy-load videos located below the fold with preload=\"none\" (though note that this will slow down playback when the user does initiate it). Strip the audio track out of muted videos using a tool like FFmpeg. Fonts permalink SvelteKit automatically preloads critical .js and .css files when the user visits a page, but it does not preload fonts by default, since this may cause unnecessary files (such as font weights that are referenced by your CSS but not actually used on the current page) to be downloaded. Having said that, preloading fonts correctly can make a big difference to how fast your site feels. In your handle hook, you can call resolve with a preload filter that includes your fonts. You can reduce the size of font files by subsetting your fonts. Reducing code size permalink Svelte version permalink We recommend running the latest version of Svelte. Svelte 4 is smaller and faster than Svelte 3. (The Svelte 5 preview is much smaller and faster still, but we don't recommend that you upgrade to this version until it's production ready.) Packages permalink rollup-plugin-visualizer can be helpful for identifying which packages are contributing the most to the size of your site. You may also find opportunities to remove code by manually inspecting the build output (use build: { minify: false } in your Vite config to make the output readable, but remember to undo that before deploying your app), or via the network tab of your browser's devtools. External scripts permalink Try to minimize the number of third-party scripts running in the browser. For example, instead of using JavaScript-based analytics consider using server-side implementations, such as those offered by many platforms with SvelteKit adapters including Cloudflare, Netlify, and Vercel. To run third party scripts in a web worker (which avoids blocking the main thread), use Partytown's SvelteKit integration. Selective loading permalink Code imported with static import declarations will be automatically bundled with the rest of your page. If there is a piece of code you need only when some condition is met, use the dynamic import(...) form instead. Navigation permalink Preloading permalink You can speed up client-side navigations by eagerly preloading the necessary code and data, using link options. This is configured by default on the element when you create a new SvelteKit app. Non-essential data permalink For slow-loading data that isn't needed immediately, the object returned from your load function can contain promises rather than the data itself. For server load functions, this will cause the data to stream in after the navigation (or initial page load). Preventing waterfalls permalink One of the biggest performance killers is what is referred to as a waterfall, which is a series of requests that is made sequentially. This can happen on the server or in the browser. Asset waterfalls can occur in the browser when your HTML requests JS which requests CSS which requests a background image and web font. SvelteKit will largely solve this class of problems for you by adding modulepreload tags or headers, but you should view the network tab in your devtools to check whether additional resources need to be preloaded. Pay special attention to this if you use web fonts since they need to be handled manually. If a universal load function makes an API call to fetch the current user, then uses the details from that response to fetch a list of saved items, and then uses that response to fetch the details for each item, the browser will end up making multiple sequential requests. This is deadly for performance, especially for users that are physically located far from your backend. Avoid this issue by using server load functions where possible. Server load functions are also not immune to waterfalls (though they are much less costly since they rarely involve roundtrips with high latency). For example if you query a database to get the current user and then use that data to make a second query for a list of saved items, it will typically be more performant to issue a single query with a database join. Hosting permalink Your frontend should be located in the same data center as your backend to minimize latency. For sites with no central backend, many SvelteKit adapters support deploying to the edge, which means handling each user's requests from a nearby server. This can reduce load times significantly. Some adapters even support configuring deployment on a per-route basis. You should also consider serving images from a CDN (which are typically edge networks) — the hosts for many SvelteKit adapters will do this automatically. Ensure your host uses HTTP/2 or newer. Vite's code splitting creates numerous small files for improved cacheability, which results in excellent performance, but this does assume that your files can be loaded in parallel with HTTP/2. Further reading permalink For the most part, building a performant SvelteKit app is the same as building any performant web app. You should be able to apply information from general performance resources such as Core Web Vitals to any web experience you build. PREVIOUS Packaging NEXT Images GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Packaging • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/packaging",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte ADVANCED Packaging Edit this page on GitHub ON THIS PAGE You can use SvelteKit to build apps as well as component libraries, using the @sveltejs/package package (npm create svelte has an option to set this up for you). When you're creating an app, the contents of src/routes is the public-facing stuff; src/lib contains your app's internal library. A component library has the exact same structure as a SvelteKit app, except that src/lib is the public-facing bit, and your root package.json is used to publish the package. src/routes might be a documentation or demo site that accompanies the library, or it might just be a sandbox you use during development. Running the svelte-package command from @sveltejs/package will take the contents of src/lib and generate a dist directory (which can be configured) containing the following: All the files in src/lib. Svelte components will be preprocessed, TypeScript files will be transpiled to JavaScript. Type definitions (d.ts files) which are generated for Svelte, JavaScript and TypeScript files. You need to install typescript >= 4.0.0 for this. Type definitions are placed next to their implementation, hand-written d.ts files are copied over as is. You can disable generation, but we strongly recommend against it — people using your library might use TypeScript, for which they require these type definition files. @sveltejs/package version 1 generated a package.json. This is no longer the case and it will now use the package.json from your project and validate that it is correct instead. If you're still on version 1, see this PR for migration instructions. Anatomy of a package.json permalink Since you're now building a library for public use, the contents of your package.json will become more important. Through it, you configure the entry points of your package, which files are published to npm, and which dependencies your library has. Let's go through the most important fields one by one. name permalink This is the name of your package. It will be available for others to install using that name, and visible on https://npmjs.com/package/. { \"name\": \"your-library\" } Read more about it here. license permalink Every package should have a license field so people know how they are allowed to use it. A very popular license which is also very permissive in terms of distribution and reuse without warranty is MIT. { \"license\": \"MIT\" } Read more about it here. Note that you should also include a LICENSE file in your package. files permalink This tells npm which files it will pack up and upload to npm. It should contain your output folder (dist by default). Your package.json and README and LICENSE will always be included, so you don't need to specify them. { \"files\": \\\\\\\\\\\\\\[\"dist\"\\\\\\\\\\\\\\] } To exclude unnecessary files (such as unit tests, or modules that are only imported from src/routes etc) you can add them to an .npmignore file. This will result in smaller packages that are faster to install. Read more about it here. exports permalink The \"exports\" field contains the package's entry points. If you set up a new library project through npm create svelte@latest, it's set to a single export, the package root: { \"exports\": { \".\": { \"types\": \"./dist/index.d.ts\", \"svelte\": \"./dist/index.js\" } } } This tells bundlers and tooling that your package only has one entry point, the root, and everything should be imported through that, like this: import { Something } from 'your-library'; The types and svelte keys are export conditions. They tell tooling what file to import when they look up the your-library import: TypeScript sees the types condition and looks up the type definition file. If you don't publish type definitions, omit this condition. Svelte-aware tooling sees the svelte condition and knows this is a Svelte component library. If you publish a library that does not export any Svelte components and that could also work in non-Svelte projects (for example a Svelte store library), you can replace this condition with default. Previous versions of @sveltejs/package also added a package.json export. This is no longer part of the template because all tooling can now deal with a package.json not being explicitly exported. You can adjust exports to your liking and provide more entry points. For example, if instead of a src/lib/index.js file that re-exported components you wanted to expose a src/lib/Foo.svelte component directly, you could create the following export map... { \"exports\": { \"./Foo.svelte\": { \"types\": \"./dist/Foo.svelte.d.ts\", \"svelte\": \"./dist/Foo.svelte\" } } } ...and a consumer of your library could import the component like so: import Foo from 'your-library/Foo.svelte'; Beware that doing this will need additional care if you provide type definitions. Read more about the caveat here In general, each key of the exports map is the path the user will have to use to import something from your package, and the value is the path to the file that will be imported or a map of export conditions which in turn contains these file paths. Read more about exports here. svelte permalink This is a legacy field that enabled tooling to recognise Svelte component libraries. It's no longer necessary when using the svelte export condition, but for backwards compatibility with outdated tooling that doesn't yet know about export conditions it's good to keep it around. It should point towards your root entry point. { \"svelte\": \"./dist/index.js\" } TypeScript permalink You should ship type definitions for your library even if you don't use TypeScript yourself so that people who do get proper intellisense when using your library. @sveltejs/package makes the process of generating types mostly opaque to you. By default, when packaging your library, type definitions are auto-generated for JavaScript, TypeScript and Svelte files. All you need to ensure is that the types condition in the exports map points to the correct files. When initialising a library project through npm create svelte@latest, this is automatically setup for the root export. If you have something else than a root export however — for example providing a your-library/foo import — you need to take additional care for providing type definitions. Unfortunately, TypeScript by default will not resolve the types condition for an export like { \"./foo\": { \"types\": \"./dist/foo.d.ts\", ... }}. Instead, it will search for a foo.d.ts relative to the root of your library (i.e. your-library/foo.d.ts instead of your-library/dist/foo.d.ts). To fix this, you have two options: The first option is to require people using your library to set the moduleResolution option in their tsconfig.json (or jsconfig.json) to bundler (available since TypeScript 5, the best and recommended option in the future), node16 or nodenext. This opts TypeScript into actually looking at the exports map and resolving the types correctly. The second option is to (ab)use the typesVersions feature from TypeScript to wire up the types. This is a field inside package.json TypeScript uses to check for different type definitions depending on the TypeScript version, and also contains a path mapping feature for that. We leverage that path mapping feature to get what we want. For the mentioned foo export above, the corresponding typesVersions looks like this: { \"exports\": { \"./foo\": { \"types\": \"./dist/foo.d.ts\", \"svelte\": \"./dist/foo.js\" } }, \"typesVersions\": { \">4.0\": { \"foo\": \\\\\\\\\\\\\\[\"./dist/foo.d.ts\"\\\\\\\\\\\\\\] } } } >4.0 tells TypeScript to check the inner map if the used TypeScript version is greater than 4 (which should in practice always be true). The inner map tells TypeScript that the typings for your-library/foo are found within ./dist/foo.d.ts, which essentially replicates the exports condition. You also have \\\\\\\\\\\\\\* as a wildcard at your disposal to make many type definitions at once available without repeating yourself. Note that if you opt into typesVersions you have to declare all type imports through it, including the root import (which is defined as \"index.d.ts\": \\\\\\\\\\\\\\[..\\\\\\\\\\\\\\]). You can read more about that feature here. Best practices permalink You should avoid using SvelteKit-specific modules like $app in your packages unless you intend for them to only be consumable by other SvelteKit projects. E.g. rather than using import { browser } from '$app/environment' you could use import { BROWSER } from 'esm-env' (see esm-env docs). You may also wish to pass in things like the current URL or a navigation action as a prop rather than relying directly on $app/stores, $app/navigation, etc. Writing your app in this more generic fashion will also make it easier to setup tools for testing, UI demos and so on. Ensure that you add aliases via svelte.config.js (not vite.config.js or tsconfig.json), so that they are processed by svelte-package. You should think carefully about whether or not the changes you make to your package are a bug fix, a new feature, or a breaking change, and update the package version accordingly. Note that if you remove any paths from exports or any export conditions inside them from your existing library, that should be regarded as a breaking change. { \"exports\": { \".\": { \"types\": \"./dist/index.d.ts\", // changing \\\\\\\\\\\\\\`svelte\\\\\\\\\\\\\\` to \\\\\\\\\\\\\\`default\\\\\\\\\\\\\\` is a breaking change: \"svelte\": \"./dist/index.js\" \"default\": \"./dist/index.js\" }, // removing this is a breaking change: \"./foo\": { \"types\": \"./dist/foo.d.ts\", \"svelte\": \"./dist/foo.js\", \"default\": \"./dist/foo.js\" }, // adding this is ok: \"./bar\": { \"types\": \"./dist/bar.d.ts\", \"svelte\": \"./dist/bar.js\", \"default\": \"./dist/bar.js\" } } } Options permalink svelte-package accepts the following options: -w/--watch — watch files in src/lib for changes and rebuild the package -i/--input — the input directory which contains all the files of the package. Defaults to src/lib -o/--o — the output directory where the processed files are written to. Your package.json's exports should point to files inside there, and the files array should include that folder. Defaults to dist -t/--types — whether or not to create type definitions (d.ts files). We strongly recommend doing this as it fosters ecosystem library quality. Defaults to true Publishing permalink To publish the generated package: npm publish Caveats permalink All relative file imports need to be fully specified, adhering to Node's ESM algorithm. This means that for a file like src/lib/something/index.js, you must include the filename with the extension: import { something } from './something'; import { something } from './something/index.js'; If you are using TypeScript, you need to import .ts files the same way, but using a .js file ending, not a .ts file ending. (This is a TypeScript design decision outside our control.) Setting \"moduleResolution\": \"NodeNext\" in your tsconfig.json or jsconfig.json will help you with this. All files except Svelte files (preprocessed) and TypeScript files (transpiled to JavaScript) are copied across as-is. PREVIOUS Shallow routing NEXT Performance GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Shallow routing • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/shallow-routing",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte ADVANCED Shallow routing Edit this page on GitHub ON THIS PAGE Shallow routing API Loading data for a route Caveats As you navigate around a SvelteKit app, you create history entries. Clicking the back and forward buttons traverses through this list of entries, re-running any load functions and replacing page components as necessary. Sometimes, it's useful to create history entries without navigating. For example, you might want to show a modal dialog that the user can dismiss by navigating back. This is particularly valuable on mobile devices, where swipe gestures are often more natural than interacting directly with the UI. In these cases, a modal that is not associated with a history entry can be a source of frustration, as a user may swipe backwards in an attempt to dismiss it and find themselves on the wrong page. SvelteKit makes this possible with the pushState and replaceState functions, which allow you to associate state with a history entry without navigating. For example, to implement a history-driven modal: +page.svelte import { pushState } from '$app/navigation'; import { page } from '$app/stores'; import Modal from './Modal.svelte'; function showModal() { pushState('', { showModal: true }); } {#if $page.state.showModal} history.back()} /> {/if} The modal can be dismissed by navigating back (unsetting $page.state.showModal) or by interacting with it in a way that causes the close callback to run, which will navigate back programmatically. API permalink The first argument to pushState is the URL, relative to the current URL. To stay on the current URL, use ''. The second argument is the new page state, which can be accessed via the page store as $page.state. You can make page state type-safe by declaring an App. PageState interface (usually in src/app.d.ts). To set page state without creating a new history entry, use replaceState instead of pushState. Loading data for a route permalink When shallow routing, you may want to render another +page.svelte inside the current page. For example, clicking on a photo thumbnail could pop up the detail view without navigating to the photo page. For this to work, you need to load the data that the +page.svelte expects. A convenient way to do this is to use preloadData inside the click handler of an element. If the element (or a parent) uses data-sveltekit-preload-data, the data will have already been requested, and preloadData will reuse that request. src/routes/photos/+page.svelte import { preloadData, pushState, goto } from '$app/navigation'; import { page } from '$app/stores'; import Modal from './Modal.svelte'; import PhotoPage from './\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/+page.svelte'; export let data; {#each data.thumbnails as thumbnail} \\\\\\[{ // bail if opening a new tab, or we're on too small a screen if (e.metaKey || innerWidth < 640) return; // prevent navigation e.preventDefault(); const { href } = e.currentTarget; // run \\\\\\\\\\\\\\`load\\\\\\\\\\\\\\` functions (or rather, get the result of the \\\\\\\\\\\\\\`load\\\\\\\\\\\\\\` functions // that are already running because of \\\\\\\\\\\\\\`data-sveltekit-preload-data\\\\\\\\\\\\\\`) const result = await preloadData(href); if (result.type === 'loaded' && result.status === 200) { pushState(href, { selected: result.data }); } else { // something bad happened! try navigating goto(href); } }} > !\\\\\\[{thumbnail.alt}\\\\\\]({thumbnail.src})\\\\\\](/photos/{thumbnail.id}) {/each} {#if $page.state.selected} history.back()}> {/if} Caveats permalink During server-side rendering, $page.state is always an empty object. The same is true for the first page the user lands on — if the user reloads the page, state will not be applied until they navigate. Shallow routing is a feature that requires JavaScript to work. Be mindful when using it and try to think of sensible fallback behavior in case JavaScript isn't available. PREVIOUS Snapshots NEXT Packaging GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Snapshots • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/snapshots",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte ADVANCED Snapshots Edit this page on GitHub ON THIS PAGE Ephemeral DOM state — like scroll positions on sidebars, the content of elements and so on — is discarded when you navigate from one page to another. For example, if the user fills out a form but clicks a link before submitting, then hits the browser's back button, the values they filled in will be lost. In cases where it's valuable to preserve that input, you can take a snapshot of DOM state, which can then be restored if the user navigates back. To do this, export a snapshot object with capture and restore methods from a +page.svelte or +layout.svelte: +page.svelte let comment = ''; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Snapshot} \\\\\\\\\\\\\\*/ export const snapshot = { capture: () => comment, restore: (value) => comment = value }; Comment Post comment When you navigate away from this page, the capture function is called immediately before the page updates, and the returned value is associated with the current entry in the browser's history stack. If you navigate back, the restore function is called with the stored value as soon as the page is updated. The data must be serializable as JSON so that it can be persisted to sessionStorage. This allows the state to be restored when the page is reloaded, or when the user navigates back from a different site. Avoid returning very large objects from capture — once captured, objects will be retained in memory for the duration of the session, and in extreme cases may be too large to persist to sessionStorage. PREVIOUS Server-only modules NEXT Shallow routing GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Server-only modules • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/server-only-modules",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte ADVANCED Server-only modules Edit this page on GitHub ON THIS PAGE Server-only modules Private environment variables Your modules How it works Further reading Like a good friend, SvelteKit keeps your secrets. When writing your backend and frontend in the same repository, it can be easy to accidentally import sensitive data into your front-end code (environment variables containing API keys, for example). SvelteKit provides a way to prevent this entirely: server-only modules. Private environment variables permalink The $env/static/private and $env/dynamic/private modules, which are covered in the modules section, can only be imported into modules that only run on the server, such as hooks.server.js or +page.server.js. Your modules permalink You can make your own modules server-only in two ways: adding .server to the filename, e.g. secrets.server.js placing them in $lib/server, e.g. $lib/server/secrets.js How it works permalink Any time you have public-facing code that imports server-only code (whether directly or indirectly)... $lib/server/secrets.js export const atlantisCoordinates = \\\\\\\\\\\\\\[/\\\\\\\\\\\\\\* redacted \\\\\\\\\\\\\\*/\\\\\\\\\\\\\\]; src/routes/utils.js export { atlantisCoordinates } from '$lib/server/secrets.js'; export const add = (a, b) => a + b; src/routes/+page.svelte import { add } from './utils.js'; ...SvelteKit will error: Cannot import $lib/server/secrets.js into public-facing code: - src/routes/+page.svelte - src/routes/utils.js - $lib/server/secrets.js Even though the public-facing code — src/routes/+page.svelte — only uses the add export and not the secret atlantisCoordinates export, the secret code could end up in JavaScript that the browser downloads, and so the import chain is considered unsafe. This feature also works with dynamic imports, even interpolated ones like await import(\\\\\\\\\\\\\\`./${foo}.js\\\\\\\\\\\\\\`), with one small caveat: during development, if there are two or more dynamic imports between the public-facing code and the server-only module, the illegal import will not be detected the first time the code is loaded. Unit testing frameworks like Vitest do not distinguish between server-only and public-facing code. For this reason, illegal import detection is disabled when running tests, as determined by process.env.TEST === 'true'. Further reading permalink Tutorial: Environment variables PREVIOUS Service workers NEXT Snapshots GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Errors • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/errors",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte ADVANCED Errors Edit this page on GitHub ON THIS PAGE Errors are an inevitable fact of software development. SvelteKit handles errors differently depending on where they occur, what kind of errors they are, and the nature of the incoming request. Error objects permalink SvelteKit distinguishes between expected and unexpected errors, both of which are represented as simple { message: string } objects by default. You can add additional properties, like a code or a tracking id, as shown in the examples below. (When using TypeScript this requires you to redefine the Error type as described in type safety). Expected errors permalink An expected error is one created with the error helper imported from @sveltejs/kit: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js import { error } from '@sveltejs/kit'; import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ params }) { const post = await db.getPost(params.slug); if (!post) { error(404, { message: 'Not found' }); } return { post }; } This throws an exception that SvelteKit catches, causing it to set the response status code to 404 and render an +error.svelte component, where $page.error is the object provided as the second argument to error(...). src/routes/+error.svelte import { page } from '$app/stores'; {$page.error.message} ===================== You can add extra properties to the error object if needed... error(404, { message: 'Not found', code: 'NOT\\\\\\\\\\\\\\_FOUND' }); ...otherwise, for convenience, you can pass a string as the second argument: error(404, { message: 'Not found' }); error(404, 'Not found'); In SvelteKit 1.x you had to throw the error yourself Unexpected errors permalink An unexpected error is any other exception that occurs while handling a request. Since these can contain sensitive information, unexpected error messages and stack traces are not exposed to users. By default, unexpected errors are printed to the console (or, in production, your server logs), while the error that is exposed to the user has a generic shape: { \"message\": \"Internal Error\" } Unexpected errors will go through the handleError hook, where you can add your own error handling — for example, sending errors to a reporting service, or returning a custom error object which becomes $page.error. Responses permalink If an error occurs inside handle or inside a +server.js request handler, SvelteKit will respond with either a fallback error page or a JSON representation of the error object, depending on the request's Accept headers. You can customise the fallback error page by adding a src/error.html file: %sveltekit.error.message% My custom error page ==================== Status: %sveltekit.status% Message: %sveltekit.error.message% SvelteKit will replace %sveltekit.status% and %sveltekit.error.message% with their corresponding values. If the error instead occurs inside a load function while rendering a page, SvelteKit will render the +error.svelte component nearest to where the error occurred. If the error occurs inside a load function in +layout(.server).js, the closest error boundary in the tree is an +error.svelte file above that layout (not next to it). The exception is when the error occurs inside the root +layout.js or +layout.server.js, since the root layout would ordinarily contain the +error.svelte component. In this case, SvelteKit uses the fallback error page. Type safety permalink If you're using TypeScript and need to customize the shape of errors, you can do so by declaring an App. Error interface in your app (by convention, in src/app.d.ts, though it can live anywhere that TypeScript can 'see'): src/app.d.ts declare global { namespace App { interface Error { code: string; id: string; } } } export {}; This interface always includes a message: string property. Further reading permalink Tutorial: Errors and redirects Tutorial: Hooks PREVIOUS Hooks NEXT Link options GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Advanced routing • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/advanced-routing",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte ADVANCED Advanced routing Edit this page on GitHub ON THIS PAGE Advanced routing Rest parameters Optional parameters Matching Sorting Encoding Advanced layouts Further reading Rest parameters permalink If the number of route segments is unknown, you can use rest syntax — for example you might implement GitHub's file viewer like so... /\\\\\\\\\\\\\\[org\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[repo\\\\\\\\\\\\\\]/tree/\\\\\\\\\\\\\\[branch\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[...file\\\\\\\\\\\\\\] ...in which case a request for /sveltejs/kit/tree/main/documentation/docs/04-advanced-routing.md would result in the following parameters being available to the page: { org: 'sveltejs', repo: 'kit', branch: 'main', file: 'documentation/docs/04-advanced-routing.md' } src/routes/a/\\\\\\\\\\\\\\[...rest\\\\\\\\\\\\\\]/z/+page.svelte will match /a/z (i.e. there's no parameter at all) as well as /a/b/z and /a/b/c/z and so on. Make sure you check that the value of the rest parameter is valid, for example using a matcher. 404 pages permalink Rest parameters also allow you to render custom 404s. Given these routes... src/routes/ ├ marx-brothers/ │ ├ chico/ │ ├ harpo/ │ ├ groucho/ │ └ +error.svelte └ +error.svelte ...the marx-brothers/+error.svelte file will not be rendered if you visit /marx-brothers/karl, because no route was matched. If you want to render the nested error page, you should create a route that matches any /marx-brothers/\\\\\\\\\\\\\\* request, and return a 404 from it: src/routes/ ├ marx-brothers/ | ├ \\\\\\\\\\\\\\[...path\\\\\\\\\\\\\\]/ │ ├ chico/ │ ├ harpo/ │ ├ groucho/ │ └ +error.svelte └ +error.svelte src/routes/marx-brothers/\\\\\\\\\\\\\\[...path\\\\\\\\\\\\\\]/+page.js import { error } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export function load(event) { error(404, 'Not Found'); } If you don't handle 404 cases, they will appear in handleError Optional parameters permalink A route like \\\\\\\\\\\\\\[lang\\\\\\\\\\\\\\]/home contains a parameter named lang which is required. Sometimes it's beneficial to make these parameters optional, so that in this example both home and en/home point to the same page. You can do that by wrapping the parameter in another bracket pair: \\\\\\\\\\\\\\[\\\\\\\\\\\\\\[lang\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]/home Note that an optional route parameter cannot follow a rest parameter (\\\\\\\\\\\\\\[...rest\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[\\\\\\\\\\\\\\[optional\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]), since parameters are matched 'greedily' and the optional parameter would always be unused. Matching permalink A route like src/routes/archive/\\\\\\\\\\\\\\[page\\\\\\\\\\\\\\] would match /archive/3, but it would also match /archive/potato. We don't want that. You can ensure that route parameters are well-formed by adding a matcher — which takes the parameter string (\"3\" or \"potato\") and returns true if it is valid — to your params directory... src/params/integer.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').ParamMatcher} \\\\\\\\\\\\\\*/ export function match(param) { return /^\\\\\\\\\\\\\\\\d+$/.test(param); } ...and augmenting your routes: src/routes/archive/\\\\\\\\\\\\\\[page\\\\\\\\\\\\\\] src/routes/archive/\\\\\\\\\\\\\\[page=integer\\\\\\\\\\\\\\] If the pathname doesn't match, SvelteKit will try to match other routes (using the sort order specified below), before eventually returning a 404. Each module in the params directory corresponds to a matcher, with the exception of \\\\\\\\\\\\\\*.test.js and \\\\\\\\\\\\\\*.spec.js files which may be used to unit test your matchers. Matchers run both on the server and in the browser. Sorting permalink It's possible for multiple routes to match a given path. For example each of these routes would match /foo-abc: src/routes/\\\\\\\\\\\\\\[...catchall\\\\\\\\\\\\\\]/+page.svelte src/routes/\\\\\\\\\\\\\\[\\\\\\\\\\\\\\[a=x\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]/+page.svelte src/routes/\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\]/+page.svelte src/routes/foo-\\\\\\\\\\\\\\[c\\\\\\\\\\\\\\]/+page.svelte src/routes/foo-abc/+page.svelte SvelteKit needs to know which route is being requested. To do so, it sorts them according to the following rules... More specific routes are higher priority (e.g. a route with no parameters is more specific than a route with one dynamic parameter, and so on) Parameters with matchers (\\\\\\\\\\\\\\[name=type\\\\\\\\\\\\\\]) are higher priority than those without (\\\\\\\\\\\\\\[name\\\\\\\\\\\\\\]) \\\\\\\\\\\\\\[\\\\\\\\\\\\\\[optional\\\\\\\\\\\\\\]\\\\\\\\\\\\\\] and \\\\\\\\\\\\\\[...rest\\\\\\\\\\\\\\] parameters are ignored unless they are the final part of the route, in which case they are treated with lowest priority. In other words x/\\\\\\\\\\\\\\[\\\\\\\\\\\\\\[y\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]/z is treated equivalently to x/z for the purposes of sorting Ties are resolved alphabetically ...resulting in this ordering, meaning that /foo-abc will invoke src/routes/foo-abc/+page.svelte, and /foo-def will invoke src/routes/foo-\\\\\\\\\\\\\\[c\\\\\\\\\\\\\\]/+page.svelte rather than less specific routes: src/routes/foo-abc/+page.svelte src/routes/foo-\\\\\\\\\\\\\\[c\\\\\\\\\\\\\\]/+page.svelte src/routes/\\\\\\\\\\\\\\[\\\\\\\\\\\\\\[a=x\\\\\\\\\\\\\\]\\\\\\\\\\\\\\]/+page.svelte src/routes/\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\]/+page.svelte src/routes/\\\\\\\\\\\\\\[...catchall\\\\\\\\\\\\\\]/+page.svelte Encoding permalink Some characters can't be used on the filesystem — / on Linux and Mac, \\\\\\\\\\\\\\\\ / : \\\\\\\\\\\\\\* ? \" < > | on Windows. The # and % characters have special meaning in URLs, and the \\\\\\\\\\\\\\[ \\\\\\\\\\\\\\] ( ) characters have special meaning to SvelteKit, so these also can't be used directly as part of your route. To use these characters in your routes, you can use hexadecimal escape sequences, which have the format \\\\\\\\\\\\\\[x+nn\\\\\\\\\\\\\\] where nn is a hexadecimal character code: \\\\\\\\\\\\\\\\ — \\\\\\\\\\\\\\[x+5c\\\\\\\\\\\\\\] / — \\\\\\\\\\\\\\[x+2f\\\\\\\\\\\\\\] : — \\\\\\\\\\\\\\[x+3a\\\\\\\\\\\\\\] \\\\\\\\\\\\\\* — \\\\\\\\\\\\\\[x+2a\\\\\\\\\\\\\\] ? — \\\\\\\\\\\\\\[x+3f\\\\\\\\\\\\\\] \" — \\\\\\\\\\\\\\[x+22\\\\\\\\\\\\\\] < — \\\\\\\\\\\\\\[x+3c\\\\\\\\\\\\\\] > — \\\\\\\\\\\\\\[x+3e\\\\\\\\\\\\\\] | — \\\\\\\\\\\\\\[x+7c\\\\\\\\\\\\\\] # — \\\\\\\\\\\\\\[x+23\\\\\\\\\\\\\\] % — \\\\\\\\\\\\\\[x+25\\\\\\\\\\\\\\] \\\\\\\\\\\\\\[ — \\\\\\\\\\\\\\[x+5b\\\\\\\\\\\\\\] \\\\\\\\\\\\\\] — \\\\\\\\\\\\\\[x+5d\\\\\\\\\\\\\\] ( — \\\\\\\\\\\\\\[x+28\\\\\\\\\\\\\\] ) — \\\\\\\\\\\\\\[x+29\\\\\\\\\\\\\\] For example, to create a /smileys/:-) route, you would create a src/routes/smileys/\\\\\\\\\\\\\\[x+3a\\\\\\\\\\\\\\]-\\\\\\\\\\\\\\[x+29\\\\\\\\\\\\\\]/+page.svelte file. You can determine the hexadecimal code for a character with JavaScript: ':'.charCodeAt(0).toString(16); // '3a', hence '\\\\\\\\\\\\\\[x+3a\\\\\\\\\\\\\\]' You can also use Unicode escape sequences. Generally you won't need to as you can use the unencoded character directly, but if — for some reason — you can't have a filename with an emoji in it, for example, then you can use the escaped characters. In other words, these are equivalent: src/routes/\\\\\\\\\\\\\\[u+d83e\\\\\\\\\\\\\\]\\\\\\\\\\\\\\[u+dd2a\\\\\\\\\\\\\\]/+page.svelte src/routes/🤪/+page.svelte The format for a Unicode escape sequence is \\\\\\\\\\\\\\[u+nnnn\\\\\\\\\\\\\\] where nnnn is a valid value between 0000 and 10ffff. (Unlike JavaScript string escaping, there's no need to use surrogate pairs to represent code points above ffff.) To learn more about Unicode encodings, consult Programming with Unicode. Since TypeScript struggles with directories with a leading . character, you may find it useful to encode these characters when creating e.g. .well-known routes: src/routes/\\\\\\\\\\\\\\[x+2e\\\\\\\\\\\\\\]well-known/... Advanced layouts permalink By default, the layout hierarchy mirrors the route hierarchy. In some cases, that might not be what you want. (group) permalink Perhaps you have some routes that are 'app' routes that should have one layout (e.g. /dashboard or /item), and others that are 'marketing' routes that should have a different layout (/about or /testimonials). We can group these routes with a directory whose name is wrapped in parentheses — unlike normal directories, (app) and (marketing) do not affect the URL pathname of the routes inside them: src/routes/ │ (app)/ │ ├ dashboard/ │ ├ item/ │ └ +layout.svelte │ (marketing)/ │ ├ about/ │ ├ testimonials/ │ └ +layout.svelte ├ admin/ └ +layout.svelte You can also put a +page directly inside a (group), for example if / should be an (app) or a (marketing) page. Breaking out of layouts permalink The root layout applies to every page of your app — if omitted, it defaults to . If you want some pages to have a different layout hierarchy than the rest, then you can put your entire app inside one or more groups except the routes that should not inherit the common layouts. In the example above, the /admin route does not inherit either the (app) or (marketing) layouts. +page@ permalink Pages can break out of the current layout hierarchy on a route-by-route basis. Suppose we have an /item/\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/embed route inside the (app) group from the previous example: src/routes/ ├ (app)/ │ ├ item/ │ │ ├ \\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/ │ │ │ ├ embed/ │ │ │ │ └ +page.svelte │ │ │ └ +layout.svelte │ │ └ +layout.svelte │ └ +layout.svelte └ +layout.svelte Ordinarily, this would inherit the root layout, the (app) layout, the item layout and the \\\\\\\\\\\\\\[id\\\\\\\\\\\\\\] layout. We can reset to one of those layouts by appending @ followed by the segment name — or, for the root layout, the empty string. In this example, we can choose from the following options: +page@\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\].svelte - inherits from src/routes/(app)/item/\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/+layout.svelte +page@item.svelte - inherits from src/routes/(app)/item/+layout.svelte +page@(app).svelte - inherits from src/routes/(app)/+layout.svelte +page@.svelte - inherits from src/routes/+layout.svelte src/routes/ ├ (app)/ │ ├ item/ │ │ ├ \\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/ │ │ │ ├ embed/ │ │ │ │ └ +page@(app).svelte │ │ │ └ +layout.svelte │ │ └ +layout.svelte │ └ +layout.svelte └ +layout.svelte +layout@ permalink Like pages, layouts can themselves break out of their parent layout hierarchy, using the same technique. For example, a +layout@.svelte component would reset the hierarchy for all its child routes. src/routes/ ├ (app)/ │ ├ item/ │ │ ├ \\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/ │ │ │ ├ embed/ │ │ │ │ └ +page.svelte // uses (app)/item/\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/+layout.svelte │ │ │ ├ +layout.svelte // inherits from (app)/item/+layout@.svelte │ │ │ └ +page.svelte // uses (app)/item/+layout@.svelte │ │ └ +layout@.svelte // inherits from root layout, skipping (app)/+layout.svelte │ └ +layout.svelte └ +layout.svelte When to use layout groups permalink Not all use cases are suited for layout grouping, nor should you feel compelled to use them. It might be that your use case would result in complex (group) nesting, or that you don't want to introduce a (group) for a single outlier. It's perfectly fine to use other means such as composition (reusable load functions or Svelte components) or if-statements to achieve what you want. The following example shows a layout that rewinds to the root layout and reuses components and functions that other layouts can also use: src/routes/nested/route/+layout@.svelte import ReusableLayout from '$lib/ReusableLayout.svelte'; export let data; src/routes/nested/route/+layout.js import { reusableLoad } from '$lib/reusable-load-function'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export function load(event) { // Add additional logic here, if needed return reusableLoad(event); } Further reading permalink Tutorial: Advanced Routing PREVIOUS Writing adapters NEXT Hooks GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Hooks • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/hooks",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte ADVANCED Hooks Edit this page on GitHub ON THIS PAGE Hooks Server hooks Shared hooks Further reading 'Hooks' are app-wide functions you declare that SvelteKit will call in response to specific events, giving you fine-grained control over the framework's behaviour. There are two hooks files, both optional: src/hooks.server.js — your app's server hooks src/hooks.client.js — your app's client hooks Code in these modules will run when the application starts up, making them useful for initializing database clients and so on. You can configure the location of these files with config.kit.files.hooks. Server hooks permalink The following hooks can be added to src/hooks.server.js: handle permalink This function runs every time the SvelteKit server receives a request — whether that happens while the app is running, or during prerendering — and determines the response. It receives an event object representing the request and a function called resolve, which renders the route and generates a Response. This allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example). src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { if (event.url.pathname.startsWith('/custom')) { return new Response('custom response'); } const response = await resolve(event); return response; } Requests for static assets — which includes pages that were already prerendered — are not handled by SvelteKit. If unimplemented, defaults to ({ event, resolve }) => resolve(event). To add custom data to the request, which is passed to handlers in +server.js and server load functions, populate the event.locals object, as shown below. src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { event.locals.user = await getUserInformation(event.cookies.get('sessionid')); const response = await resolve(event); response.headers.set('x-custom-header', 'potato'); return response; } You can define multiple handle functions and execute them with the sequence helper function. resolve also supports a second, optional parameter that gives you more control over how the response will be rendered. That parameter is an object that can have the following fields: transformPageChunk(opts: { html: string, done: boolean }): MaybePromise — applies custom transforms to HTML. If done is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML (they could include an element's opening tag but not its closing tag, for example) but they will always be split at sensible boundaries such as %sveltekit.head% or layout/page components. filterSerializedResponseHeaders(name: string, value: string): boolean — determines which headers should be included in serialized responses when a load function loads a resource with fetch. By default, none will be included. preload(input: { type: 'js' | 'css' | 'font' | 'asset', path: string }): boolean — determines what files should be added to the tag to preload it. The method is called with each file that was found at build time while constructing the code chunks — so if you for example have import './styles.css in your +page.svelte, preload will be called with the resolved path to that CSS file when visiting that page. Note that in dev mode preload is not called, since it depends on analysis that happens at build time. Preloading can improve performance by downloading assets sooner, but it can also hurt if too much is downloaded unnecessarily. By default, js and css files will be preloaded. asset files are not preloaded at all currently, but we may add this later after evaluating feedback. src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { const response = await resolve(event, { transformPageChunk: ({ html }) => html.replace('old', 'new'), filterSerializedResponseHeaders: (name) => name.startsWith('x-'), preload: ({ type, path }) => type === 'js' || path.includes('/important/') }); return response; } Note that resolve(...) will never throw an error, it will always return a Promise with the appropriate status code. If an error is thrown elsewhere during handle, it is treated as fatal, and SvelteKit will respond with a JSON representation of the error or a fallback error page — which can be customised via src/error.html — depending on the Accept header. You can read more about error handling here. handleFetch permalink This function allows you to modify (or replace) a fetch request that happens inside a load or action function that runs on the server (or during pre-rendering). For example, your load function might make a request to a public URL like https://api.yourapp.com when the user performs a client-side navigation to the respective page, but during SSR it might make sense to hit the API directly (bypassing whatever proxies and load balancers sit between it and the public internet). src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').HandleFetch} \\\\\\\\\\\\\\*/ export async function handleFetch({ request, fetch }) { if (request.url.startsWith('https://api.yourapp.com/')) { // clone the original request, but change the URL request = new Request( request.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'), request ); } return fetch(request); } Credentials For same-origin requests, SvelteKit's fetch implementation will forward cookie and authorization headers unless the credentials option is set to \"omit\". For cross-origin requests, cookie will be included if the request URL belongs to a subdomain of the app — for example if your app is on my-domain.com, and your API is on api.my-domain.com, cookies will be included in the request. If your app and your API are on sibling subdomains — www.my-domain.com and api.my-domain.com for example — then a cookie belonging to a common parent domain like my-domain.com will not be included, because SvelteKit has no way to know which domain the cookie belongs to. In these cases you will need to manually include the cookie using handleFetch: src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').HandleFetch} \\\\\\\\\\\\\\*/ export async function handleFetch({ event, request, fetch }) { if (request.url.startsWith('https://api.my-domain.com/')) { request.headers.set('cookie', event.request.headers.get('cookie')); } return fetch(request); } Shared hooks permalink The following can be added to src/hooks.server.js and src/hooks.client.js: handleError permalink If an unexpected error is thrown during loading or rendering, this function will be called with the error, event, status code and message. This allows for two things: you can log the error you can generate a custom representation of the error that is safe to show to users, omitting sensitive details like messages and stack traces. The returned value, which defaults to { message }, becomes the value of $page.error. For errors thrown from your code (or library code called by your code) the status will be 500 and the message will be \"Internal Error\". While error.message may contain sensitive information that should not be exposed to users, message is safe (albeit meaningless to the average user). To add more information to the $page.error object in a type-safe way, you can customize the expected shape by declaring an App. Error interface (which must include message: string, to guarantee sensible fallback behavior). This allows you to — for example — append a tracking ID for users to quote in correspondence with your technical support staff: src/app.d.ts declare global { namespace App { interface Error { message: string; errorId: string; } } } export {}; src/hooks.server.js import \\\\\\\\\\\\\\* as Sentry from '@sentry/sveltekit'; Sentry.init({/\\\\\\\\\\\\\\*...\\\\\\\\\\\\\\*/}) /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').HandleServerError} \\\\\\\\\\\\\\*/ export async function handleError({ error, event, status, message }) { const errorId = crypto.randomUUID(); // example integration with https://sentry.io/ Sentry.captureException(error, { extra: { event, errorId, status } }); return { message: 'Whoops!', errorId }; } src/hooks.client.js import \\\\\\\\\\\\\\* as Sentry from '@sentry/sveltekit'; Sentry.init({/\\\\\\\\\\\\\\*...\\\\\\\\\\\\\\*/}) /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').HandleClientError} \\\\\\\\\\\\\\*/ export async function handleError({ error, event, status, message }) { const errorId = crypto.randomUUID(); // example integration with https://sentry.io/ Sentry.captureException(error, { extra: { event, errorId, status } }); return { message: 'Whoops!', errorId }; } In src/hooks.client.js, the type of handleError is HandleClientError instead of HandleServerError , and event is a NavigationEvent rather than a RequestEvent . This function is not called for expected errors (those thrown with the error function imported from @sveltejs/kit). During development, if an error occurs because of a syntax error in your Svelte code, the passed in error has a frame property appended highlighting the location of the error. Make sure that handleError never throws an error Further reading permalink Tutorial: Hooks PREVIOUS Advanced routing NEXT Errors GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Writing adapters • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/writing-adapters",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Writing adapters Edit this page on GitHub ON THIS PAGE Writing adapters If an adapter for your preferred environment doesn't yet exist, you can build your own. We recommend looking at the source for an adapter to a platform similar to yours and copying it as a starting point. Adapters packages must implement the following API, which creates an Adapter : /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {AdapterSpecificOptions} options \\\\\\\\\\\\\\*/ export default function (options) { /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Adapter} \\\\\\\\\\\\\\*/ const adapter = { name: 'adapter-package-name', async adapt(builder) { // adapter implementation } }; return adapter; } Within the adapt method, there are a number of things that an adapter should do: Clear out the build directory Write SvelteKit output with builder.writeClient, builder.writeServer, and builder.writePrerendered Output code that: Imports Server from ${builder.getServerDirectory()}/index.js Instantiates the app with a manifest generated with builder.generateManifest({ relativePath }) Listens for requests from the platform, converts them to a standard Request if necessary, calls the server.respond(request, { getClientAddress }) function to generate a Response and responds with it expose any platform-specific information to SvelteKit via the platform option passed to server.respond Globally shims fetch to work on the target platform, if necessary. SvelteKit provides a @sveltejs/kit/node/polyfills helper for platforms that can use undici Bundle the output to avoid needing to install dependencies on the target platform, if necessary Put the user's static files and the generated JS/CSS in the correct location for the target platform Where possible, we recommend putting the adapter output under the build/ directory with any intermediate output placed under .svelte-kit/\\\\\\\\\\\\\\[adapter-name\\\\\\\\\\\\\\]. PREVIOUS Vercel NEXT Advanced routing GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Vercel • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-vercel",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BUILD AND DEPLOY Vercel Edit this page on GitHub ON THIS PAGE To deploy to Vercel, use adapter-vercel. This adapter will be installed by default when you use adapter-auto, but adding it to your project allows you to specify Vercel-specific options. Usage permalink Install with npm i -D @sveltejs/adapter-vercel, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-vercel'; export default { kit: { adapter: adapter({ // see below for options that can be set here }) } }; Deployment configuration permalink To control how your routes are deployed to Vercel as functions, you can specify deployment configuration, either through the option shown above or with export const config inside +server.js, +page(.server).js and +layout(.server).js files. For example you could deploy some parts of your app as Edge Functions... about/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/adapter-vercel').Config} \\\\\\\\\\\\\\*/ export const config = { runtime: 'edge' }; ...and others as Serverless Functions (note that by specifying config inside a layout, it applies to all child pages): admin/+layout.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/adapter-vercel').Config} \\\\\\\\\\\\\\*/ export const config = { runtime: 'nodejs18.x' }; The following options apply to all functions: runtime: 'edge', 'nodejs18.x' or 'nodejs20.x'. By default, the adapter will select the 'nodejs.x' corresponding to the Node version your project is configured to use on the Vercel dashboard regions: an array of edge network regions (defaulting to \\\\\\\\\\\\\\[\"iad1\"\\\\\\\\\\\\\\] for serverless functions) or 'all' if runtime is edge (its default). Note that multiple regions for serverless functions are only supported on Enterprise plans split: if true, causes a route to be deployed as an individual function. If split is set to true at the adapter level, all routes will be deployed as individual functions Additionally, the following option applies to edge functions: external: an array of dependencies that esbuild should treat as external when bundling functions. This should only be used to exclude optional dependencies that will not run outside Node And the following option apply to serverless functions: memory: the amount of memory available to the function. Defaults to 1024 Mb, and can be decreased to 128 Mb or increased in 64Mb increments up to 3008 Mb on Pro or Enterprise accounts maxDuration: maximum execution duration of the function. Defaults to 10 seconds for Hobby accounts, 15 for Pro and 900 for Enterprise isr: configuration Incremental Static Regeneration, described below If your functions need to access data in a specific region, it's recommended that they be deployed in the same region (or close to it) for optimal performance. Image Optimization permalink You may set the images config to control how Vercel builds your images. See the image configuration reference for full details. As an example, you may set: { sizes: \\\\\\\\\\\\\\[640, 828, 1200, 1920, 3840\\\\\\\\\\\\\\], formats: \\\\\\\\\\\\\\['image/avif', 'image/webp'\\\\\\\\\\\\\\], minimumCacheTTL: 300 } Incremental Static Regeneration permalink Vercel supports Incremental Static Regeneration (ISR), which provides the performance and cost advantages of prerendered content with the flexibility of dynamically rendered content. To add ISR to a route, include the isr property in your config object: blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js import { BYPASS\\\\\\\\\\\\\\_TOKEN } from '$env/static/private'; export const config = { isr: { // Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function. // Setting the value to \\\\\\\\\\\\\\`false\\\\\\\\\\\\\\` means it will never expire. expiration: 60, // Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset // with a \\\\\\\\\\\\\\_\\\\\\\\\\\\\\_prerender\\\\\\\\\\\\\\_bypass= cookie. // // Making a \\\\\\\\\\\\\\`GET\\\\\\\\\\\\\\` or \\\\\\\\\\\\\\`HEAD\\\\\\\\\\\\\\` request with \\\\\\\\\\\\\\`x-prerender-revalidate: \\\\\\\\\\\\\\` will force the asset to be re-validated. bypassToken: BYPASS\\\\\\\\\\\\\\_TOKEN, // List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored, // ensuring that they do not result in content being regenerated unnecessarily allowQuery: \\\\\\\\\\\\\\['search'\\\\\\\\\\\\\\] } }; The expiration property is required; all others are optional. Environment variables permalink Vercel makes a set of deployment-specific environment variables available. Like other environment variables, these are accessible from $env/static/private and $env/dynamic/private (sometimes — more on that later), and inaccessible from their public counterparts. To access one of these variables from the client: +layout.server.js import { VERCEL\\\\\\\\\\\\\\_COMMIT\\\\\\\\\\\\\\_REF } from '$env/static/private'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export function load() { return { deploymentGitBranch: VERCEL\\\\\\\\\\\\\\_COMMIT\\\\\\\\\\\\\\_REF }; } +layout.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerData} \\\\\\\\\\\\\\*/ export let data; This staging environment was deployed from {data.deploymentGitBranch}. Since all of these variables are unchanged between build time and run time when building on Vercel, we recommend using $env/static/private — which will statically replace the variables, enabling optimisations like dead code elimination — rather than $env/dynamic/private. Notes permalink Vercel functions permalink If you have Vercel functions contained in the api directory at the project's root, any requests for /api/\\\\\\\\\\\\\\* will not be handled by SvelteKit. You should implement these as API routes in your SvelteKit app instead, unless you need to use a non-JavaScript language in which case you will need to ensure that you don't have any /api/\\\\\\\\\\\\\\* routes in your SvelteKit app. Node version permalink Projects created before a certain date may default to using an older Node version than what SvelteKit currently requires. You can change the Node version in your project settings. Troubleshooting permalink Accessing the file system permalink You can't access the file system through methods like fs.readFileSync in Serverless/Edge environments. If you need to access files that way, do that during building the app through prerendering. If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. PREVIOUS Netlify NEXT Writing adapters GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Netlify • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-netlify",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Netlify Edit this page on GitHub ON THIS PAGE Netlify Usage Netlify Edge Functions Netlify alternatives to SvelteKit functionality Troubleshooting To deploy to Netlify, use adapter-netlify. This adapter will be installed by default when you use adapter-auto, but adding it to your project allows you to specify Netlify-specific options. Usage permalink Install with npm i -D @sveltejs/adapter-netlify, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-netlify'; export default { kit: { // default options are shown adapter: adapter({ // if true, will create a Netlify Edge Function rather // than using standard Node-based functions edge: false, // if true, will split your app into multiple functions // instead of creating a single one for the entire app. // if \\\\\\\\\\\\\\`edge\\\\\\\\\\\\\\` is true, this option cannot be used split: false }) } }; Then, make sure you have a netlify.toml file in the project root. This will determine where to write static assets based on the build.publish settings, as per this sample configuration: \\\\\\\\\\\\\\[build\\\\\\\\\\\\\\] command = \"npm run build\" publish = \"build\" If the netlify.toml file or the build.publish value is missing, a default value of \"build\" will be used. Note that if you have set the publish directory in the Netlify UI to something else then you will need to set it in netlify.toml too, or use the default value of \"build\". Node version permalink New projects will use the current Node LTS version by default. However, if you're upgrading a project you created a while ago it may be stuck on an older version. See the Netlify docs for details on manually specifying a current Node version. Netlify Edge Functions permalink SvelteKit supports Netlify Edge Functions. If you pass the option edge: true to the adapter function, server-side rendering will happen in a Deno-based edge function that's deployed close to the site visitor. If set to false (the default), the site will deploy to Node-based Netlify Functions. svelte.config.js import adapter from '@sveltejs/adapter-netlify'; export default { kit: { adapter: adapter({ // will create a Netlify Edge Function using Deno-based // rather than using standard Node-based functions edge: true }) } }; Netlify alternatives to SvelteKit functionality permalink You may build your app using functionality provided directly by SvelteKit without relying on any Netlify functionality. Using the SvelteKit versions of these features will allow them to be used in dev mode, tested with integration tests, and to work with other adapters should you ever decide to switch away from Netlify. However, in some scenarios you may find it beneficial to use the Netlify versions of these features. One example would be if you're migrating an app that's already hosted on Netlify to SvelteKit. Redirect rules permalink During compilation, redirect rules are automatically appended to your \\\\\\\\\\\\\\_redirects file. (If it doesn't exist yet, it will be created.) That means: \\\\\\\\\\\\\\[\\\\\\\\\\\\\\[redirects\\\\\\\\\\\\\\]\\\\\\\\\\\\\\] in netlify.toml will never match as \\\\\\\\\\\\\\_redirects has a higher priority. So always put your rules in the \\\\\\\\\\\\\\_redirects file. \\\\\\\\\\\\\\_redirects shouldn't have any custom \"catch all\" rules such as /\\\\\\\\\\\\\\* /foobar/:splat. Otherwise the automatically appended rule will never be applied as Netlify is only processing the first matching rule. Netlify Forms permalink Create your Netlify HTML form as described here, e.g. as /routes/contact/+page.svelte. (Don't forget to add the hidden form-name input element!) Netlify's build bot parses your HTML files at deploy time, which means your form must be prerendered as HTML. You can either add export const prerender = true to your contact.svelte to prerender just that page or set the kit.prerender.force: true option to prerender all pages. If your Netlify form has a custom success message like then ensure the corresponding /routes/success/+page.svelte exists and is prerendered. Netlify Functions permalink With this adapter, SvelteKit endpoints are hosted as Netlify Functions. Netlify function handlers have additional context, including Netlify Identity information. You can access this context via the event.platform.context field inside your hooks and +page.server or +layout.server endpoints. These are serverless functions when the edge property is false in the adapter config or edge functions when it is true. +page.server.js export const load = async (event) => { const context = event.platform.context; console.log(context); // shows up in your functions log in the Netlify app }; Additionally, you can add your own Netlify functions by creating a directory for them and adding the configuration to your netlify.toml file. For example: \\\\\\\\\\\\\\[build\\\\\\\\\\\\\\] command = \"npm run build\" publish = \"build\" \\\\\\\\\\\\\\[functions\\\\\\\\\\\\\\] directory = \"functions\" Troubleshooting permalink Accessing the file system permalink You can't access the file system through methods like fs.readFileSync in Serverless/Edge environments. If you need to access files that way, do that during building the app through prerendering. If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. PREVIOUS Cloudflare Workers NEXT Vercel GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Cloudflare Workers • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-cloudflare-workers",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BUILD AND DEPLOY Cloudflare Workers Edit this page on GitHub ON THIS PAGE To deploy to Cloudflare Workers, use adapter-cloudflare-workers. Unless you have a specific reason to use adapter-cloudflare-workers, it's recommended that you use adapter-cloudflare instead. Both adapters have equivalent functionality, but Cloudflare Pages offers features like GitHub integration with automatic builds and deploys, preview deployments, instant rollback and so on. Usage permalink Install with npm i -D @sveltejs/adapter-cloudflare-workers, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-cloudflare-workers'; export default { kit: { adapter: adapter() } }; Basic Configuration permalink This adapter expects to find a wrangler.toml file in the project root. It should look something like this: wrangler.toml name = \"\" account\\\\\\\\\\\\\\_id = \"\" main = \"./.cloudflare/worker.js\" site.bucket = \"./.cloudflare/public\" build.command = \"npm run build\" compatibility\\\\\\\\\\\\\\_date = \"2021-11-12\" workers\\\\\\\\\\\\\\_dev = true can be anything. can be found by logging into your Cloudflare dashboard and grabbing it from the end of the URL: https://dash.cloudflare.com/ You should add the .cloudflare directory (or whichever directories you specified for main and site.bucket) to your .gitignore. You will need to install wrangler and log in, if you haven't already: npm i -g wrangler wrangler login Then, you can build your app and deploy it: wrangler deploy Custom config permalink If you would like to use a config file other than wrangler.toml, you can do like so: svelte.config.js import adapter from '@sveltejs/adapter-cloudflare-workers'; export default { kit: { adapter: adapter({ config: '.toml' }) } }; Bindings permalink The env object contains your project's bindings, which consist of KV/DO namespaces, etc. It is passed to SvelteKit via the platform property, along with context and caches, meaning that you can access it in hooks and endpoints: export async function POST({ request, platform }) { const x = platform.env.YOUR\\\\\\\\\\\\\\_DURABLE\\\\\\\\\\\\\\_OBJECT\\\\\\\\\\\\\\_NAMESPACE.idFromName('x'); } SvelteKit's built-in $env module should be preferred for environment variables. To make these types available to your app, reference them in your src/app.d.ts: src/app.d.ts declare global { namespace App { interface Platform { env?: { YOUR\\\\\\\\\\\\\\_KV\\\\\\\\\\\\\\_NAMESPACE: KVNamespace; YOUR\\\\\\\\\\\\\\_DURABLE\\\\\\\\\\\\\\_OBJECT\\\\\\\\\\\\\\_NAMESPACE: DurableObjectNamespace; }; } } } export {}; Testing Locally permalink platform.env is only available in the final build and not in dev mode. For testing the build, you can use wrangler. Once you have built your site, run wrangler dev. Ensure you have your bindings in your wrangler.toml. Wrangler version 3 is recommended. Troubleshooting permalink Worker size limits permalink When deploying to workers, the server generated by SvelteKit is bundled into a single file. Wrangler will fail to publish your worker if it exceeds the size limits after minification. You're unlikely to hit this limit usually, but some large libraries can cause this to happen. In that case, you can try to reduce the size of your worker by only importing such libraries on the client side. See the FAQ for more information. Accessing the file system permalink You can't access the file system through methods like fs.readFileSync in Serverless/Edge environments. If you need to access files that way, do that during building the app through prerendering. If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. PREVIOUS Cloudflare Pages NEXT Netlify GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Cloudflare Pages • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-cloudflare",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BUILD AND DEPLOY Cloudflare Pages Edit this page on GitHub ON THIS PAGE To deploy to Cloudflare Pages, use adapter-cloudflare. This adapter will be installed by default when you use adapter-auto. If you plan on staying with Cloudflare Pages you can switch from adapter-auto to using this adapter directly so that type declarations will be automatically applied and you can set Cloudflare-specific options. Comparisons permalink adapter-cloudflare – supports all SvelteKit features; builds for Cloudflare Pages adapter-cloudflare-workers – supports all SvelteKit features; builds for Cloudflare Workers adapter-static – only produces client-side static assets; compatible with Cloudflare Pages Usage permalink Install with npm i -D @sveltejs/adapter-cloudflare, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-cloudflare'; export default { kit: { adapter: adapter({ // See below for an explanation of these options routes: { include: \\\\\\\\\\\\\\['/\\\\\\\\\\\\\\*'\\\\\\\\\\\\\\], exclude: \\\\\\\\\\\\\\[''\\\\\\\\\\\\\\] } }) } }; Options permalink The routes option allows you to customise the \\\\\\\\\\\\\\_routes.json file generated by adapter-cloudflare. include defines routes that will invoke a function, and defaults to \\\\\\\\\\\\\\['/\\\\\\\\\\\\\\*'\\\\\\\\\\\\\\] exclude defines routes that will not invoke a function — this is a faster and cheaper way to serve your app's static assets. This array can include the following special values: contains your app's build artifacts (the files generated by Vite) contains the contents of your static directory contains a list of prerendered pages (the default) contains all of the above You can have up to 100 include and exclude rules combined. Generally you can omit the routes options, but if (for example) your paths exceed that limit, you may find it helpful to manually create an exclude list that includes '/articles/\\\\\\\\\\\\\\*' instead of the auto-generated \\\\\\\\\\\\\\['/articles/foo', '/articles/bar', '/articles/baz', ...\\\\\\\\\\\\\\]. Deployment permalink Please follow the Get Started Guide for Cloudflare Pages to begin. When configuring your project settings, you must use the following settings: Framework preset – SvelteKit Build command – npm run build or vite build Build output directory – .svelte-kit/cloudflare Bindings permalink The env object contains your project's bindings, which consist of KV/DO namespaces, etc. It is passed to SvelteKit via the platform property, along with context and caches, meaning that you can access it in hooks and endpoints: export async function POST({ request, platform }) { const x = platform.env.YOUR\\\\\\\\\\\\\\_DURABLE\\\\\\\\\\\\\\_OBJECT\\\\\\\\\\\\\\_NAMESPACE.idFromName('x'); } SvelteKit's built-in $env module should be preferred for environment variables. To make these types available to your app, reference them in your src/app.d.ts: src/app.d.ts declare global { namespace App { interface Platform { env?: { YOUR\\\\\\\\\\\\\\_KV\\\\\\\\\\\\\\_NAMESPACE: KVNamespace; YOUR\\\\\\\\\\\\\\_DURABLE\\\\\\\\\\\\\\_OBJECT\\\\\\\\\\\\\\_NAMESPACE: DurableObjectNamespace; }; } } } export {}; Testing Locally permalink platform.env is only available in the final build and not in dev mode. For testing the build, you can use wrangler version 3. Once you have built your site, run wrangler pages dev .svelte-kit/cloudflare. Ensure you have your bindings in your wrangler.toml. Notes permalink Functions contained in the /functions directory at the project's root will not be included in the deployment, which is compiled to a single \\\\\\\\\\\\\\_worker.js file. Functions should be implemented as server endpoints in your SvelteKit app. The \\\\\\\\\\\\\\_headers and \\\\\\\\\\\\\\_redirects files specific to Cloudflare Pages can be used for static asset responses (like images) by putting them into the /static folder. However, they will have no effect on responses dynamically rendered by SvelteKit, which should return custom headers or redirect responses from server endpoints or with the handle hook. Troubleshooting permalink Further reading permalink You may wish to refer to Cloudflare's documentation for deploying a SvelteKit site. Accessing the file system permalink You can't access the file system through methods like fs.readFileSync in Serverless/Edge environments. If you need to access files that way, do that during building the app through prerendering. If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. PREVIOUS Single-page apps NEXT Cloudflare Workers GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Single-page apps • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/single-page-apps",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Single-page apps Edit this page on GitHub ON THIS PAGE Single-page apps Usage Apache Prerendering individual pages You can turn any SvelteKit app, using any adapter, into a fully client-rendered single-page app (SPA) by disabling SSR at the root layout: src/routes/+layout.js export const ssr = false; In most situations this is not recommended: it harms SEO, tends to slow down perceived performance, and makes your app inaccessible to users if JavaScript fails or is disabled (which happens more often than you probably think). If you don't have any server-side logic (i.e. +page.server.js, +layout.server.js or +server.js files) you can use adapter-static to create your SPA by adding a fallback page. Usage permalink Install with npm i -D @sveltejs/adapter-static, then add the adapter to your svelte.config.js with the following options: svelte.config.js import adapter from '@sveltejs/adapter-static'; export default { kit: { adapter: adapter({ fallback: '200.html' // may differ from host to host }) } }; The fallback page is an HTML page created by SvelteKit from your page template (e.g. app.html) that loads your app and navigates to the correct route. For example Surge, a static web host, lets you add a 200.html file that will handle any requests that don't correspond to static assets or prerendered pages. On some hosts it may be index.html or something else entirely — consult your platform's documentation. Note that the fallback page will always contain absolute asset paths (i.e. beginning with / rather than .) regardless of the value of paths.relative, since it is used to respond to requests for arbitrary paths. Apache permalink To run an SPA on Apache, you should add a static/.htaccess file to route requests to the fallback page: RewriteEngine On RewriteBase / RewriteRule ^200\\\\\\\\\\\\\\\\.html$ - \\\\\\\\\\\\\\[L\\\\\\\\\\\\\\] RewriteCond %{REQUEST\\\\\\\\\\\\\\_FILENAME} !-f RewriteCond %{REQUEST\\\\\\\\\\\\\\_FILENAME} !-d RewriteRule . /200.html \\\\\\\\\\\\\\[L\\\\\\\\\\\\\\] Prerendering individual pages permalink If you want certain pages to be prerendered, you can re-enable ssr alongside prerender for just those parts of your app: src/routes/my-prerendered-page/+page.js export const prerender = true; export const ssr = true; PREVIOUS Static site generation NEXT Cloudflare Pages GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Static site generation • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-static",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Static site generation Edit this page on GitHub ON THIS PAGE Static site generation Usage Zero-config support Options GitHub Pages To use SvelteKit as a static site generator (SSG), use adapter-static. This will prerender your entire site as a collection of static files. If you'd like to prerender only some pages and dynamically server-render others, you will need to use a different adapter together with the prerender option. Usage permalink Install with npm i -D @sveltejs/adapter-static, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-static'; export default { kit: { adapter: adapter({ // default options are shown. On some platforms // these options are set automatically — see below pages: 'build', assets: 'build', fallback: undefined, precompress: false, strict: true }) } }; ...and add the prerender option to your root layout: src/routes/+layout.js // This can be false if you're using a fallback (i.e. SPA mode) export const prerender = true; You must ensure SvelteKit's trailingSlash option is set appropriately for your environment. If your host does not render /a.html upon receiving a request for /a then you will need to set trailingSlash: 'always' in your root layout to create /a/index.html instead. Zero-config support permalink Some platforms have zero-config support (more to come in future): Vercel On these platforms, you should omit the adapter options so that adapter-static can provide the optimal configuration: svelte.config.js export default { kit: { adapter: adapter({...}) adapter: adapter() } }; Options permalink pages permalink The directory to write prerendered pages to. It defaults to build. assets permalink The directory to write static assets (the contents of static, plus client-side JS and CSS generated by SvelteKit) to. Ordinarily this should be the same as pages, and it will default to whatever the value of pages is, but in rare circumstances you might need to output pages and assets to separate locations. fallback permalink Specify a fallback page for SPA mode, e.g. index.html or 200.html or 404.html. precompress permalink If true, precompresses files with brotli and gzip. This will generate .br and .gz files. strict permalink By default, adapter-static checks that either all pages and endpoints (if any) of your app were prerendered, or you have the fallback option set. This check exists to prevent you from accidentally publishing an app where some parts of it are not accessible, because they are not contained in the final output. If you know this is ok (for example when a certain page only exists conditionally), you can set strict to false to turn off this check. GitHub Pages permalink When building for GitHub Pages, if your repo name is not equivalent to your-username.github.io, make sure to update config.kit.paths.base to match your repo name. This is because the site will be served from https://your-username.github.io/your-repo-name rather than from the root. You'll also want to generate a fallback 404.html page to replace the default 404 page shown by GitHub Pages. A config for GitHub Pages might look like the following: svelte.config.js import adapter from '@sveltejs/adapter-static'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { adapter: adapter({ fallback: '404.html' }), paths: { base: process.argv.includes('dev') ? '' : process.env.BASE\\\\\\\\\\\\\\_PATH } } }; export default config; You can use GitHub actions to automatically deploy your site to GitHub Pages when you make a change. Here's an example workflow: .github/workflows/deploy.yml name: Deploy to GitHub Pages on: push: branches: 'main' jobs: build\\\\\\\\\\\\\\_site: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 # If you're using pnpm, add this step then change the commands and cache key below to use \\\\\\\\\\\\\\`pnpm\\\\\\\\\\\\\\` # - name: Install pnpm # uses: pnpm/action-setup@v2 # with: # version: 8 - name: Install Node.js uses: actions/setup-node@v3 with: node-version: 18 cache: npm - name: Install dependencies run: npm install - name: build env: BASE\\\\\\\\\\\\\\_PATH: '/${{ github.event.repository.name }}' run: | npm run build - name: Upload Artifacts uses: actions/upload-pages-artifact@v2 with: # this should match the \\\\\\\\\\\\\\`pages\\\\\\\\\\\\\\` option in your adapter-static options path: 'build/' deploy: needs: build\\\\\\\\\\\\\\_site runs-on: ubuntu-latest permissions: pages: write id-token: write environment: name: github-pages url: ${{ steps.deployment.outputs.page\\\\\\\\\\\\\\_url }} steps: - name: Deploy id: deployment uses: actions/deploy-pages@v2 PREVIOUS Node servers NEXT Single-page apps GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Node servers • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-node",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BUILD AND DEPLOY Node servers Edit this page on GitHub ON THIS PAGE To generate a standalone Node server, use adapter-node. Usage permalink Install with npm i -D @sveltejs/adapter-node, then add the adapter to your svelte.config.js: svelte.config.js import adapter from '@sveltejs/adapter-node'; export default { kit: { adapter: adapter() } }; Deploying permalink First, build your app with npm run build. This will create the production server in the output directory specified in the adapter options, defaulting to build. You will need the output directory, the project's package.json, and the production dependencies in node\\\\\\\\\\\\\\_modules to run the application. Production dependencies can be generated by copying the package.json and package-lock.json and then running npm ci --omit dev (you can skip this step if your app doesn't have any dependencies). You can then start your app with this command: node build Development dependencies will be bundled into your app using Rollup. To control whether a given package is bundled or externalised, place it in devDependencies or dependencies respectively in your package.json. Environment variables permalink In dev and preview, SvelteKit will read environment variables from your .env file (or .env.local, or .env.\\\\\\\\\\\\\\[mode\\\\\\\\\\\\\\], as determined by Vite.) In production, .env files are not automatically loaded. To do so, install dotenv in your project... npm install dotenv ...and invoke it before running the built app: node build node -r dotenv/config build PORT, HOST and SOCKET\\\\\\\\\\\\\\_PATH permalink By default, the server will accept connections on 0.0.0.0 using port 3000. These can be customised with the PORT and HOST environment variables: HOST=127.0.0.1 PORT=4000 node build Alternatively, the server can be configured to accept connections on a specified socket path. When this is done using the SOCKET\\\\\\\\\\\\\\_PATH environment variable, the HOST and PORT environment variables will be disregarded. SOCKET\\\\\\\\\\\\\\_PATH=/tmp/socket node build ORIGIN, PROTOCOL\\\\\\\\\\\\\\_HEADER and HOST\\\\\\\\\\\\\\_HEADER permalink HTTP doesn't give SvelteKit a reliable way to know the URL that is currently being requested. The simplest way to tell SvelteKit where the app is being served is to set the ORIGIN environment variable: ORIGIN=https://my.site node build # or e.g. for local previewing and testing ORIGIN=http://localhost:3000 node build With this, a request for the /stuff pathname will correctly resolve to https://my.site/stuff. Alternatively, you can specify headers that tell SvelteKit about the request protocol and host, from which it can construct the origin URL: PROTOCOL\\\\\\\\\\\\\\_HEADER=x-forwarded-proto HOST\\\\\\\\\\\\\\_HEADER=x-forwarded-host node build x-forwarded-proto and x-forwarded-host are de facto standard headers that forward the original protocol and host if you're using a reverse proxy (think load balancers and CDNs). You should only set these variables if your server is behind a trusted reverse proxy; otherwise, it'd be possible for clients to spoof these headers. If adapter-node can't correctly determine the URL of your deployment, you may experience this error when using form actions: Cross-site POST form submissions are forbidden ADDRESS\\\\\\\\\\\\\\_HEADER and XFF\\\\\\\\\\\\\\_DEPTH permalink The RequestEvent object passed to hooks and endpoints includes an event.getClientAddress() function that returns the client's IP address. By default this is the connecting remoteAddress. If your server is behind one or more proxies (such as a load balancer), this value will contain the innermost proxy's IP address rather than the client's, so we need to specify an ADDRESS\\\\\\\\\\\\\\_HEADER to read the address from: ADDRESS\\\\\\\\\\\\\\_HEADER=True-Client-IP node build Headers can easily be spoofed. As with PROTOCOL\\\\\\\\\\\\\\_HEADER and HOST\\\\\\\\\\\\\\_HEADER, you should know what you're doing before setting these. If the ADDRESS\\\\\\\\\\\\\\_HEADER is X-Forwarded-For, the header value will contain a comma-separated list of IP addresses. The XFF\\\\\\\\\\\\\\_DEPTH environment variable should specify how many trusted proxies sit in front of your server. E.g. if there are three trusted proxies, proxy 3 will forward the addresses of the original connection and the first two proxies: , , Some guides will tell you to read the left-most address, but this leaves you vulnerable to spoofing: , , , We instead read from the right, accounting for the number of trusted proxies. In this case, we would use XFF\\\\\\\\\\\\\\_DEPTH=3. If you need to read the left-most address instead (and don't care about spoofing) — for example, to offer a geolocation service, where it's more important for the IP address to be real than trusted, you can do so by inspecting the x-forwarded-for header within your app. BODY\\\\\\\\\\\\\\_SIZE\\\\\\\\\\\\\\_LIMIT permalink The maximum request body size to accept in bytes including while streaming. Defaults to 512kb. You can disable this option with a value of 0 and implement a custom check in handle if you need something more advanced. Options permalink The adapter can be configured with various options: svelte.config.js import adapter from '@sveltejs/adapter-node'; export default { kit: { adapter: adapter({ // default options are shown out: 'build', precompress: false, envPrefix: '' }) } }; out permalink The directory to build the server to. It defaults to build — i.e. node build would start the server locally after it has been created. precompress permalink Enables precompressing using gzip and brotli for assets and prerendered pages. It defaults to false. envPrefix permalink If you need to change the name of the environment variables used to configure the deployment (for example, to deconflict with environment variables you don't control), you can specify a prefix: envPrefix: 'MY\\\\\\\\\\\\\\_CUSTOM\\\\\\\\\\\\\\_'; MY\\\\\\\\\\\\\\_CUSTOM\\\\\\\\\\\\\\_HOST=127.0.0.1 \\\\\\\\\\\\\\\\ MY\\\\\\\\\\\\\\_CUSTOM\\\\\\\\\\\\\\_PORT=4000 \\\\\\\\\\\\\\\\ MY\\\\\\\\\\\\\\_CUSTOM\\\\\\\\\\\\\\_ORIGIN=https://my.site \\\\\\\\\\\\\\\\ node build Custom server permalink The adapter creates two files in your build directory — index.js and handler.js. Running index.js — e.g. node build, if you use the default build directory — will start a server on the configured port. Alternatively, you can import the handler.js file, which exports a handler suitable for use with Express, Connect or Polka (or even just the built-in http.createServer) and set up your own server: my-server.js import { handler } from './build/handler.js'; import express from 'express'; const app = express(); // add a route that lives separately from the SvelteKit app app.get('/healthcheck', (req, res) => { res.end('ok'); }); // let SvelteKit handle everything else, including serving prerendered pages and static assets app.use(handler); app.listen(3000, () => { console.log('listening on port 3000'); }); Troubleshooting permalink Is there a hook for cleaning up before the server exits? permalink There's nothing built-in to SvelteKit for this, because such a cleanup hook depends highly on the execution environment you're on. For Node, you can use its built-in process.on(..) to implement a callback that runs before the server exits: function shutdownGracefully() { // anything you need to clean up manually goes in here db.shutdown(); } process.on('SIGINT', shutdownGracefully); process.on('SIGTERM', shutdownGracefully); PREVIOUS Zero-config deployments NEXT Static site generation GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Zero-config deployments • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapter-auto",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Zero-config deployments Edit this page on GitHub ON THIS PAGE Zero-config deployments Environment-specific configuration Adding community adapters When you create a new SvelteKit project with npm create svelte@latest, it installs adapter-auto by default. This adapter automatically installs and uses the correct adapter for supported environments when you deploy: @sveltejs/adapter-cloudflare for Cloudflare Pages @sveltejs/adapter-netlify for Netlify @sveltejs/adapter-vercel for Vercel svelte-adapter-azure-swa for Azure Static Web Apps svelte-kit-sst for AWS via SST It's recommended to install the appropriate adapter to your devDependencies once you've settled on a target environment, since this will add the adapter to your lockfile and slightly improve install times on CI. Environment-specific configuration permalink To add configuration options, such as { edge: true } in adapter-vercel and adapter-netlify, you must install the underlying adapter — adapter-auto does not take any options. Adding community adapters permalink You can add zero-config support for additional adapters by editing adapters.js and opening a pull request. PREVIOUS Adapters NEXT Node servers GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Adapters • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/adapters",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BUILD AND DEPLOY Adapters Edit this page on GitHub ON THIS PAGE Before you can deploy your SvelteKit app, you need to adapt it for your deployment target. Adapters are small plugins that take the built app as input and generate output for deployment. Official adapters exist for a variety of platforms — these are documented on the following pages: @sveltejs/adapter-cloudflare for Cloudflare Pages @sveltejs/adapter-cloudflare-workers for Cloudflare Workers @sveltejs/adapter-netlify for Netlify @sveltejs/adapter-node for Node servers @sveltejs/adapter-static for static site generation (SSG) @sveltejs/adapter-vercel for Vercel Additional community-provided adapters exist for other platforms. Using adapters permalink Your adapter is specified in svelte.config.js: svelte.config.js import adapter from 'svelte-adapter-foo'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Config} \\\\\\\\\\\\\\*/ const config = { kit: { adapter: adapter({ // adapter options go here }) } }; export default config; Platform-specific context permalink Some adapters may have access to additional information about the request. For example, Cloudflare Workers can access an env object containing KV namespaces etc. This can be passed to the RequestEvent used in hooks and server routes as the platform property — consult each adapter's documentation to learn more. PREVIOUS Building your app NEXT Zero-config deployments GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Building your app • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/building-your-app",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte BUILD AND DEPLOY Building your app Edit this page on GitHub ON THIS PAGE Building your app During the build Preview your app Building a SvelteKit app happens in two stages, which both happen when you run vite build (usually via npm run build). Firstly, Vite creates an optimized production build of your server code, your browser code, and your service worker (if you have one). Prerendering is executed at this stage, if appropriate. Secondly, an adapter takes this production build and tunes it for your target environment — more on this on the following pages. During the build permalink SvelteKit will load your +page/layout(.server).js files (and all files they import) for analysis during the build. Any code that should not be executed at this stage must check that building from $app/environment is false: import { building } from '$app/environment'; import { setupMyDatabase } from '$lib/server/database'; if (!building) { setupMyDatabase(); } export function load() { // ... } Preview your app permalink After building, you can view your production build locally with vite preview (via npm run preview). Note that this will run the app in Node, and so is not a perfect reproduction of your deployed app — adapter-specific adjustments like the platform object do not apply to previews. PREVIOUS State management NEXT Adapters GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "State management • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/state-management",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte CORE CONCEPTS State management Edit this page on GitHub ON THIS PAGE If you're used to building client-only apps, state management in an app that spans server and client might seem intimidating. This section provides tips for avoiding some common gotchas. Avoid shared state on the server permalink Browsers are stateful — state is stored in memory as the user interacts with the application. Servers, on the other hand, are stateless — the content of the response is determined entirely by the content of the request. Conceptually, that is. In reality, servers are often long-lived and shared by multiple users. For that reason it's important not to store data in shared variables. For example, consider this code: +page.server.js let user; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export function load() { return { user }; } /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { default: async ({ request }) => { const data = await request.formData(); // NEVER DO THIS! user = { name: data.get('name'), embarrassingSecret: data.get('secret') }; } } The user variable is shared by everyone who connects to this server. If Alice submitted an embarrassing secret, and Bob visited the page after her, Bob would know Alice's secret. In addition, when Alice returns to the site later in the day, the server may have restarted, losing her data. Instead, you should authenticate the user using cookies and persist the data to a database. No side-effects in load permalink For the same reason, your load functions should be pure — no side-effects (except maybe the occasional console.log(...)). For example, you might be tempted to write to a store inside a load function so that you can use the store value in your components: +page.js import { user } from '$lib/user'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ fetch }) { const response = await fetch('/api/user'); // NEVER DO THIS! user.set(await response.json()); } As with the previous example, this puts one user's information in a place that is shared by all users. Instead, just return the data... +page.js export async function load({ fetch }) { const response = await fetch('/api/user'); return { user: await response.json() }; } ...and pass it around to the components that need it, or use $page.data. If you're not using SSR, then there's no risk of accidentally exposing one user's data to another. But you should still avoid side-effects in your load functions — your application will be much easier to reason about without them. Using stores with context permalink You might wonder how we're able to use $page.data and other app stores if we can't use our own stores. The answer is that app stores on the server use Svelte's context API — the store is attached to the component tree with setContext, and when you subscribe you retrieve it with getContext. We can do the same thing with our own stores: src/routes/+layout.svelte import { setContext } from 'svelte'; import { writable } from 'svelte/store'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutData} \\\\\\\\\\\\\\*/ export let data; // Create a store and update it when necessary... const user = writable(); $: user.set(data.user); // ...and add it to the context for child components to access setContext('user', user); src/routes/user/+page.svelte import { getContext } from 'svelte'; // Retrieve user store from context const user = getContext('user'); Welcome {$user.name} Updating the context-based store value in deeper-level pages or components will not affect the value in the parent component when the page is rendered via SSR: The parent component has already been rendered by the time the store value is updated. To avoid values 'flashing' during state updates during hydration, it is generally recommended to pass state down into components rather than up. If you're not using SSR (and can guarantee that you won't need to use SSR in future) then you can safely keep state in a shared module, without using the context API. Component and page state is preserved permalink When you navigate around your application, SvelteKit reuses existing layout and page components. For example, if you have a route like this... src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; // THIS CODE IS BUGGY! const wordCount = data.content.split(' ').length; const estimatedReadingTime = wordCount / 250; {data.title} ============ Reading time: {Math.round(estimatedReadingTime)} minutes {@html data.content} ...then navigating from /blog/my-short-post to /blog/my-long-post won't cause the layout, page and any other components within to be destroyed and recreated. Instead the data prop (and by extension data.title and data.content) will update (as it would with any other Svelte component) and, because the code isn't rerunning, lifecycle methods like onMount and onDestroy won't rerun and estimatedReadingTime won't be recalculated. Instead, we need to make the value reactive: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; $: wordCount = data.content.split(' ').length; $: estimatedReadingTime = wordCount / 250; If your code in onMount and onDestroy has to run again after navigation you can use afterNavigate and beforeNavigate respectively. Reusing components like this means that things like sidebar scroll state are preserved, and you can easily animate between changing values. In the case that you do need to completely destroy and remount a component on navigation, you can use this pattern: {#key $page.url.pathname} {/key} Storing state in the URL permalink If you have state that should survive a reload and/or affect SSR, such as filters or sorting rules on a table, URL search parameters (like ?sort=price&order=ascending) are a good place to put them. You can put them in \\\\\\[or attributes, or set them programmatically via goto('?key=value'). They can be accessed inside load functions via the url parameter, and inside components via $page.url.searchParams. Storing ephemeral state in snapshots permalink Some UI state, such as 'is the accordion open?', is disposable — if the user navigates away or refreshes the page, it doesn't matter if the state is lost. In some cases, you do want the data to persist if the user navigates to a different page and comes back, but storing the state in the URL or in a database would be overkill. For this, SvelteKit provides snapshots, which let you associate component state with a history entry. PREVIOUS Page options NEXT Building your app GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript \\\\\\](...)"
  },
  {
    "title": "Form actions • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/form-actions",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte CORE CONCEPTS Form actions Edit this page on GitHub ON THIS PAGE Form actions Default actions Named actions Anatomy of an action Loading data Progressive enhancement Alternatives GET vs POST Further reading A +page.server.js file can export actions, which allow you to POST data to the server using the element. When using , client-side JavaScript is optional, but you can easily progressively enhance your form interactions with JavaScript to provide the best user experience. Default actions permalink In the simplest case, a page declares a default action: src/routes/login/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { default: async (event) => { // TODO log the user in } }; To invoke this action from the /login page, just add a — no JavaScript needed: src/routes/login/+page.svelte Email Password Log in If someone were to click the button, the browser would send the form data via POST request to the server, running the default action. Actions always use POST requests, since GET requests should never have side-effects. We can also invoke the action from other pages (for example if there's a login widget in the nav in the root layout) by adding the action attribute, pointing to the page: src/routes/+layout.svelte Named actions permalink Instead of one default action, a page can have as many named actions as it needs: src/routes/login/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { default: async (event) => { login: async (event) => { // TODO log the user in }, register: async (event) => { // TODO register the user } }; To invoke a named action, add a query parameter with the name prefixed by a / character: src/routes/login/+page.svelte src/routes/+layout.svelte As well as the action attribute, we can use the formaction attribute on a button to POST the same form data to a different action than the parent : src/routes/login/+page.svelte Email Password Log in Register We can't have default actions next to named actions, because if you POST to a named action without a redirect, the query parameter is persisted in the URL, which means the next default POST would go through the named action from before. Anatomy of an action permalink Each action receives a RequestEvent object, allowing you to read the data with request.formData(). After processing the request (for example, logging the user in by setting a cookie), the action can respond with data that will be available through the form property on the corresponding page and through $page.form app-wide until the next update. src/routes/login/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ cookies }) { const user = await db.getUserFromSession(cookies.get('sessionid')); return { user }; } /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { login: async ({ cookies, request }) => { const data = await request.formData(); const email = data.get('email'); const password = data.get('password'); const user = await db.getUser(email); cookies.set('sessionid', await db.createSession(user), { path: '/' }); return { success: true }; }, register: async (event) => { // TODO register the user } }; src/routes/login/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').ActionData} \\\\\\\\\\\\\\*/ export let form; {#if form?.success} Successfully logged in! Welcome back, {data.user.name} {/if} Validation errors permalink If the request couldn't be processed because of invalid data, you can return validation errors — along with the previously submitted form values — back to the user so that they can try again. The fail function lets you return an HTTP status code (typically 400 or 422, in the case of validation errors) along with the data. The status code is available through $page.status and the data through form: src/routes/login/+page.server.js import { fail } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { login: async ({ cookies, request }) => { const data = await request.formData(); const email = data.get('email'); const password = data.get('password'); if (!email) { return fail(400, { email, missing: true }); } const user = await db.getUser(email); if (!user || user.password !== hash(password)) { return fail(400, { email, incorrect: true }); } cookies.set('sessionid', await db.createSession(user), { path: '/' }); return { success: true }; }, register: async (event) => { // TODO register the user } }; Note that as a precaution, we only return the email back to the page — not the password. src/routes/login/+page.svelte {#if form?.missing} The email field is required {/if} {#if form?.incorrect} Invalid credentials! {/if} Email Password Log in Register The returned data must be serializable as JSON. Beyond that, the structure is entirely up to you. For example, if you had multiple forms on the page, you could distinguish which the returned form data referred to with an id property or similar. Redirects permalink Redirects (and errors) work exactly the same as in load: src/routes/login/+page.server.js import { fail, redirect } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { login: async ({ cookies, request, url }) => { const data = await request.formData(); const email = data.get('email'); const password = data.get('password'); const user = await db.getUser(email); if (!user) { return fail(400, { email, missing: true }); } if (user.password !== hash(password)) { return fail(400, { email, incorrect: true }); } cookies.set('sessionid', await db.createSession(user), { path: '/' }); if (url.searchParams.has('redirectTo')) { redirect(303, url.searchParams.get('redirectTo')); } return { success: true }; }, register: async (event) => { // TODO register the user } }; Loading data permalink After an action runs, the page will be re-rendered (unless a redirect or an unexpected error occurs), with the action's return value available to the page as the form prop. This means that your page's load functions will run after the action completes. Note that handle runs before the action is invoked, and does not rerun before the load functions. This means that if, for example, you use handle to populate event.locals based on a cookie, you must update event.locals when you set or delete the cookie in an action: src/hooks.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').Handle} \\\\\\\\\\\\\\*/ export async function handle({ event, resolve }) { event.locals.user = await getUser(event.cookies.get('sessionid')); return resolve(event); } src/routes/account/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export function load(event) { return { user: event.locals.user }; } /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').Actions} \\\\\\\\\\\\\\*/ export const actions = { logout: async (event) => { event.cookies.delete('sessionid', { path: '/' }); event.locals.user = null; } }; Progressive enhancement permalink In the preceding sections we built a /login action that works without client-side JavaScript — not a fetch in sight. That's great, but when JavaScript is available we can progressively enhance our form interactions to provide a better user experience. use:enhance permalink The easiest way to progressively enhance a form is to add the use:enhance action: src/routes/login/+page.svelte import { enhance } from '$app/forms'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').ActionData} \\\\\\\\\\\\\\*/ export let form; Yes, it's a little confusing that the enhance action and are both called 'action'. These docs are action-packed. Sorry. Without an argument, use:enhance will emulate the browser-native behaviour, just without the full-page reloads. It will: update the form property, $page.form and $page.status on a successful or invalid response, but only if the action is on the same page you're submitting from. For example, if your form looks like , form and $page will not be updated. This is because in the native form submission case you would be redirected to the page the action is on. If you want to have them updated either way, use applyAction reset the element invalidate all data using invalidateAll on a successful response call goto on a redirect response render the nearest +error boundary if an error occurs reset focus to the appropriate element Customising use:enhance permalink To customise the behaviour, you can provide a SubmitFunction that runs immediately before the form is submitted, and (optionally) returns a callback that runs with the ActionResult . Note that if you return a callback, the default behavior mentioned above is not triggered. To get it back, call update. { // \\\\\\\\\\\\\\`formElement\\\\\\\\\\\\\\` is this \\\\\\\\\\\\\\`\\\\\\\\\\\\\\` element // \\\\\\\\\\\\\\`formData\\\\\\\\\\\\\\` is its \\\\\\\\\\\\\\`FormData\\\\\\\\\\\\\\` object that's about to be submitted // \\\\\\\\\\\\\\`action\\\\\\\\\\\\\\` is the URL to which the form is posted // calling \\\\\\\\\\\\\\`cancel()\\\\\\\\\\\\\\` will prevent the submission // \\\\\\\\\\\\\\`submitter\\\\\\\\\\\\\\` is the \\\\\\\\\\\\\\`HTMLElement\\\\\\\\\\\\\\` that caused the form to be submitted return async ({ result, update }) => { // \\\\\\\\\\\\\\`result\\\\\\\\\\\\\\` is an \\\\\\\\\\\\\\`ActionResult\\\\\\\\\\\\\\` object // \\\\\\\\\\\\\\`update\\\\\\\\\\\\\\` is a function which triggers the default logic that would be triggered if this callback wasn't set }; }} > You can use these functions to show and hide loading UI, and so on. If you return a callback, you may need to reproduce part of the default use:enhance behaviour, but without invalidating all data on a successful response. You can do so with applyAction: src/routes/login/+page.svelte import { enhance, applyAction } from '$app/forms'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').ActionData} \\\\\\\\\\\\\\*/ export let form; { return async ({ result }) => { // \\\\\\\\\\\\\\`result\\\\\\\\\\\\\\` is an \\\\\\\\\\\\\\`ActionResult\\\\\\\\\\\\\\` object if (result.type === 'redirect') { goto(result.location); } else { await applyAction(result); } }; }} > The behaviour of applyAction(result) depends on result.type: success, failure — sets $page.status to result.status and updates form and $page.form to result.data (regardless of where you are submitting from, in contrast to update from enhance) redirect — calls goto(result.location, { invalidateAll: true }) error — renders the nearest +error boundary with result.error In all cases, focus will be reset. Custom event listener permalink We can also implement progressive enhancement ourselves, without use:enhance, with a normal event listener on the : src/routes/login/+page.svelte import { invalidateAll, goto } from '$app/navigation'; import { applyAction, deserialize } from '$app/forms'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').ActionData} \\\\\\\\\\\\\\*/ export let form; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {any} \\\\\\\\\\\\\\*/ let error; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @param {{ currentTarget: EventTarget & HTMLFormElement}} event \\\\\\\\\\\\\\*/ async function handleSubmit(event) { const data = new FormData(event.currentTarget); const response = await fetch(event.currentTarget.action, { method: 'POST', body: data }); /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('@sveltejs/kit').ActionResult} \\\\\\\\\\\\\\*/ const result = deserialize(await response.text()); if (result.type === 'success') { // rerun all \\\\\\\\\\\\\\`load\\\\\\\\\\\\\\` functions, following the successful update await invalidateAll(); } applyAction(result); } Note that you need to deserialize the response before processing it further using the corresponding method from $app/forms. JSON.parse() isn't enough because form actions - like load functions - also support returning Date or BigInt objects. If you have a +server.js alongside your +page.server.js, fetch requests will be routed there by default. To POST to an action in +page.server.js instead, use the custom x-sveltekit-action header: const response = await fetch(this.action, { method: 'POST', body: data, headers: { 'x-sveltekit-action': 'true' } }); Alternatives permalink Form actions are the preferred way to send data to the server, since they can be progressively enhanced, but you can also use +server.js files to expose (for example) a JSON API. Here's how such an interaction could look like: send-message/+page.svelte function rerun() { fetch('/api/ci', { method: 'POST' }); } Rerun CI api/ci/+server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export function POST() { // do something } GET vs POST permalink As we've seen, to invoke a form action you must use method=\"POST\". Some forms don't need to POST data to the server — search inputs, for example. For these you can use method=\"GET\" (or, equivalently, no method at all), and SvelteKit will treat them like elements, using the client-side router instead of a full page navigation: Search Submitting this form will navigate to /search?q=... and invoke your load function but will not invoke an action. As with elements, you can set the data-sveltekit-reload, data-sveltekit-replacestate, data-sveltekit-keepfocus and data-sveltekit-noscroll attributes on the to control the router's behaviour. Further reading permalink Tutorial: Forms PREVIOUS Loading data NEXT Page options GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Loading data • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/load",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte CORE CONCEPTS Loading data Edit this page on GitHub ON THIS PAGE Before a +page.svelte component (and its containing +layout.svelte components) can be rendered, we often need to get some data. This is done by defining load functions. Page data permalink A +page.svelte file can have a sibling +page.js that exports a load function, the return value of which is available to the page via the data prop: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export function load({ params }) { return { post: { title: \\\\\\\\\\\\\\`Title for ${params.slug} goes here\\\\\\\\\\\\\\`, content: \\\\\\\\\\\\\\`Content for ${params.slug} goes here\\\\\\\\\\\\\\` } }; } src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; {data.post.title} ================= {@html data.post.content} Thanks to the generated $types module, we get full type safety. A load function in a +page.js file runs both on the server and in the browser (unless combined with export const ssr = false, in which case it will only run in the browser). If your load function should always run on the server (because it uses private environment variables, for example, or accesses a database) then it would go in a +page.server.js instead. A more realistic version of your blog post's load function, that only runs on the server and pulls data from a database, might look like this: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ params }) { return { post: await db.getPost(params.slug) }; } Notice that the type changed from PageLoad to PageServerLoad, because server load functions can access additional arguments. To understand when to use +page.js and when to use +page.server.js, see Universal vs server. Layout data permalink Your +layout.svelte files can also load data, via +layout.js or +layout.server.js. src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+layout.server.js import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export async function load() { return { posts: await db.getPostSummaries() }; } src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+layout.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutData} \\\\\\\\\\\\\\*/ export let data; More posts ---------- {#each data.posts as post}\\\\\\* \\\\\\[{post.title}\\\\\\](/blog/{post.slug}) {/each} Data returned from layout load functions is available to child +layout.svelte components and the +page.svelte component as well as the layout that it 'belongs' to. src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte import { page } from '$app/stores'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; // we can access \\\\\\\\\\\\\\`data.posts\\\\\\\\\\\\\\` because it's returned from // the parent layout \\\\\\\\\\\\\\`load\\\\\\\\\\\\\\` function $: index = data.posts.findIndex(post => post.slug === $page.params.slug); $: next = data.posts\\\\\\\\\\\\\\[index - 1\\\\\\\\\\\\\\]; {data.post.title} ================= {@html data.post.content} {#if next} Next post: \\\\\\[{next.title}\\\\\\](/blog/{next.slug}) {/if} If multiple load functions return data with the same key, the last one 'wins' — the result of a layout load returning { a: 1, b: 2 } and a page load returning { b: 3, c: 4 } would be { a: 1, b: 3, c: 4 }. $page.data permalink The +page.svelte component, and each +layout.svelte component above it, has access to its own data plus all the data from its parents. In some cases, we might need the opposite — a parent layout might need to access page data or data from a child layout. For example, the root layout might want to access a title property returned from a load function in +page.js or +page.server.js. This can be done with $page.data: src/routes/+layout.svelte import { page } from '$app/stores'; {$page.data.title} Type information for $page.data is provided by App. PageData . Universal vs server permalink As we've seen, there are two types of load function: +page.js and +layout.js files export universal load functions that run both on the server and in the browser +page.server.js and +layout.server.js files export server load functions that only run server-side Conceptually, they're the same thing, but there are some important differences to be aware of. When does which load function run? permalink Server load functions always run on the server. By default, universal load functions run on the server during SSR when the user first visits your page. They will then run again during hydration, reusing any responses from fetch requests. All subsequent invocations of universal load functions happen in the browser. You can customize the behavior through page options. If you disable server side rendering, you'll get an SPA and universal load functions always run on the client. A load function is invoked at runtime, unless you prerender the page — in that case, it's invoked at build time. Input permalink Both universal and server load functions have access to properties describing the request (params, route and url) and various functions (fetch, setHeaders, parent, depends and untrack). These are described in the following sections. Server load functions are called with a ServerLoadEvent , which inherits clientAddress, cookies, locals, platform and request from RequestEvent . Universal load functions are called with a LoadEvent , which has a data property. If you have load functions in both +page.js and +page.server.js (or +layout.js and +layout.server.js), the return value of the server load function is the data property of the universal load function's argument. Output permalink A universal load function can return an object containing any values, including things like custom classes and component constructors. A server load function must return data that can be serialized with devalue — anything that can be represented as JSON plus things like BigInt, Date, Map, Set and RegExp, or repeated/cyclical references — so that it can be transported over the network. Your data can include promises, in which case it will be streamed to browsers. When to use which permalink Server load functions are convenient when you need to access data directly from a database or filesystem, or need to use private environment variables. Universal load functions are useful when you need to fetch data from an external API and don't need private credentials, since SvelteKit can get the data directly from the API rather than going via your server. They are also useful when you need to return something that can't be serialized, such as a Svelte component constructor. In rare cases, you might need to use both together — for example, you might need to return an instance of a custom class that was initialised with data from your server. Using URL data permalink Often the load function depends on the URL in one way or another. For this, the load function provides you with url, route and params. url permalink An instance of URL, containing properties like the origin, hostname, pathname and searchParams (which contains the parsed query string as a URLSearchParams object). url.hash cannot be accessed during load, since it is unavailable on the server. In some environments this is derived from request headers during server-side rendering. If you're using adapter-node, for example, you may need to configure the adapter in order for the URL to be correct. route permalink Contains the name of the current route directory, relative to src/routes: src/routes/a/\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[...c\\\\\\\\\\\\\\]/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export function load({ route }) { console.log(route.id); // '/a/\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[...c\\\\\\\\\\\\\\]' } params permalink params is derived from url.pathname and route.id. Given a route.id of /a/\\\\\\\\\\\\\\[b\\\\\\\\\\\\\\]/\\\\\\\\\\\\\\[...c\\\\\\\\\\\\\\] and a url.pathname of /a/x/y/z, the params object would look like this: { \"b\": \"x\", \"c\": \"y/z\" } Making fetch requests permalink To get data from an external API or a +server.js handler, you can use the provided fetch function, which behaves identically to the native fetch web API with a few additional features: It can be used to make credentialed requests on the server, as it inherits the cookie and authorization headers for the page request. It can make relative requests on the server (ordinarily, fetch requires a URL with an origin when used in a server context). Internal requests (e.g. for +server.js routes) go directly to the handler function when running on the server, without the overhead of an HTTP call. During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the text, json and arrayBuffer methods of the Response object. Note that headers will not be serialized, unless explicitly included via filterSerializedResponseHeaders. During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request - if you received a warning in your browser console when using the browser fetch instead of the load fetch, this is why. src/routes/items/\\\\\\\\\\\\\\[id\\\\\\\\\\\\\\]/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ fetch, params }) { const res = await fetch(\\\\\\\\\\\\\\`/api/items/${params.id}\\\\\\\\\\\\\\`); const item = await res.json(); return { item }; } Cookies permalink A server load function can get and set cookies. src/routes/+layout.server.js import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export async function load({ cookies }) { const sessionid = cookies.get('sessionid'); return { user: await db.getUser(sessionid) }; } Cookies will only be passed through the provided fetch function if the target host is the same as the SvelteKit application or a more specific subdomain of it. For example, if SvelteKit is serving my.domain.com: domain.com WILL NOT receive cookies my.domain.com WILL receive cookies api.domain.com WILL NOT receive cookies sub.my.domain.com WILL receive cookies Other cookies will not be passed when credentials: 'include' is set, because SvelteKit does not know which domain which cookie belongs to (the browser does not pass this information along), so it's not safe to forward any of them. Use the handleFetch hook to work around it. Headers permalink Both server and universal load functions have access to a setHeaders function that, when running on the server, can set headers for the response. (When running in the browser, setHeaders has no effect.) This is useful if you want the page to be cached, for example: src/routes/products/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ fetch, setHeaders }) { const url = \\\\\\\\\\\\\\`https://cms.example.com/products.json\\\\\\\\\\\\\\`; const response = await fetch(url); // cache the page for the same length of time // as the underlying data setHeaders({ age: response.headers.get('age'), 'cache-control': response.headers.get('cache-control') }); return response.json(); } Setting the same header multiple times (even in separate load functions) is an error — you can only set a given header once. You cannot add a set-cookie header with setHeaders — use cookies.set(name, value, options) instead. Using parent data permalink Occasionally it's useful for a load function to access data from a parent load function, which can be done with await parent(): src/routes/+layout.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutLoad} \\\\\\\\\\\\\\*/ export function load() { return { a: 1 }; } src/routes/abc/+layout.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutLoad} \\\\\\\\\\\\\\*/ export async function load({ parent }) { const { a } = await parent(); return { b: a + 1 }; } src/routes/abc/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ parent }) { const { a, b } = await parent(); return { c: a + b }; } src/routes/abc/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; {data.a} + {data.b} = {data.c} Notice that the load function in +page.js receives the merged data from both layout load functions, not just the immediate parent. Inside +page.server.js and +layout.server.js, parent returns data from parent +layout.server.js files. In +page.js or +layout.js it will return data from parent +layout.js files. However, a missing +layout.js is treated as a ({ data }) => data function, meaning that it will also return data from parent +layout.server.js files that are not 'shadowed' by a +layout.js file Take care not to introduce waterfalls when using await parent(). Here, for example, getData(params) does not depend on the result of calling parent(), so we should call it first to avoid a delayed render. +page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ params, parent }) { const parentData = await parent(); const data = await getData(params); const parentData = await parent(); return { ...data meta: { ...parentData.meta, ...data.meta } }; } Errors permalink If an error is thrown during load, the nearest +error.svelte will be rendered. For expected errors, use the error helper from @sveltejs/kit to specify the HTTP status code and an optional message: src/routes/admin/+layout.server.js import { error } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export function load({ locals }) { if (!locals.user) { error(401, 'not logged in'); } if (!locals.user.isAdmin) { error(403, 'not an admin'); } } Calling error(...) will throw an exception, making it easy to stop execution from inside helper functions. If an unexpected error is thrown, SvelteKit will invoke handleError and treat it as a 500 Internal Error. In SvelteKit 1.x you had to throw the error yourself Redirects permalink To redirect users, use the redirect helper from @sveltejs/kit to specify the location to which they should be redirected alongside a 3xx status code. Like error(...), calling redirect(...) will throw an exception, making it easy to stop execution from inside helper functions. src/routes/user/+layout.server.js import { redirect } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export function load({ locals }) { if (!locals.user) { redirect(307, '/login'); } } Don't use redirect() inside a try {...} block, as the redirect will immediately trigger the catch statement. In the browser, you can also navigate programmatically outside of a load function using goto from $app.navigation. In SvelteKit 1.x you had to throw the redirect yourself Streaming with promises permalink When using a server load, promises will be streamed to the browser as they resolve. This is useful if you have slow, non-essential data, since you can start rendering the page before all the data is available: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ params }) { return { // make sure the \\\\\\\\\\\\\\`await\\\\\\\\\\\\\\` happens at the end, otherwise we // can't start loading comments until we've loaded the post comments: loadComments(params.slug), post: await loadPost(params.slug) }; } This is useful for creating skeleton loading states, for example: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; {data.post.title} ================= {@html data.post.content} {#await data.comments} Loading comments... {:then comments} {#each comments as comment} {comment.content} {/each} {:catch error} error loading comments: {error.message} {/await} When streaming data, be careful to handle promise rejections correctly. More specifically, the server could crash with an \"unhandled promise rejection\" error if a lazy-loaded promise fails before rendering starts (at which point it's caught) and isn't handling the error in some way. When using SvelteKit's fetch directly in the load function, SvelteKit will handle this case for you. For other promises, it is enough to attach a noop-catch to the promise to mark it as handled. src/routes/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export function load({ fetch }) { const ok\\\\\\\\\\\\\\_manual = Promise.reject(); ok\\\\\\\\\\\\\\_manual.catch(() => {}); return { ok\\\\\\\\\\\\\\_manual, ok\\\\\\\\\\\\\\_fetch: fetch('/fetch/that/could/fail'), dangerous\\\\\\\\\\\\\\_unhandled: Promise.reject() }; } On platforms that do not support streaming, such as AWS Lambda, responses will be buffered. This means the page will only render once all promises resolve. If you are using a proxy (e.g. NGINX), make sure it does not buffer responses from the proxied server. Streaming data will only work when JavaScript is enabled. You should avoid returning promises from a universal load function if the page is server rendered, as these are not streamed — instead, the promise is recreated when the function reruns in the browser. The headers and status code of a response cannot be changed once the response has started streaming, therefore you cannot setHeaders or throw redirects inside a streamed promise. In SvelteKit 1.x top-level promises were automatically awaited, only nested promises were streamed. Parallel loading permalink When rendering (or navigating to) a page, SvelteKit runs all load functions concurrently, avoiding a waterfall of requests. During client-side navigation, the result of calling multiple server load functions are grouped into a single response. Once all load functions have returned, the page is rendered. Rerunning load functions permalink SvelteKit tracks the dependencies of each load function to avoid rerunning it unnecessarily during navigation. For example, given a pair of load functions like these... src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ params }) { return { post: await db.getPost(params.slug) }; } src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+layout.server.js import \\\\\\\\\\\\\\* as db from '$lib/server/database'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutServerLoad} \\\\\\\\\\\\\\*/ export async function load() { return { posts: await db.getPostSummaries() }; } ...the one in +page.server.js will rerun if we navigate from /blog/trying-the-raw-meat-diet to /blog/i-regret-my-choices because params.slug has changed. The one in +layout.server.js will not, because the data is still valid. In other words, we won't call db.getPostSummaries() a second time. A load function that calls await parent() will also rerun if a parent load function is rerun. Dependency tracking does not apply after the load function has returned — for example, accessing params.x inside a nested promise will not cause the function to rerun when params.x changes. (Don't worry, you'll get a warning in development if you accidentally do this.) Instead, access the parameter in the main body of your load function. Search parameters are tracked independently from the rest of the url. For example, accessing event.url.searchParams.get(\"x\") inside a load function will make that load function re-run when navigating from ?x=1 to ?x=2, but not when navigating from ?x=1&y=1 to ?x=1&y=2. Untracking dependencies permalink In rare cases, you may wish to exclude something from the dependency tracking mechanism. You can do this with the provided untrack function: src/routes/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ untrack, url }) { // Untrack url.pathname so that path changes don't trigger a rerun if (untrack(() => url.pathname === '/')) { return { message: 'Welcome!' }; } } Manual invalidation permalink You can also rerun load functions that apply to the current page using invalidate(url), which reruns all load functions that depend on url, and invalidateAll(), which reruns every load function. Server load functions will never automatically depend on a fetched url to avoid leaking secrets to the client. A load function depends on url if it calls fetch(url) or depends(url). Note that url can be a custom identifier that starts with \\\\\\\\\\\\\\[a-z\\\\\\\\\\\\\\]:: src/routes/random-number/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ fetch, depends }) { // load reruns when \\\\\\\\\\\\\\`invalidate('https://api.example.com/random-number')\\\\\\\\\\\\\\` is called... const response = await fetch('https://api.example.com/random-number'); // ...or when \\\\\\\\\\\\\\`invalidate('app:random')\\\\\\\\\\\\\\` is called depends('app:random'); return { number: await response.json() }; } src/routes/random-number/+page.svelte import { invalidate, invalidateAll } from '$app/navigation'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; function rerunLoadFunction() { // any of these will cause the \\\\\\\\\\\\\\`load\\\\\\\\\\\\\\` function to rerun invalidate('app:random'); invalidate('https://api.example.com/random-number'); invalidate(url => url.href.includes('random-number')); invalidateAll(); } random number: {data.number} Update random number When do load functions rerun? permalink To summarize, a load function will rerun in the following situations: It references a property of params whose value has changed It references a property of url (such as url.pathname or url.search) whose value has changed. Properties in request.url are not tracked It calls url.searchParams.get(...), url.searchParams.getAll(...) or url.searchParams.has(...) and the parameter in question changes. Accessing other properties of url.searchParams will have the same effect as accessing url.search. It calls await parent() and a parent load function reran It declared a dependency on a specific URL via fetch (universal load only) or depends, and that URL was marked invalid with invalidate(url) All active load functions were forcibly rerun with invalidateAll() params and url can change in response to a \\\\\\[link click, a interaction, a goto invocation, or a redirect. Note that rerunning a load function will update the data prop inside the corresponding +layout.svelte or +page.svelte; it does not cause the component to be recreated. As a result, internal state is preserved. If this isn't what you want, you can reset whatever you need to reset inside an afterNavigate callback, and/or wrap your component in a {#key ...} block. Implications for authentication permalink A couple features of loading data have important implications for auth checks: Layout load functions do not run on every request, such as during client side navigation between child routes. (When do load functions rerun?) Layout and page load functions run concurrently unless await parent() is called. If a layout load throws, the page load function runs, but the client will not receive the returned data. There are a few possible strategies to ensure an auth check occurs before protected code. To prevent data waterfalls and preserve layout load caches: Use hooks to protect multiple routes before any load functions run Use auth guards directly in +page.server.js load functions for route specific protection Putting an auth guard in +layout.server.js requires all child pages to call await parent() before protected code. Unless every child page depends on returned data from await parent(), the other options will be more performant. Further reading permalink Tutorial: Loading data Tutorial: Errors and redirects Tutorial: Advanced loading PREVIOUS Routing NEXT Form actions GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript \\\\\\](..)"
  },
  {
    "title": "Routing • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/routing",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte CORE CONCEPTS Routing Edit this page on GitHub ON THIS PAGE At the heart of SvelteKit is a filesystem-based router. The routes of your app — i.e. the URL paths that users can access — are defined by the directories in your codebase: src/routes is the root route src/routes/about creates an /about route src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] creates a route with a parameter, slug, that can be used to load data dynamically when a user requests a page like /blog/hello-world You can change src/routes to a different directory by editing the project config. Each route directory contains one or more route files, which can be identified by their + prefix. +page permalink +page.svelte permalink A +page.svelte component defines a page of your app. By default, pages are rendered both on the server (SSR) for the initial request and in the browser (CSR) for subsequent navigation. src/routes/+page.svelte Hello and welcome to my site! ============================= \\\\\\[About my site\\\\\\](/about) src/routes/about/+page.svelte About this site =============== TODO... \\\\\\[Home\\\\\\](/) src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; {data.title} ============ {@html data.content} Note that SvelteKit uses elements to navigate between routes, rather than a framework-specific component. +page.js permalink Often, a page will need to load some data before it can be rendered. For this, we add a +page.js module that exports a load function: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.js import { error } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export function load({ params }) { if (params.slug === 'hello-world') { return { title: 'Hello world!', content: 'Welcome to our blog. Lorem ipsum dolor sit amet...' }; } error(404, 'Not found'); } This function runs alongside +page.svelte, which means it runs on the server during server-side rendering and in the browser during client-side navigation. See load for full details of the API. As well as load, +page.js can export values that configure the page's behaviour: export const prerender = true or false or 'auto' export const ssr = true or false export const csr = true or false You can find more information about these in page options. +page.server.js permalink If your load function can only run on the server — for example, if it needs to fetch data from a database or you need to access private environment variables like API keys — then you can rename +page.js to +page.server.js and change the PageLoad type to PageServerLoad. src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js import { error } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageServerLoad} \\\\\\\\\\\\\\*/ export async function load({ params }) { const post = await getPostFromDatabase(params.slug); if (post) { return post; } error(404, 'Not found'); } During client-side navigation, SvelteKit will load this data from the server, which means that the returned value must be serializable using devalue. See load for full details of the API. Like +page.js, +page.server.js can export page options — prerender, ssr and csr. A +page.server.js file can also export actions. If load lets you read data from the server, actions let you write data to the server using the element. To learn how to use them, see the form actions section. +error permalink If an error occurs during load, SvelteKit will render a default error page. You can customise this error page on a per-route basis by adding an +error.svelte file: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+error.svelte import { page } from '$app/stores'; {$page.status}: {$page.error.message} ===================================== SvelteKit will 'walk up the tree' looking for the closest error boundary — if the file above didn't exist it would try src/routes/blog/+error.svelte and then src/routes/+error.svelte before rendering the default error page. If that fails (or if the error was thrown from the load function of the root +layout, which sits 'above' the root +error), SvelteKit will bail out and render a static fallback error page, which you can customise by creating a src/error.html file. If the error occurs inside a load function in +layout(.server).js, the closest error boundary in the tree is an +error.svelte file above that layout (not next to it). If no route can be found (404), src/routes/+error.svelte (or the default error page, if that file does not exist) will be used. +error.svelte is not used when an error occurs inside handle or a +server.js request handler. You can read more about error handling here. +layout permalink So far, we've treated pages as entirely standalone components — upon navigation, the existing +page.svelte component will be destroyed, and a new one will take its place. But in many apps, there are elements that should be visible on every page, such as top-level navigation or a footer. Instead of repeating them in every +page.svelte, we can put them in layouts. +layout.svelte permalink To create a layout that applies to every page, make a file called src/routes/+layout.svelte. The default layout (the one that SvelteKit uses if you don't bring your own) looks like this... ...but we can add whatever markup, styles and behaviour we want. The only requirement is that the component includes a for the page content. For example, let's add a nav bar: src/routes/+layout.svelte \\\\\\[Home\\\\\\](/) \\\\\\[About\\\\\\](/about) \\\\\\[Settings\\\\\\](/settings) If we create pages for /, /about and /settings... src/routes/+page.svelte Home ==== src/routes/about/+page.svelte About ===== src/routes/settings/+page.svelte Settings ======== ...the nav will always be visible, and clicking between the three pages will only result in the being replaced. Layouts can be nested. Suppose we don't just have a single /settings page, but instead have nested pages like /settings/profile and /settings/notifications with a shared submenu (for a real-life example, see github.com/settings). We can create a layout that only applies to pages below /settings (while inheriting the root layout with the top-level nav): src/routes/settings/+layout.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutData} \\\\\\\\\\\\\\*/ export let data; ====================================================================================================================================================================================================================================================================================================================================================================================================================================================================================== Settings ======== {#each data.sections as section} \\\\\\[{section.title}\\\\\\](/settings/{section.slug}) {/each} By default, each layout inherits the layout above it. Sometimes that isn't what you want - in this case, advanced layouts can help you. +layout.js permalink Just like +page.svelte loading data from +page.js, your +layout.svelte component can get data from a load function in +layout.js. src/routes/settings/+layout.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').LayoutLoad} \\\\\\\\\\\\\\*/ export function load() { return { sections: \\\\\\\\\\\\\\[ { slug: 'profile', title: 'Profile' }, { slug: 'notifications', title: 'Notifications' } \\\\\\\\\\\\\\] }; } If a +layout.js exports page options — prerender, ssr and csr — they will be used as defaults for child pages. Data returned from a layout's load function is also available to all its child pages: src/routes/settings/profile/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; console.log(data.sections); // \\\\\\\\\\\\\\[{ slug: 'profile', title: 'Profile' }, ...\\\\\\\\\\\\\\] Often, layout data is unchanged when navigating between pages. SvelteKit will intelligently rerun load functions when necessary. +layout.server.js permalink To run your layout's load function on the server, move it to +layout.server.js, and change the LayoutLoad type to LayoutServerLoad. Like +layout.js, +layout.server.js can export page options — prerender, ssr and csr. +server permalink As well as pages, you can define routes with a +server.js file (sometimes referred to as an 'API route' or an 'endpoint'), which gives you full control over the response. Your +server.js file exports functions corresponding to HTTP verbs like GET, POST, PATCH, PUT, DELETE, OPTIONS, and HEAD that take a RequestEvent argument and return a Response object. For example we could create an /api/random-number route with a GET handler: src/routes/api/random-number/+server.js import { error } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export function GET({ url }) { const min = Number(url.searchParams.get('min') ?? '0'); const max = Number(url.searchParams.get('max') ?? '1'); const d = max - min; if (isNaN(d) || d < 0) { error(400, 'min and max must be numbers, and min must be less than max'); } const random = min + Math.random() \\\\\\\\\\\\\\* d; return new Response(String(random)); } The first argument to Response can be a ReadableStream, making it possible to stream large amounts of data or create server-sent events (unless deploying to platforms that buffer responses, like AWS Lambda). You can use the error, redirect and json methods from @sveltejs/kit for convenience (but you don't have to). If an error is thrown (either error(...) or an unexpected error), the response will be a JSON representation of the error or a fallback error page — which can be customised via src/error.html — depending on the Accept header. The +error.svelte component will not be rendered in this case. You can read more about error handling here. When creating an OPTIONS handler, note that Vite will inject Access-Control-Allow-Origin and Access-Control-Allow-Methods headers — these will not be present in production unless you add them. Receiving data permalink By exporting POST/PUT/PATCH/DELETE/OPTIONS/HEAD handlers, +server.js files can be used to create a complete API: src/routes/add/+page.svelte let a = 0; let b = 0; let total = 0; async function add() { const response = await fetch('/api/add', { method: 'POST', body: JSON.stringify({ a, b }), headers: { 'content-type': 'application/json' } }); total = await response.json(); } + = {total} Calculate src/routes/api/add/+server.js import { json } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export async function POST({ request }) { const { a, b } = await request.json(); return json(a + b); } In general, form actions are a better way to submit data from the browser to the server. If a GET handler is exported, a HEAD request will return the content-length of the GET handler's response body. Fallback method handler permalink Exporting the fallback handler will match any unhandled request methods, including methods like MOVE which have no dedicated export from +server.js. src/routes/api/add/+server.js import { json, text } from '@sveltejs/kit'; export async function POST({ request }) { const { a, b } = await request.json(); return json(a + b); } // This handler will respond to PUT, PATCH, DELETE, etc. /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export async function fallback({ request }) { return text(\\\\\\\\\\\\\\`I caught your ${request.method} request!\\\\\\\\\\\\\\`); } For HEAD requests, the GET handler takes precedence over the fallback handler. Content negotiation permalink +server.js files can be placed in the same directory as +page files, allowing the same route to be either a page or an API endpoint. To determine which, SvelteKit applies the following rules: PUT/PATCH/DELETE/OPTIONS requests are always handled by +server.js since they do not apply to pages GET/POST/HEAD requests are treated as page requests if the accept header prioritises text/html (in other words, it's a browser page request), else they are handled by +server.js. Responses to GET requests will include a Vary: Accept header, so that proxies and browsers cache HTML and JSON responses separately. $types permalink Throughout the examples above, we've been importing types from a $types.d.ts file. This is a file SvelteKit creates for you in a hidden directory if you're using TypeScript (or JavaScript with JSDoc type annotations) to give you type safety when working with your root files. For example, annotating export let data with PageData (or LayoutData, for a +layout.svelte file) tells TypeScript that the type of data is whatever was returned from load: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageData} \\\\\\\\\\\\\\*/ export let data; In turn, annotating the load function with PageLoad, PageServerLoad, LayoutLoad or LayoutServerLoad (for +page.js, +page.server.js, +layout.js and +layout.server.js respectively) ensures that params and the return value are correctly typed. If you're using VS Code or any IDE that supports the language server protocol and TypeScript plugins then you can omit these types entirely! Svelte's IDE tooling will insert the correct types for you, so you'll get type checking without writing them yourself. It also works with our command line tool svelte-check. You can read more about omitting $types in our blog post about it. Other files permalink Any other files inside a route directory are ignored by SvelteKit. This means you can colocate components and utility modules with the routes that need them. If components and modules are needed by multiple routes, it's a good idea to put them in $lib. Further reading permalink Tutorial: Routing Tutorial: API routes Docs: Advanced routing PREVIOUS Web standards NEXT Loading data GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Web standards • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/web-standards",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte GETTING STARTED Web standards Edit this page on GitHub ON THIS PAGE Throughout this documentation, you'll see references to the standard Web APIs that SvelteKit builds on top of. Rather than reinventing the wheel, we use the platform, which means your existing web development skills are applicable to SvelteKit. Conversely, time spent learning SvelteKit will help you be a better web developer elsewhere. These APIs are available in all modern browsers and in many non-browser environments like Cloudflare Workers, Deno and Vercel Edge Functions. During development, and in adapters for Node-based environments (including AWS Lambda), they're made available via polyfills where necessary (for now, that is — Node is rapidly adding support for more web standards). In particular, you'll get comfortable with the following: Fetch APIs permalink SvelteKit uses fetch for getting data from the network. It's available in hooks and server routes as well as in the browser. A special version of fetch is available in load functions, server hooks and API routes for invoking endpoints directly during server-side rendering, without making an HTTP call, while preserving credentials. (To make credentialled fetches in server-side code outside load, you must explicitly pass cookie and/or authorization headers.) It also allows you to make relative requests, whereas server-side fetch normally requires a fully qualified URL. Besides fetch itself, the Fetch API includes the following interfaces: Request permalink An instance of Request is accessible in hooks and server routes as event.request. It contains useful methods like request.json() and request.formData() for getting data that was posted to an endpoint. Response permalink An instance of Response is returned from await fetch(...) and handlers in +server.js files. Fundamentally, a SvelteKit app is a machine for turning a Request into a Response. Headers permalink The Headers interface allows you to read incoming request.headers and set outgoing response.headers. For example, you can get the request.headers as shown below, and use the json convenience function to send modified response.headers: src/routes/what-is-my-user-agent/+server.js import { json } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export function GET({ request }) { // log all headers console.log(...request.headers); // create a JSON Response using a header we received return json({ // retrieve a specific header userAgent: request.headers.get('user-agent') }, { // set a header on the response headers: { 'x-custom-header': 'potato' } }); } FormData permalink When dealing with HTML native form submissions you'll be working with FormData objects. src/routes/hello/+server.js import { json } from '@sveltejs/kit'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export async function POST(event) { const body = await event.request.formData(); // log all fields console.log(\\\\\\\\\\\\\\[...body\\\\\\\\\\\\\\]); return json({ // get a specific field's value name: body.get('name') ?? 'world' }); } Stream APIs permalink Most of the time, your endpoints will return complete data, as in the userAgent example above. Sometimes, you may need to return a response that's too large to fit in memory in one go, or is delivered in chunks, and for this the platform provides streams — ReadableStream, WritableStream and TransformStream. URL APIs permalink URLs are represented by the URL interface, which includes useful properties like origin and pathname (and, in the browser, hash). This interface shows up in various places — event.url in hooks and server routes, $page.url in pages, from and to in beforeNavigate and afterNavigate and so on. URLSearchParams permalink Wherever you encounter a URL, you can access query parameters via url.searchParams, which is an instance of URLSearchParams: const foo = url.searchParams.get('foo'); Web Crypto permalink The Web Crypto API is made available via the crypto global. It's used internally for Content Security Policy headers, but you can also use it for things like generating UUIDs: const uuid = crypto.randomUUID(); PREVIOUS Project structure NEXT Routing GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Creating a project • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/creating-a-project",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte GETTING STARTED Creating a project Edit this page on GitHub ON THIS PAGE Creating a project Editor setup The easiest way to start building a SvelteKit app is to run npm create: npm create svelte@latest my-app cd my-app npm install npm run dev The first command will scaffold a new project in the my-app directory asking you if you'd like to set up some basic tooling such as TypeScript. See integrations for pointers on setting up additional tooling. The subsequent commands will then install its dependencies and start a server on localhost:5173. There are two basic concepts: Each page of your app is a Svelte component You create pages by adding files to the src/routes directory of your project. These will be server-rendered so that a user's first visit to your app is as fast as possible, then a client-side app takes over Try editing the files to get a feel for how everything works. Editor setup permalink We recommend using Visual Studio Code (aka VS Code) with the Svelte extension, but support also exists for numerous other editors. PREVIOUS Introduction NEXT Project structure GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Project structure • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/project-structure",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte GETTING STARTED Project structure Edit this page on GitHub ON THIS PAGE A typical SvelteKit project looks like this: my-project/ ├ src/ │ ├ lib/ │ │ ├ server/ │ │ │ └ \\\\\\\\\\\\\\[your server-only lib files\\\\\\\\\\\\\\] │ │ └ \\\\\\\\\\\\\\[your lib files\\\\\\\\\\\\\\] │ ├ params/ │ │ └ \\\\\\\\\\\\\\[your param matchers\\\\\\\\\\\\\\] │ ├ routes/ │ │ └ \\\\\\\\\\\\\\[your routes\\\\\\\\\\\\\\] │ ├ app.html │ ├ error.html │ ├ hooks.client.js │ ├ hooks.server.js │ └ service-worker.js ├ static/ │ └ \\\\\\\\\\\\\\[your static assets\\\\\\\\\\\\\\] ├ tests/ │ └ \\\\\\\\\\\\\\[your tests\\\\\\\\\\\\\\] ├ package.json ├ svelte.config.js ├ tsconfig.json └ vite.config.js You'll also find common files like .gitignore and .npmrc (and .prettierrc and .eslintrc.cjs and so on, if you chose those options when running npm create svelte@latest). Project files permalink src permalink The src directory contains the meat of your project. Everything except src/routes and src/app.html is optional. lib contains your library code (utilities and components), which can be imported via the $lib alias, or packaged up for distribution using svelte-package server contains your server-only library code. It can be imported by using the $lib/server alias. SvelteKit will prevent you from importing these in client code. params contains any param matchers your app needs routes contains the routes of your application. You can also colocate other components that are only used within a single route here app.html is your page template — an HTML document containing the following placeholders: %sveltekit.head% — and elements needed by the app, plus any content %sveltekit.body% — the markup for a rendered page. This should live inside a or other element, rather than directly inside , to prevent bugs caused by browser extensions injecting elements that are then destroyed by the hydration process. SvelteKit will warn you in development if this is not the case %sveltekit.assets% — either paths.assets, if specified, or a relative path to paths.base %sveltekit.nonce% — a CSP nonce for manually included links and scripts, if used %sveltekit.env.\\\\\\\\\\\\\\[NAME\\\\\\\\\\\\\\]% - this will be replaced at render time with the \\\\\\\\\\\\\\[NAME\\\\\\\\\\\\\\] environment variable, which must begin with the publicPrefix (usually PUBLIC\\\\\\\\\\\\\\_). It will fallback to '' if not matched. error.html is the page that is rendered when everything else fails. It can contain the following placeholders: %sveltekit.status% — the HTTP status %sveltekit.error.message% — the error message hooks.client.js contains your client hooks hooks.server.js contains your server hooks service-worker.js contains your service worker (Whether the project contains .js or .ts files depends on whether you opt to use TypeScript when you create your project. You can switch between JavaScript and TypeScript in the documentation using the toggle at the bottom of this page.) If you added Vitest when you set up your project, your unit tests will live in the src directory with a .test.js extension. static permalink Any static assets that should be served as-is, like robots.txt or favicon.png, go in here. tests permalink If you added Playwright for browser testing when you set up your project, the tests will live in this directory. package.json permalink Your package.json file must include @sveltejs/kit, svelte and vite as devDependencies. When you create a project with npm create svelte@latest, you'll also notice that package.json includes \"type\": \"module\". This means that .js files are interpreted as native JavaScript modules with import and export keywords. Legacy CommonJS files need a .cjs file extension. svelte.config.js permalink This file contains your Svelte and SvelteKit configuration. tsconfig.json permalink This file (or jsconfig.json, if you prefer type-checked .js files over .ts files) configures TypeScript, if you added typechecking during npm create svelte@latest. Since SvelteKit relies on certain configuration being set a specific way, it generates its own .svelte-kit/tsconfig.json file which your own config extends. vite.config.js permalink A SvelteKit project is really just a Vite project that uses the @sveltejs/kit/vite plugin, along with any other Vite configuration. Other files permalink .svelte-kit permalink As you develop and build your project, SvelteKit will generate files in a .svelte-kit directory (configurable as outDir). You can ignore its contents, and delete them at any time (they will be regenerated when you next dev or build). PREVIOUS Creating a project NEXT Web standards GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Images • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/images",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte BEST PRACTICES Images Edit this page on GitHub ON THIS PAGE Images can have a big impact on your app's performance. For best results, you should optimize them by doing the following: generate optimal formats like .avif and .webp create different sizes for different screens ensure that assets can be cached effectively Doing this manually is tedious. There are a variety of techniques you can use, depending on your needs and preferences. Vite's built-in handling permalink Vite will automatically process imported assets for improved performance. This includes assets referenced via the CSS url() function. Hashes will be added to the filenames so that they can be cached, and assets smaller than assetsInlineLimit will be inlined. Vite's asset handling is most often used for images, but is also useful for video, audio, etc. import logo from '$lib/assets/logo.png'; !\\\\\\[The project logo\\\\\\]({logo}) @sveltejs/enhanced-img permalink WARNING: The @sveltejs/enhanced-img package is experimental. It uses pre-1.0 versioning and may introduce breaking changes with every minor version release. @sveltejs/enhanced-img builds on top of Vite's built-in asset handling. It offers plug and play image processing that serves smaller file formats like avif or webp, automatically sets the intrinsic width and height of the image to avoid layout shift, creates images of multiple sizes for various devices, and strips EXIF data for privacy. It will work in any Vite-based project including, but not limited to, SvelteKit projects. Setup permalink Install: npm install --save-dev @sveltejs/enhanced-img Adjust vite.config.js: import { sveltekit } from '@sveltejs/kit/vite'; import { enhancedImages } from '@sveltejs/enhanced-img'; import { defineConfig } from 'vite'; export default defineConfig({ plugins: \\\\\\\\\\\\\\[ enhancedImages(), sveltekit() \\\\\\\\\\\\\\] }); Basic usage permalink Use in your .svelte components by using rather than and referencing the image file with a Vite asset import path: At build time, your tag will be replaced with an wrapped by a providing multiple image types and sizes. It's only possible to downscale images without losing quality, which means that you should provide the highest resolution image that you need — smaller versions will be generated for the various device types that may request an image. You should provide your image at 2x resolution for HiDPI displays (a.k.a. retina displays). will automatically take care of serving smaller versions to smaller devices. If you wish to add styles to your , you should add a class and target that. Dynamically choosing an image permalink You can also manually import an image asset and pass it to an . This is useful when you have a collection of static images and would like to dynamically choose one or iterate over them. In this case you will need to update both the import statement and element as shown below to indicate you'd like process them. import MyImage from './path/to/your/image.jpg?enhanced'; You can also use Vite's import.meta.glob. Note that you will have to specify enhanced via a custom query: const pictures = import.meta.glob( '/path/to/assets/\\\\\\\\\\\\\\*.{avif,gif,heif,jpeg,jpg,png,tiff,webp}', { query: { enhanced: true } } ); Intrinsic Dimensions permalink width and height are optional as they can be inferred from the source image and will be automatically added when the tag is preprocessed. With these attributes, the browser can reserve the correct amount of space, preventing layout shift. If you'd like to use a different width and height you can style the image with CSS. Because the preprocessor adds a width and height for you, if you'd like one of the dimensions to be automatically calculated then you will need to specify that: .hero-image img { width: var(--size); height: auto; } srcset and sizes permalink If you have a large image, such as a hero image taking the width of the design, you should specify sizes so that smaller versions are requested on smaller devices. E.g. if you have a 1280px image you may want to specify something like: If sizes is specified, will generate small images for smaller devices and populate the srcset attribute. The smallest picture generated automatically will have a width of 540px. If you'd like smaller images or would otherwise like to specify custom widths, you can do that with the w query parameter: If sizes is not provided, then a HiDPI/Retina image and a standard resolution image will be generated. The image you provide should be 2x the resolution you wish to display so that the browser can display that image on devices with a high device pixel ratio. Per-image transforms permalink By default, enhanced images will be transformed to more efficient formats. However, you may wish to apply other transforms such as a blur, quality, flatten, or rotate operation. You can run per-image transforms by appending a query string: See the imagetools repo for the full list of directives. Loading images dynamically from a CDN permalink In some cases, the images may not be accessible at build time — e.g. they may live inside a content management system or elsewhere. Using a content delivery network (CDN) can allow you to optimize these images dynamically, and provides more flexibility with regards to sizes, but it may involve some setup overhead and usage costs. Depending on caching strategy, the browser may not be able to use a cached copy of the asset until a 304 response is received from the CDN. Building HTML to target CDNs may result in slightly smaller and simpler HTML because they can serve the appropriate file format for an tag based on the User-Agent header whereas build-time optimizations must produce tags with multiple sources. Finally, some CDNs may generate images lazily, which could have a negative performance impact for sites with low traffic and frequently changing images. CDNs can generally be used without any need for a library. However, there are a number of libraries with Svelte support that make it easier. @unpic/svelte is a CDN-agnostic library with support for a large number of providers. You may also find that specific CDNs like Cloudinary have Svelte support. Finally, some content management systems (CMS) which support Svelte (such as Contentful, Storyblok, and Contentstack) have built-in support for image handling. Best practices permalink For each image type, use the appropriate solution from those discussed above. You can mix and match all three solutions in one project. For example, you may use Vite's built-in handling to provide images for tags, display images on your homepage with @sveltejs/enhanced-img, and display user-submitted content with a dynamic approach. Consider serving all images via CDN regardless of the image optimization types you use. CDNs reduce latency by distributing copies of static assets globally. Your original images should have a good quality/resolution and should have 2x the width it will be displayed at to serve HiDPI devices. Image processing can size images down to save bandwidth when serving smaller screens, but it would be a waste of bandwidth to invent pixels to size images up. For images which are much larger than the width of a mobile device (roughly 400px), such as a hero image taking the width of the page design, specify sizes so that smaller images can be served on smaller devices. Choose one image per page which is the most important/largest one and give it priority so it loads faster. This gives you better web vitals scores (largest contentful paint in particular). Give the image a container or styling so that it is constrained and does not jump around. width and height help the browser reserving space while the image is still loading. @sveltejs/enhanced-img will add a width and height for you. Always provide a good alt text. The Svelte compiler will warn you if you don't do this. PREVIOUS Performance NEXT Accessibility GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Page options • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/page-options",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte CORE CONCEPTS Page options Edit this page on GitHub ON THIS PAGE By default, SvelteKit will render (or prerender) any component first on the server and send it to the client as HTML. It will then render the component again in the browser to make it interactive in a process called hydration. For this reason, you need to ensure that components can run in both places. SvelteKit will then initialize a router that takes over subsequent navigations. You can control each of these on a page-by-page basis by exporting options from +page.js or +page.server.js, or for groups of pages using a shared +layout.js or +layout.server.js. To define an option for the whole app, export it from the root layout. Child layouts and pages override values set in parent layouts, so — for example — you can enable prerendering for your entire app then disable it for pages that need to be dynamically rendered. You can mix and match these options in different areas of your app. For example you could prerender your marketing page for maximum speed, server-render your dynamic pages for SEO and accessibility and turn your admin section into an SPA by rendering it on the client only. This makes SvelteKit very versatile. prerender permalink It's likely that at least some routes of your app can be represented as a simple HTML file generated at build time. These routes can be prerendered. +page.js/+page.server.js/+server.js export const prerender = true; Alternatively, you can set export const prerender = true in your root +layout.js or +layout.server.js and prerender everything except pages that are explicitly marked as not prerenderable: +page.js/+page.server.js/+server.js export const prerender = false; Routes with prerender = true will be excluded from manifests used for dynamic SSR, making your server (or serverless/edge functions) smaller. In some cases you might want to prerender a route but also include it in the manifest (for example, with a route like /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] where you want to prerender your most recent/popular content but server-render the long tail) — for these cases, there's a third option, 'auto': +page.js/+page.server.js/+server.js export const prerender = 'auto'; If your entire app is suitable for prerendering, you can use adapter-static, which will output files suitable for use with any static webserver. The prerenderer will start at the root of your app and generate files for any prerenderable pages or +server.js routes it finds. Each page is scanned for elements that point to other pages that are candidates for prerendering — because of this, you generally don't need to specify which pages should be accessed. If you do need to specify which pages should be accessed by the prerenderer, you can do so with config.kit.prerender.entries, or by exporting an entries function from your dynamic route. While prerendering, the value of building imported from $app/environment will be true. Prerendering server routes permalink Unlike the other page options, prerender also applies to +server.js files. These files are not affected by layouts, but will inherit default values from the pages that fetch data from them, if any. For example if a +page.js contains this load function... +page.js export const prerender = true; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').PageLoad} \\\\\\\\\\\\\\*/ export async function load({ fetch }) { const res = await fetch('/my-server-route.json'); return await res.json(); } ...then src/routes/my-server-route.json/+server.js will be treated as prerenderable if it doesn't contain its own export const prerender = false. When not to prerender permalink The basic rule is this: for a page to be prerenderable, any two users hitting it directly must get the same content from the server. Not all pages are suitable for prerendering. Any content that is prerendered will be seen by all users. You can of course fetch personalized data in onMount in a prerendered page, but this may result in a poorer user experience since it will involve blank initial content or loading indicators. Note that you can still prerender pages that load data based on the page's parameters, such as a src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.svelte route. Accessing url.searchParams during prerendering is forbidden. If you need to use it, ensure you are only doing so in the browser (for example in onMount). Pages with actions cannot be prerendered, because a server must be able to handle the action POST requests. Route conflicts permalink Because prerendering writes to the filesystem, it isn't possible to have two endpoints that would cause a directory and a file to have the same name. For example, src/routes/foo/+server.js and src/routes/foo/bar/+server.js would try to create foo and foo/bar, which is impossible. For that reason among others, it's recommended that you always include a file extension — src/routes/foo.json/+server.js and src/routes/foo/bar.json/+server.js would result in foo.json and foo/bar.json files living harmoniously side-by-side. For pages, we skirt around this problem by writing foo/index.html instead of foo. Troubleshooting permalink If you encounter an error like 'The following routes were marked as prerenderable, but were not prerendered' it's because the route in question (or a parent layout, if it's a page) has export const prerender = true but the page wasn't actually prerendered, because it wasn't reached by the prerendering crawler. Since these routes cannot be dynamically server-rendered, this will cause errors when people try to access the route in question. There are two ways to fix it: Ensure that SvelteKit can find the route by following links from config.kit.prerender.entries or the entries page option. Add links to dynamic routes (i.e. pages with \\\\\\\\\\\\\\[parameters\\\\\\\\\\\\\\] ) to this option if they are not found through crawling the other entry points, else they are not prerendered because SvelteKit doesn't know what value the parameters should have. Pages not marked as prerenderable will be ignored and their links to other pages will not be crawled, even if some of them would be prerenderable. Change export const prerender = true to export const prerender = 'auto'. Routes with 'auto' can be dynamically server rendered entries permalink SvelteKit will discover pages to prerender automatically, by starting at entry points and crawling them. By default, all your non-dynamic routes are considered entry points — for example, if you have these routes... / # non-dynamic /blog # non-dynamic /blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\] # dynamic, because of \\\\\\\\\\\\\\`\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]\\\\\\\\\\\\\\` ...SvelteKit will prerender / and /blog, and in the process discover links like \\\\\\[which give it new pages to prerender. Most of the time, that's enough. In some situations, links to pages like /blog/hello-world might not exist (or might not exist on prerendered pages), in which case we need to tell SvelteKit about their existence. This can be done with config.kit.prerender.entries, or by exporting an entries function from a +page.js, a +page.server.js or a +server.js belonging to a dynamic route: src/routes/blog/\\\\\\\\\\\\\\[slug\\\\\\\\\\\\\\]/+page.server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').EntryGenerator} \\\\\\\\\\\\\\*/ export function entries() { return \\\\\\\\\\\\\\[ { slug: 'hello-world' }, { slug: 'another-blog-post' } \\\\\\\\\\\\\\]; } export const prerender = true; entries can be an async function, allowing you to (for example) retrieve a list of posts from a CMS or database, in the example above. ssr permalink Normally, SvelteKit renders your page on the server first and sends that HTML to the client where it's hydrated. If you set ssr to false, it renders an empty 'shell' page instead. This is useful if your page is unable to be rendered on the server (because you use browser-only globals like document for example), but in most situations it's not recommended (see appendix). +page.js export const ssr = false; // If both \\\\\\\\\\\\\\`ssr\\\\\\\\\\\\\\` and \\\\\\\\\\\\\\`csr\\\\\\\\\\\\\\` are \\\\\\\\\\\\\\`false\\\\\\\\\\\\\\`, nothing will be rendered! If you add export const ssr = false to your root +layout.js, your entire app will only be rendered on the client — which essentially means you turn your app into an SPA. csr permalink Ordinarily, SvelteKit hydrates your server-rendered HTML into an interactive client-side-rendered (CSR) page. Some pages don't require JavaScript at all — many blog posts and 'about' pages fall into this category. In these cases you can disable CSR: +page.js export const csr = false; // If both \\\\\\\\\\\\\\`csr\\\\\\\\\\\\\\` and \\\\\\\\\\\\\\`ssr\\\\\\\\\\\\\\` are \\\\\\\\\\\\\\`false\\\\\\\\\\\\\\`, nothing will be rendered! Disabling CSR does not ship any JavaScript to the client. This means: The webpage should work with HTML and CSS only. tags inside all Svelte components are removed. elements cannot be progressively enhanced. Links are handled by the browser with a full-page navigation. trailingSlash permalink By default, SvelteKit will remove trailing slashes from URLs — if you visit /about/, it will respond with a redirect to /about. You can change this behaviour with the trailingSlash option, which can be one of 'never' (the default), 'always', or 'ignore'. As with other page options, you can export this value from a +layout.js or a +layout.server.js and it will apply to all child pages. You can also export the configuration from +server.js files. src/routes/+layout.js export const trailingSlash = 'always'; This option also affects prerendering. If trailingSlash is always, a route like /about will result in an about/index.html file, otherwise it will create about.html, mirroring static webserver conventions. Ignoring trailing slashes is not recommended — the semantics of relative paths differ between the two cases (./y from /x is /y, but from /x/ is /x/y), and /x and /x/ are treated as separate URLs which is harmful to SEO. config permalink With the concept of adapters, SvelteKit is able to run on a variety of platforms. Each of these might have specific configuration to further tweak the deployment — for example on Vercel you could choose to deploy some parts of your app on the edge and others on serverless environments. config is an object with key-value pairs at the top level. Beyond that, the concrete shape is dependent on the adapter you're using. Every adapter should provide a Config interface to import for type safety. Consult the documentation of your adapter for more information. src/routes/+page.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('some-adapter').Config} \\\\\\\\\\\\\\*/ export const config = { runtime: 'edge' }; config objects are merged at the top level (but not deeper levels). This means you don't need to repeat all the values in a +page.js if you want to only override some of the values in the upper +layout.js. For example this layout configuration... src/routes/+layout.js export const config = { runtime: 'edge', regions: 'all', foo: { bar: true } } ...is overridden by this page configuration... src/routes/+page.js export const config = { regions: \\\\\\\\\\\\\\['us1', 'us2'\\\\\\\\\\\\\\], foo: { baz: true } } ...which results in the config value { runtime: 'edge', regions: \\\\\\\\\\\\\\['us1', 'us2'\\\\\\\\\\\\\\], foo: { baz: true } } for that page. Further reading permalink Tutorial: Page options PREVIOUS Form actions NEXT State management GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript\\\\\\](/blog/hello-world)"
  },
  {
    "title": "Link options • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/link-options#data-sveltekit-preload-data",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte ADVANCED Link options Edit this page on GitHub ON THIS PAGE In SvelteKit, elements (rather than framework-specific components) are used to navigate between the routes of your app. If the user clicks on a link whose href is 'owned' by the app (as opposed to, say, a link to an external site) then SvelteKit will navigate to the new page by importing its code and then calling any load functions it needs to fetch data. You can customise the behaviour of links with data-sveltekit-\\\\\\\\\\\\\\* attributes. These can be applied to the itself, or to a parent element. These options also apply to elements with method=\"GET\". data-sveltekit-preload-data permalink Before the browser registers that the user has clicked on a link, we can detect that they've hovered the mouse over it (on desktop) or that a touchstart or mousedown event was triggered. In both cases, we can make an educated guess that a click event is coming. SvelteKit can use this information to get a head start on importing the code and fetching the page's data, which can give us an extra couple of hundred milliseconds — the difference between a user interface that feels laggy and one that feels snappy. We can control this behaviour with the data-sveltekit-preload-data attribute, which can have one of two values: \"hover\" means that preloading will start if the mouse comes to a rest over a link. On mobile, preloading begins on touchstart \"tap\" means that preloading will start as soon as a touchstart or mousedown event is registered The default project template has a data-sveltekit-preload-data=\"hover\" attribute applied to the element in src/app.html, meaning that every link is preloaded on hover by default: %sveltekit.body% Sometimes, calling load when the user hovers over a link might be undesirable, either because it's likely to result in false positives (a click needn't follow a hover) or because data is updating very quickly and a delay could mean staleness. In these cases, you can specify the \"tap\" value, which causes SvelteKit to call load only when the user taps or clicks on a link: \\\\\\[Get current stonk values\\\\\\](/stonks) You can also programmatically invoke preloadData from $app/navigation. Data will never be preloaded if the user has chosen reduced data usage, meaning navigator.connection.saveData is true. data-sveltekit-preload-code permalink Even in cases where you don't want to preload data for a link, it can be beneficial to preload the code. The data-sveltekit-preload-code attribute works similarly to data-sveltekit-preload-data, except that it can take one of four values, in decreasing 'eagerness': \"eager\" means that links will be preloaded straight away \"viewport\" means that links will be preloaded once they enter the viewport \"hover\" - as above, except that only code is preloaded \"tap\" - as above, except that only code is preloaded Note that viewport and eager only apply to links that are present in the DOM immediately following navigation — if a link is added later (in an {#if ...} block, for example) it will not be preloaded until triggered by hover or tap. This is to avoid performance pitfalls resulting from aggressively observing the DOM for changes. Since preloading code is a prerequisite for preloading data, this attribute will only have an effect if it specifies a more eager value than any data-sveltekit-preload-data attribute that is present. As with data-sveltekit-preload-data, this attribute will be ignored if the user has chosen reduced data usage. data-sveltekit-reload permalink Occasionally, we need to tell SvelteKit not to handle a link, but allow the browser to handle it. Adding a data-sveltekit-reload attribute to a link... \\\\\\[Path\\\\\\](/path) ...will cause a full-page navigation when the link is clicked. Links with a rel=\"external\" attribute will receive the same treatment. In addition, they will be ignored during prerendering. data-sveltekit-replacestate permalink Sometimes you don't want navigation to create a new entry in the browser's session history. Adding a data-sveltekit-replacestate attribute to a link... \\\\\\[Path\\\\\\](/path) ...will replace the current history entry rather than creating a new one with pushState when the link is clicked. data-sveltekit-keepfocus permalink Sometimes you don't want focus to be reset after navigation. For example, maybe you have a search form that submits as the user is typing, and you want to keep focus on the text input. Adding a data-sveltekit-keepfocus attribute to it... ...will cause the currently focused element to retain focus after navigation. In general, avoid using this attribute on links, since the focused element would be the tag (and not a previously focused element) and screen reader and other assistive technology users often expect focus to be moved after a navigation. You should also only use this attribute on elements that still exist after navigation. If the element no longer exists, the user's focus will be lost, making for a confusing experience for assistive technology users. data-sveltekit-noscroll permalink When navigating to internal links, SvelteKit mirrors the browser's default navigation behaviour: it will change the scroll position to 0,0 so that the user is at the very top left of the page (unless the link includes a #hash, in which case it will scroll to the element with a matching ID). In certain cases, you may wish to disable this behaviour. Adding a data-sveltekit-noscroll attribute to a link... \\\\\\[Path\\\\\\](path) ...will prevent scrolling after the link is clicked. Disabling options permalink To disable any of these options inside an element where they have been enabled, use the \"false\" value: \\\\\\[a\\\\\\](/a) \\\\\\[b\\\\\\](/b) \\\\\\[c\\\\\\](/c) \\\\\\[d\\\\\\](/d) \\\\\\[e\\\\\\](/e) \\\\\\[f\\\\\\](/f) To apply an attribute to an element conditionally, do this: PREVIOUS Errors NEXT Service workers GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Service workers • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/service-workers",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte ADVANCED Service workers Edit this page on GitHub ON THIS PAGE Service workers act as proxy servers that handle network requests inside your app. This makes it possible to make your app work offline, but even if you don't need offline support (or can't realistically implement it because of the type of app you're building), it's often worth using service workers to speed up navigation by precaching your built JS and CSS. In SvelteKit, if you have a src/service-worker.js file (or src/service-worker/index.js) it will be bundled and automatically registered. You can change the location of your service worker if you need to. You can disable automatic registration if you need to register the service worker with your own logic or use another solution. The default registration looks something like this: if ('serviceWorker' in navigator) { addEventListener('load', function () { navigator.serviceWorker.register('./path/to/service-worker.js'); }); } Inside the service worker permalink Inside the service worker you have access to the $service-worker module, which provides you with the paths to all static assets, build files and prerendered pages. You're also provided with an app version string, which you can use for creating a unique cache name, and the deployment's base path. If your Vite config specifies define (used for global variable replacements), this will be applied to service workers as well as your server/client builds. The following example caches the built app and any files in static eagerly, and caches all other requests as they happen. This would make each page work offline once visited. /// import { build, files, version } from '$service-worker'; // Create a unique cache name for this deployment const CACHE = \\\\\\\\\\\\\\`cache-${version}\\\\\\\\\\\\\\`; const ASSETS = \\\\\\\\\\\\\\[ ...build, // the app itself ...files // everything in \\\\\\\\\\\\\\`static\\\\\\\\\\\\\\` \\\\\\\\\\\\\\]; self.addEventListener('install', (event) => { // Create a new cache and add all files to it async function addFilesToCache() { const cache = await caches.open(CACHE); await cache.addAll(ASSETS); } event.waitUntil(addFilesToCache()); }); self.addEventListener('activate', (event) => { // Remove previous cached data from disk async function deleteOldCaches() { for (const key of await caches.keys()) { if (key !== CACHE) await caches.delete(key); } } event.waitUntil(deleteOldCaches()); }); self.addEventListener('fetch', (event) => { // ignore POST requests etc if (event.request.method !== 'GET') return; async function respond() { const url = new URL(event.request.url); const cache = await caches.open(CACHE); // \\\\\\\\\\\\\\`build\\\\\\\\\\\\\\`/\\\\\\\\\\\\\\`files\\\\\\\\\\\\\\` can always be served from the cache if (ASSETS.includes(url.pathname)) { const response = await cache.match(url.pathname); if (response) { return response; } } // for everything else, try the network first, but // fall back to the cache if we're offline try { const response = await fetch(event.request); // if we're offline, fetch can return a value that is not a Response // instead of throwing - and we can't pass this non-Response to respondWith if (!(response instanceof Response)) { throw new Error('invalid response from fetch'); } if (response.status === 200) { cache.put(event.request, response.clone()); } return response; } catch (err) { const response = await cache.match(event.request); if (response) { return response; } // if there's no cache, then just error out // as there is nothing we can do to respond to this request throw err; } } event.respondWith(respond()); }); Be careful when caching! In some cases, stale data might be worse than data that's unavailable while offline. Since browsers will empty caches if they get too full, you should also be careful about caching large assets like video files. During development permalink The service worker is bundled for production, but not during development. For that reason, only browsers that support modules in service workers will be able to use them at dev time. If you are manually registering your service worker, you will need to pass the { type: 'module' } option in development: import { dev } from '$app/environment'; navigator.serviceWorker.register('/service-worker.js', { type: dev ? 'module' : 'classic' }); build and prerendered are empty arrays during development Type safety permalink Setting up proper types for service workers requires some manual setup. Inside your service-worker.js, add the following to the top of your file: /// /// /// /// const sw = /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {ServiceWorkerGlobalScope} \\\\\\\\\\\\\\*/ (/\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {unknown} \\\\\\\\\\\\\\*/ (self)); This disables access to DOM typings like HTMLElement which are not available inside a service worker and instantiates the correct globals. The reassignment of self to sw allows you to type cast it in the process (there are a couple of ways to do this, but the easiest that requires no additional files). Use sw instead of self in the rest of the file. The reference to the SvelteKit types ensures that the $service-worker import has proper type definitions. Other solutions permalink SvelteKit's service worker implementation is deliberately low-level. If you need a more full-flegded but also more opinionated solution, we recommend looking at solutions like Vite PWA plugin, which uses Workbox. For more general information on service workers, we recommend the MDN web docs. PREVIOUS Link options NEXT Server-only modules GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Glossary • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/glossary#routing",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte APPENDIX Glossary Edit this page on GitHub ON THIS PAGE Glossary CSR Hydration Prerendering Routing SPA SSG SSR The core of SvelteKit provides a highly configurable rendering engine. This section describes some of the terms used when discussing rendering. A reference for setting these options is provided in the documentation above. CSR permalink Client-side rendering (CSR) is the generation of the page contents in the web browser using JavaScript. In SvelteKit, client-side rendering will be used by default, but you can turn off JavaScript with the csr = false page option. Hydration permalink Svelte components store some state and update the DOM when the state is updated. When fetching data during SSR, by default SvelteKit will store this data and transmit it to the client along with the server-rendered HTML. The components can then be initialized on the client with that data without having to call the same API endpoints again. Svelte will then check that the DOM is in the expected state and attach event listeners in a process called hydration. Once the components are fully hydrated, they can react to changes to their properties just like any newly created Svelte component. In SvelteKit, pages will be hydrated by default, but you can turn off JavaScript with the csr = false page option. Prerendering permalink Prerendering means computing the contents of a page at build time and saving the HTML for display. This approach has the same benefits as traditional server-rendered pages, but avoids recomputing the page for each visitor and so scales nearly for free as the number of visitors increases. The tradeoff is that the build process is more expensive and prerendered content can only be updated by building and deploying a new version of the application. Not all pages can be prerendered. The basic rule is this: for content to be prerenderable, any two users hitting it directly must get the same content from the server, and the page must not contain actions. Note that you can still prerender content that is loaded based on the page's parameters as long as all users will be seeing the same prerendered content. Pre-rendered pages are not limited to static content. You can build personalized pages if user-specific data is fetched and rendered client-side. This is subject to the caveat that you will experience the downsides of not doing SSR for that content as discussed above. In SvelteKit, you can control prerendering with the prerender page option and prerender config in svelte.config.js. Routing permalink By default, when you navigate to a new page (by clicking on a link or using the browser's forward or back buttons), SvelteKit will intercept the attempted navigation and handle it instead of allowing the browser to send a request to the server for the destination page. SvelteKit will then update the displayed contents on the client by rendering the component for the new page, which in turn can make calls to the necessary API endpoints. This process of updating the page on the client in response to attempted navigation is called client-side routing. In SvelteKit, client-side routing will be used by default, but you can skip it with data-sveltekit-reload. SPA permalink A single-page app (SPA) is an application in which all requests to the server load a single HTML file which then does client-side rendering of the requested contents based on the requested URL. All navigation is handled on the client-side in a process called client-side routing with per-page contents being updated and common layout elements remaining largely unchanged. SPAs do not provide SSR, which has the shortcoming described above. However, some applications are not greatly impacted by these shortcomings such as a complex business application behind a login where SEO would not be important and it is known that users will be accessing the application from a consistent computing environment. In SvelteKit, you can build an SPA with adapter-static. SSG permalink Static Site Generation (SSG) is a term that refers to a site where every page is prerendered. SvelteKit was not built to do only static site generation like some tools and so may not scale as well to efficiently render a very large number of pages as tools built specifically for that purpose. However, in contrast to most purpose-built SSGs, SvelteKit does nicely allow for mixing and matching different rendering types on different pages. One benefit of fully prerendering a site is that you do not need to maintain or pay for servers to perform SSR. Once generated, the site can be served from CDNs, leading to great \"time to first byte\" performance. This delivery model is often referred to as JAMstack. In SvelteKit, you can do static site generation by using adapter-static or by configuring every page to be prerendered using the prerender page option or prerender config in svelte.config.js. SSR permalink Server-side rendering (SSR) is the generation of the page contents on the server. SSR is generally preferred for SEO. While some search engines can index content that is dynamically generated on the client-side it may take longer even in these cases. It also tends to improve perceived performance and makes your app accessible to users if JavaScript fails or is disabled (which happens more often than you probably think). In SvelteKit, pages are server-side rendered by default. You can disable SSR with the ssr page option. PREVIOUS Additional resources NEXT GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Frequently asked questions • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/faq#what-can-i-make-with-sveltekit",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte APPENDIX Frequently asked questions Edit this page on GitHub ON THIS PAGE Frequently asked questions Other resources What can I make with SvelteKit? How do I use HMR with SvelteKit? How do I include details from package.json in my application? How do I fix the error I'm getting trying to include a package? How do I use the view transitions API with SvelteKit? How do I use X with SvelteKit? Other resources permalink Please see the Svelte FAQ and vite-plugin-svelte FAQ as well for the answers to questions deriving from those libraries. What can I make with SvelteKit? permalink SvelteKit can be used to create most kinds of applications. Out of the box, SvelteKit supports many features including: Dynamic page content with load functions and API routes. SEO-friendly dynamic content with server-side rendering (SSR). User-friendly progressively-enhanced interactive pages with SSR and Form Actions. Static pages with prerendering. SvelteKit can also be deployed to a wide spectrum of hosted architectures via adapters. In cases where SSR is used (or server-side logic is added without prerendering), those functions will be adapted to the target backend. Some examples include: Self-hosted dynamic web applications with a Node.js backend. Serverless web applications with backend loaders and APIs deployed as remote functions. See zero-config deployments for popular deployment options. Static pre-rendered sites such as a blog or multi-page site hosted on a CDN or static host. Statically-generated sites are shipped without a backend. Single-page Applications (SPAs) with client-side routing and rendering for API-driven dynamic content. SPAs are shipped without a backend and are not server-rendered. This option is commonly chosen when bundling SvelteKit with an app written in PHP, .Net, Java, C, Golang, Rust, etc. A mix of the above; some routes can be static, and some routes can use backend functions to fetch dynamic information. This can be configured with page options that includes the option to opt out of SSR. In order to support SSR, a JS backend — such as Node.js or Deno-based server, serverless function, or edge function — is required. It is also possible to write custom adapters or leverage community adapters to deploy SvelteKit to more platforms such as specialized server environments, browser extensions, or native applications. See integrations for more examples and integrations. How do I use HMR with SvelteKit? permalink SvelteKit has HMR enabled by default powered by svelte-hmr. If you saw Rich's presentation at the 2020 Svelte Summit, you may have seen a more powerful-looking version of HMR presented. This demo had svelte-hmr's preserveLocalState flag on. This flag is now off by default because it may lead to unexpected behaviour and edge cases. But don't worry, you are still getting HMR with SvelteKit! If you'd like to preserve local state you can use the @hmr:keep or @hmr:keep-all directives as documented on the svelte-hmr page. How do I include details from package.json in my application? permalink You cannot directly require JSON files, since SvelteKit expects svelte.config.js to be an ES module. If you'd like to include your application's version number or other information from package.json in your application, you can load JSON like so: svelte.config.js import { readFileSync } from 'node:fs'; import { fileURLToPath } from 'node:url'; const path = fileURLToPath(new URL('package.json', import.meta.url)); const pkg = JSON.parse(readFileSync(path, 'utf8')); How do I fix the error I'm getting trying to include a package? permalink Most issues related to including a library are due to incorrect packaging. You can check if a library's packaging is compatible with Node.js by entering it into the publint website. Here are a few things to keep in mind when checking if a library is packaged correctly: exports takes precedence over the other entry point fields such as main and module. Adding an exports field may not be backwards-compatible as it prevents deep imports. ESM files should end with .mjs unless \"type\": \"module\" is set in which any case CommonJS files should end with .cjs. main should be defined if exports is not. It should be either a CommonJS or ESM file and adhere to the previous bullet. If a module field is defined, it should refer to an ESM file. Svelte components should be distributed as uncompiled .svelte files with any JS in the package written as ESM only. Custom script and style languages, like TypeScript and SCSS, should be preprocessed as vanilla JS and CSS respectively. We recommend using svelte-package for packaging Svelte libraries, which will do this for you. Libraries work best in the browser with Vite when they distribute an ESM version, especially if they are dependencies of a Svelte component library. You may wish to suggest to library authors that they provide an ESM version. However, CommonJS (CJS) dependencies should work as well since, by default, vite-plugin-svelte will ask Vite to pre-bundle them using esbuild to convert them to ESM. If you are still encountering issues we recommend searching both the Vite issue tracker and the issue tracker of the library in question. Sometimes issues can be worked around by fiddling with the optimizeDeps or ssr config values though we recommend this as only a short-term workaround in favor of fixing the library in question. How do I use the view transitions API with SvelteKit? permalink While SvelteKit does not have any specific integration with view transitions, you can call document.startViewTransition in onNavigate to trigger a view transition on every client-side navigation. import { onNavigate } from '$app/navigation'; onNavigate((navigation) => { if (!document.startViewTransition) return; return new Promise((resolve) => { document.startViewTransition(async () => { resolve(); await navigation.complete; }); }); }); For more, see \"Unlocking view transitions\" on the Svelte blog. How do I use X with SvelteKit? permalink Make sure you've read the documentation section on integrations. If you're still having trouble, solutions to common issues are listed below. How do I setup a database? permalink Put the code to query your database in a server route - don't query the database in .svelte files. You can create a db.js or similar that sets up a connection immediately and makes the client accessible throughout the app as a singleton. You can execute any one-time setup code in hooks.js and import your database helpers into any endpoint that needs them. How do I use a client-side only library that depends on document or window? permalink If you need access to the document or window variables or otherwise need code to run only on the client-side you can wrap it in a browser check: import { browser } from '$app/environment'; if (browser) { // client-only code here } You can also run code in onMount if you'd like to run it after the component has been first rendered to the DOM: import { onMount } from 'svelte'; onMount(async () => { const { method } = await import('some-browser-only-library'); method('hello world'); }); If the library you'd like to use is side-effect free you can also statically import it and it will be tree-shaken out in the server-side build where onMount will be automatically replaced with a no-op: import { onMount } from 'svelte'; import { method } from 'some-browser-only-library'; onMount(() => { method('hello world'); }); Finally, you may also consider using an {#await} block: index.svelte import { browser } from '$app/environment'; const ComponentConstructor = browser ? import('some-browser-only-library').then((module) => module.Component) : new Promise(() => {}); {#await ComponentConstructor} Loading... {:then component} {:catch error} Something went wrong: {error.message} {/await} How do I use a different backend API server? permalink You can use event.fetch to request data from an external API server, but be aware that you would need to deal with CORS, which will result in complications such as generally requiring requests to be preflighted resulting in higher latency. Requests to a separate subdomain may also increase latency due to an additional DNS lookup, TLS setup, etc. If you wish to use this method, you may find handleFetch helpful. Another approach is to set up a proxy to bypass CORS headaches. In production, you would rewrite a path like /api to the API server; for local development, use Vite's server.proxy option. How to setup rewrites in production will depend on your deployment platform. If rewrites aren't an option, you could alternatively add an API route: src/routes/api/\\\\\\\\\\\\\\[...path\\\\\\\\\\\\\\]/+server.js /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('./$types').RequestHandler} \\\\\\\\\\\\\\*/ export function GET({ params, url }) { return fetch(\\\\\\\\\\\\\\`https://my-api-server.com/${params.path + url.search}\\\\\\\\\\\\\\`); } (Note that you may also need to proxy POST/PATCH etc requests, and forward request.headers, depending on your needs.) How do I use middleware? permalink adapter-node builds a middleware that you can use with your own server for production mode. In dev, you can add middleware to Vite by using a Vite plugin. For example: import { sveltekit } from '@sveltejs/kit/vite'; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('vite').Plugin} \\\\\\\\\\\\\\*/ const myPlugin = { name: 'log-request-middleware', configureServer(server) { server.middlewares.use((req, res, next) => { console.log(\\\\\\\\\\\\\\`Got request ${req.url}\\\\\\\\\\\\\\`); next(); }); } }; /\\\\\\\\\\\\\\*\\\\\\\\\\\\\\* @type {import('vite').UserConfig} \\\\\\\\\\\\\\*/ const config = { plugins: \\\\\\\\\\\\\\[myPlugin, sveltekit()\\\\\\\\\\\\\\] }; export default config; See Vite's configureServer docs for more details including how to control ordering. Does it work with Yarn 2? permalink Sort of. The Plug'n'Play feature, aka 'pnp', is broken (it deviates from the Node module resolution algorithm, and doesn't yet work with native JavaScript modules which SvelteKit — along with an increasing number of packages — uses). You can use nodeLinker: 'node-modules' in your .yarnrc.yml file to disable pnp, but it's probably easier to just use npm or pnpm, which is similarly fast and efficient but without the compatibility headaches. How do I use with Yarn 3? permalink Currently ESM Support within the latest Yarn (version 3) is considered experimental. The below seems to work although your results may vary. First create a new application: yarn create svelte myapp cd myapp And enable Yarn Berry: yarn set version berry yarn install Yarn 3 global cache permalink One of the more interesting features of Yarn Berry is the ability to have a single global cache for packages, instead of having multiple copies for each project on the disk. However, setting enableGlobalCache to true causes building to fail, so it is recommended to add the following to the .yarnrc.yml file: nodeLinker: node-modules This will cause packages to be downloaded into a local node\\\\\\\\\\\\\\_modules directory but avoids the above problem and is your best bet for using version 3 of Yarn at this point in time. PREVIOUS Types NEXT Integrations GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Introduction • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/introduction#main",
    "html": "Skip to main content KIT.SVELTE.DEV Docs Tutorial Svelte GETTING STARTED Introduction Edit this page on GitHub ON THIS PAGE Before we begin permalink If you're new to Svelte or SvelteKit we recommend checking out the interactive tutorial. If you get stuck, reach out for help in the Discord chatroom. What is SvelteKit? permalink SvelteKit is a framework for rapidly developing robust, performant web applications using Svelte. If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt. To learn more about the kinds of applications you can build with SvelteKit, see the FAQ. What is Svelte? permalink In short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out the Svelte tutorial. SvelteKit vs Svelte permalink Svelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app. SvelteKit helps you build web apps while following modern best practices and providing solutions to common development challenges. It offers everything from basic functionalities — like a router that updates your UI when a link is clicked — to more advanced capabilities. Its extensive list of features includes build optimizations to load only the minimal required code; offline support; preloading pages before user navigation; configurable rendering to handle different parts of your app on the server via SSR, in the browser through client-side rendering, or at build-time with prerendering; image optimization; and much more. Building an app with all the modern best practices is fiendishly complicated, but SvelteKit does all the boring stuff for you so that you can get on with the creative part. It reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging Vite with a Svelte plugin to do Hot Module Replacement (HMR). PREVIOUS NEXT Creating a project GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  },
  {
    "title": "Introduction • Docs • SvelteKit",
    "url": "https://kit.svelte.dev/docs/introduction",
    "html": "Skip to main content KIT.SVELTE.DEV ⌘ K Docs Tutorial Svelte GETTING STARTED Introduction Edit this page on GitHub ON THIS PAGE Introduction Before we begin What is SvelteKit? What is Svelte? SvelteKit vs Svelte Before we begin permalink If you're new to Svelte or SvelteKit we recommend checking out the interactive tutorial. If you get stuck, reach out for help in the Discord chatroom. What is SvelteKit? permalink SvelteKit is a framework for rapidly developing robust, performant web applications using Svelte. If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt. To learn more about the kinds of applications you can build with SvelteKit, see the FAQ. What is Svelte? permalink In short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out the Svelte tutorial. SvelteKit vs Svelte permalink Svelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app. SvelteKit helps you build web apps while following modern best practices and providing solutions to common development challenges. It offers everything from basic functionalities — like a router that updates your UI when a link is clicked — to more advanced capabilities. Its extensive list of features includes build optimizations to load only the minimal required code; offline support; preloading pages before user navigation; configurable rendering to handle different parts of your app on the server via SSR, in the browser through client-side rendering, or at build-time with prerendering; image optimization; and much more. Building an app with all the modern best practices is fiendishly complicated, but SvelteKit does all the boring stuff for you so that you can get on with the creative part. It reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging Vite with a Svelte plugin to do Hot Module Replacement (HMR). PREVIOUS NEXT Creating a project GETTING STARTED Introduction Creating a project Project structure Web standards CORE CONCEPTS Routing Loading data Form actions Page options State management BUILD AND DEPLOY Building your app Adapters Zero-config deployments Node servers Static site generation Single-page apps Cloudflare Pages Cloudflare Workers Netlify Vercel Writing adapters ADVANCED Advanced routing Hooks Errors Link options Service workers Server-only modules Snapshots Shallow routing Packaging BEST PRACTICES Performance Images Accessibility SEO REFERENCE Configuration Command Line Interface Modules Types APPENDIX Frequently asked questions Integrations Migrating to SvelteKit v2 Migrating from Sapper Additional resources Glossary JavaScript TypeScript"
  }
]